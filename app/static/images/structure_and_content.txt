Directory Structure:
.
├── app
│   ├── config
│   │   ├── config.py
│   │   ├── dependencies.py
│   │   ├── json_convert.py
│   │   ├── places_of_interest_2023.json
│   │   └── places_of_interest.json
│   ├── depricatedEndpoint.txt
│   ├── __init__.py
│   ├── main.py
│   ├── models
│   │   ├── db_models.py
│   │   ├── models.py
│   │   └── __pycache__
│   │       └── models.cpython-310.pyc
│   ├── non_api_functions
│   │   └── maps_cache_loader.py
│   ├── routes
│   │   ├── addressDataUpdate.py
│   │   ├── admin.py
│   │   ├── combinations.py
│   │   ├── entitlementCalculator.py
│   │   ├── entitlementsBook.py
│   │   ├── GeoSpatialDataUpdate.py
│   │   ├── gisServices.py
│   │   ├── maps.py
│   │   ├── nominations.py
│   │   ├── placesOfInterest.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-310.pyc
│   │   │   ├── entitlementCalculator.cpython-310.pyc
│   │   │   ├── entitlementsBook.cpython-310.pyc
│   │   │   ├── entitlementsRoutes.cpython-310.pyc
│   │   │   ├── gisServices.cpython-310.pyc
│   │   │   ├── maps.cpython-310.pyc
│   │   │   ├── nominations.cpython-310.pyc
│   │   │   └── updatedata.cpython-310.pyc
│   │   └── SVD.py
│   ├── services
│   │   ├── addressServices
│   │   │   └── address_service.py
│   │   ├── auth
│   │   │   ├── auth.py
│   │   │   ├── cros.py
│   │   │   ├── __pycache__
│   │   │   │   ├── auth.cpython-310.pyc
│   │   │   │   ├── cros.cpython-310.pyc
│   │   │   │   └── user_database.cpython-310.pyc
│   │   │   └── user_database.py
│   │   ├── by_orgID
│   │   │   ├── get_communityBoard_by_orgID.py
│   │   │   ├── get_districtWideCouncilor_by_orgID.py
│   │   │   ├── get_licensing_trust_orgID.py
│   │   │   ├── get_localBoard_by_orgID.py
│   │   │   ├── get_mayor_by_orgID.py
│   │   │   ├── get_organization.py
│   │   │   ├── get_regionalCouncil_constituencies_by_orgID.py
│   │   │   ├── get_wards_by_orgID.py
│   │   │   └── __pycache__
│   │   │       ├── get_communityBoard_by_orgID.cpython-310.pyc
│   │   │       ├── get_districtWideCouncilor_by_orgID.cpython-310.pyc
│   │   │       ├── get_localBoard_by_orgID.cpython-310.pyc
│   │   │       ├── get_mayor_by_orgID.cpython-310.pyc
│   │   │       ├── get_organization.cpython-310.pyc
│   │   │       ├── get_regionalCouncil_constituencies_by_orgID.cpython-310.pyc
│   │   │       └── get_wards_by_orgID.cpython-310.pyc
│   │   ├── by_TaID
│   │   │   ├── get_constit_by_ta.py
│   │   │   ├── get_constituencies_with_rc_by_ta.py
│   │   │   ├── get_mconstit_by_ta.py
│   │   │   ├── get_mwards_by_ta.py
│   │   │   ├── get_regc_by_ta.py
│   │   │   ├── get_subdivision_by_ta.py
│   │   │   └── __pycache__
│   │   │       ├── get_constit_by_ta.cpython-310.pyc
│   │   │       ├── get_constituencies_with_rc_by_ta.cpython-310.pyc
│   │   │       └── get_subdivision_by_ta.cpython-310.pyc
│   │   ├── constituency_service.py
│   │   ├── cros.py
│   │   ├── database_internal.py
│   │   ├── database.py
│   │   ├── files_temp
│   │   │   ├── ta_code_data_clean.csv
│   │   │   └── TA_codes.csv
│   │   ├── geojson.py
│   │   ├── GeoSpatialDataUpdate
│   │   │   ├── __pycache__
│   │   │   │   └── utils.cpython-310.pyc
│   │   │   └── utils.py
│   │   ├── get_entitlement
│   │   │   ├── get_entitlement_noRoll.py
│   │   │   ├── get_entitlement_noRoll_ratepayer.py
│   │   │   ├── get_entitlement_roll.py
│   │   │   ├── get_entitlements_byCoordinates_noRoll.py
│   │   │   └── __pycache__
│   │   │       ├── get_entitlement_noRoll.cpython-310.pyc
│   │   │       ├── get_entitlement_noRoll_ratepayer.cpython-310.pyc
│   │   │       ├── get_entitlement_roll.cpython-310.pyc
│   │   │       └── get_entitlements_byCoordinates_noRoll.cpython-310.pyc
│   │   ├── get_ta_list.py
│   │   ├── maps_cache_loader.py
│   │   ├── parse_TA_id.py
│   │   ├── property_processing.py
│   │   ├── __pycache__
│   │   │   ├── address_service.cpython-310.pyc
│   │   │   ├── address_service.cpython-37.pyc
│   │   │   ├── auth.cpython-310.pyc
│   │   │   ├── constituency_service.cpython-310.pyc
│   │   │   ├── cros.cpython-310.pyc
│   │   │   ├── cros.cpython-37.pyc
│   │   │   ├── database.cpython-310.pyc
│   │   │   ├── database.cpython-37.pyc
│   │   │   ├── database_internal.cpython-310.pyc
│   │   │   ├── entitlement_service.cpython-37.pyc
│   │   │   ├── geojson.cpython-310.pyc
│   │   │   ├── get_cb_by_ta.cpython-310.pyc
│   │   │   ├── get_constit_by_ta.cpython-310.pyc
│   │   │   ├── get_constit.cpython-310.pyc
│   │   │   ├── get_constituencies_with_rc_by_ta.cpython-310.pyc
│   │   │   ├── get_constituencies_with_rc.cpython-310.pyc
│   │   │   ├── get_dc_by_org.cpython-310.pyc
│   │   │   ├── get_dc_by_ta.cpython-310.pyc
│   │   │   ├── get_entitlement_noRoll.cpython-310.pyc
│   │   │   ├── get_entitlement_noRoll.cpython-37.pyc
│   │   │   ├── get_entitlement_roll.cpython-310.pyc
│   │   │   ├── get_entitlement_roll.cpython-37.pyc
│   │   │   ├── get_entitlement_service.cpython-37.pyc
│   │   │   ├── get_lb_by_ta.cpython-310.pyc
│   │   │   ├── get_mayor_by_ta.cpython-310.pyc
│   │   │   ├── get_mconstit_by_ta.cpython-310.pyc
│   │   │   ├── get_mwards_by_ta.cpython-310.pyc
│   │   │   ├── get_organization.cpython-310.pyc
│   │   │   ├── get_rc_con_by_org.cpython-310.pyc
│   │   │   ├── get_rc_con.cpython-310.pyc
│   │   │   ├── get_regc_by_ta.cpython-310.pyc
│   │   │   ├── get_regc.cpython-310.pyc
│   │   │   ├── get_subdivision_by_ta.cpython-310.pyc
│   │   │   ├── get_ta_list.cpython-310.pyc
│   │   │   ├── get_wards_by_ta.cpython-310.pyc
│   │   │   ├── __init__.py
│   │   │   ├── maps_cache_loader.cpython-310.pyc
│   │   │   ├── parse_TA_id.cpython-310.pyc
│   │   │   ├── process_coordinates.cpython-310.pyc
│   │   │   ├── property_processing.cpython-310.pyc
│   │   │   ├── Ratepayer_calculator.cpython-310.pyc
│   │   │   ├── Ratepayer_calculator.cpython-37.pyc
│   │   │   ├── ta_details.cpython-310.pyc
│   │   │   └── user_database.cpython-310.pyc
│   │   ├── Ratepayer_calculator.py
│   │   ├── ta_details.py
│   │   └── test.py
│   ├── static
│   │   ├── assets
│   │   │   ├── digital_solution_artwork.webp
│   │   │   ├── ESLogoVert1.png
│   │   │   ├── ESLogoVert2.png
│   │   │   ├── ESLogoVert.png
│   │   │   ├── GreyscaleBackground.png
│   │   │   ├── Header_Green_number.png
│   │   │   ├── marker.svg
│   │   │   ├── tagline.png
│   │   │   ├── upsidedown.png
│   │   │   └── Vector_art.jpg
│   │   ├── scripts
│   │   │   ├── calculator.js
│   │   │   ├── color-palette.js
│   │   │   ├── entitlementBook.js
│   │   │   ├── maps-google.js
│   │   │   ├── maps-google-screenshot.js
│   │   │   ├── maps-Mini.js
│   │   │   └── meshblock.js
│   │   └── styles
│   │       ├── calculator.css
│   │       ├── entitlementBook.css
│   │       ├── ies.css
│   │       └── index.css
│   ├── templates
│   │   ├── add_poi.html
│   │   ├── admin_add_remove_users.html
│   │   ├── admin_base.html
│   │   ├── admin.html
│   │   ├── admin_login.html
│   │   ├── admin_preload_cache.html
│   │   ├── base.html
│   │   ├── current_data.html
│   │   ├── entitlementBook_edit.html
│   │   ├── entitlementBook.html
│   │   ├── entitlementCalculator.html
│   │   ├── error.html
│   │   ├── index.html
│   │   ├── login.html
│   │   ├── map-home.html
│   │   ├── map-screenshot.html
│   │   ├── maps-google-api.html
│   │   ├── maps-google.html
│   │   ├── maps.html
│   │   ├── meshblock_address.html
│   │   ├── poi_home.html
│   │   ├── search_roll.html
│   │   ├── selectCouncil_edit.html
│   │   ├── selectCouncil.html
│   │   ├── select_schema_combination.html
│   │   ├── select_schema.html
│   │   ├── select_table.html
│   │   ├── update_address_view.html
│   │   ├── update_data.html
│   │   ├── update.html
│   │   ├── upload_combination_table.html
│   │   ├── upload_roll.html
│   │   ├── view_combination_table.html
│   │   ├── view_data.html
│   │   └── view_pois.html
│   └── tests
│       ├── test_main.py
│       └── test_routes
│           └── test_entitlementsBook.py
├── config
│   ├── gis-dev
│   │   ├── create_database.sql
│   │   ├── docker-compose.yml
│   │   └── Readme.md
│   └── gis-prod
│       ├── create_database.sql
│       ├── docker-compose.yml
│       └── Readme.md
├── create_database.sql
├── Dockerfile
├── docker_script_dev.sh
├── docker_script_prod.sh
├── generate_structure_and_content.sh
├── merge_dev_to_main.sh
├── README.md
├── requirements.txt
├── structure_and_content.txt
└── structure.txt

31 directories, 204 files

File Contents:

File: ./requirements.txt
---------------------------------
aiofiles==24.1.0
aioredis==2.0.1
annotated-types==0.6.0
anyio==4.3.0
async-timeout==4.0.3
asyncpg==0.29.0
certifi==2024.2.2
charset-normalizer==3.3.2
click==8.1.7
databases==0.9.0
dnspython==2.6.1
ecdsa==0.19.0
email_validator==2.2.0
et-xmlfile==1.1.0
exceptiongroup==1.2.1
fastapi==0.110.2
fuzzywuzzy==0.18.0
GeoAlchemy2==0.15.2
geopandas==1.0.1
googlemaps==4.10.0
greenlet==3.0.3
h11==0.14.0
httpcore==1.0.5
httptools==0.6.1
httpx==0.27.0
idna==3.7
ijson==3.3.0
itsdangerous==2.2.0
Jinja2==3.1.3
Levenshtein==0.25.1
MarkupSafe==2.1.5
numpy==2.0.1
openpyxl==3.1.5
orjson==3.10.6
packaging==24.1
pandas==2.2.3
passlib==1.7.4
psycopg2-binary==2.9.9
pyasn1==0.6.0
pydantic==2.7.0
pydantic-extra-types==2.8.2
pydantic-settings==2.3.4
pydantic_core==2.18.1
PyJWT==2.8.0
pyogrio==0.10.0
pyproj==3.6.1
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
python-jose==3.3.0
python-Levenshtein==0.25.1
python-multipart==0.0.9
pytz==2024.2
PyYAML==6.0.1
rapidfuzz==3.9.3
redis==5.0.4
requests==2.31.0
rsa==4.9
shapely==2.0.5
six==1.16.0
sniffio==1.3.1
SQLAlchemy==2.0.29
starlette==0.37.2
tenacity==9.0.0
typing_extensions==4.11.0
tzdata==2024.2
ujson==5.10.0
urllib3==2.2.1
uvicorn==0.29.0
uvloop==0.19.0
watchfiles==0.22.0
websockets==12.0
aioredis==2.0.1


File: ./docker_script_prod.sh
---------------------------------
#!/bin/bash

# Step 1: Remove the existing container
echo "Stopping and removing the existing container: gis-prod_web_1..."
docker stop gis-prod_web_1 && docker rm gis-prod_web_1
if [ $? -ne 0 ]; then
  echo "Failed to remove container gis-prod_web_1. Exiting."
  exit 1
fi

# Step 2: Build the Docker image
echo "Building the Docker image..."
sudo docker-compose -f config/gis-prod/docker-compose.yml build
if [ $? -ne 0 ]; then
  echo "Failed to build the Docker image. Exiting."
  exit 1
fi

# Step 3: Bring up the container
echo "Starting the container..."
sudo docker-compose -f config/gis-prod/docker-compose.yml up -d
if [ $? -ne 0 ]; then
  echo "Failed to start the container. Exiting."
  exit 1
fi

echo "Script completed successfully."



File: ./README.md
---------------------------------
***********************************************************************************************************************************
Developed By Martin Mathew. 
Year:2024
***********************************************************************************************************************************


# GIS Application [Election Information System]

## Table of Contents
- [Overview](#overview)
- [Features](#features)
- [Requirements](#requirements)
- [Project Structure](#project-structure)
- [Setup Instructions](#setup-instructions)
- [Development Environment](#development-environment)
- [Production Deployment](#production-deployment)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Overview
**EIS** is a web application that serves geographic information services (GIS) using a combination of Docker, FastAPI, PostgreSQL, Redis, and Bitbucket. The application supports both a development and production environment with Docker Compose for easy management and deployment.

## Features
- GIS-based services using FastAPI.
- PostgreSQL database with PostGIS extensions.
- Redis caching for optimized performance.
- Dockerized environment for easy setup and deployment.
- Bitbucket for version control, managing dev and main branches.

## Requirements
To run this application, you need the following installed:
- **Docker** (v20.x or higher)
- **Docker Compose** (v1.29 or higher)
- **Python** (v3.10 or higher, for local development)
- **PostgreSQL** (with PostGIS extensions)
- **Redis**

## Project Structure
```bash
GIS-Repo/
│
├── app/                      # Application source code
│   ├── config/                # Config files for various environments
│   ├── main.py                # Main entry point for FastAPI
│   ├── models/                # SQLAlchemy and Pydantic models
│   ├── routes/                # FastAPI routes
│   ├── services/              # Application services (auth, db, etc.)
│   └── static/                # Static files (if any)
│
├── config/
│   ├── gis-dev/               # Dev Docker Compose and configs
│   └── gis-prod/              # Production Docker Compose and configs
│
├── Dockerfile                 # Dockerfile used for both dev and prod
├── .env                       # Environment variables (not included in repo)
├── requirements.txt           # Python dependencies
└── README.md                  # This readme file
```

## Setup Instructions

### 1. Clone the Repository
```bash
git clone https://bitbucket.org/election_services/eis.git
cd GIS-Repo
```

### 2. Set Up Environment Variables
Create a `.env` file in the root directory with the necessary variables (example provided below).

```bash
# .env
SECRET_KEY=your_secret_key
DATABASE_URL=postgresql://username:password@postgres:5432/gisdb
REDIS_URL=redis://redis:6379
```

### 3. Install Docker and Docker Compose
If Docker and Docker Compose are not installed, follow these [Docker Installation Instructions](https://docs.docker.com/get-docker/) and [Docker Compose Installation Instructions](https://docs.docker.com/compose/install/).

### 4. Build and Run (Development)

To start the development environment:

```bash
docker-compose -f config/gis-dev/docker-compose.yml up --build -d
```

### 5. Build and Run (Production)

To start the production environment:

```bash
docker-compose -f config/gis-prod/docker-compose.yml up --build -d
```

### 6. Access the Application
- **Development**: Visit `http://localhost:8005`.
- **Production**: Adjust to the appropriate IP address or URL depending on your deployment.

## Development Environment

### Working with Dev Branch
1. Switch to the `dev` branch for development:
   ```bash
   git checkout dev
   ```
2. After making changes, push them to Bitbucket:
   ```bash
   git push origin dev
   ```
3. Rebuild and run the dev environment:
   ```bash
   docker-compose -f config/gis-dev/docker-compose.yml build
   docker-compose -f config/gis-dev/docker-compose.yml up -d
   ```



## Production Deployment

### Deploying Changes to Production
1. Merge changes from `dev` to `main`:
   ```bash
   git checkout main
   git merge dev
   git push origin main
   ```
2. Rebuild and run the production environment:
   ```bash
   docker-compose -f config/gis-prod/docker-compose.yml build
   docker-compose -f config/gis-prod/docker-compose.yml up -d
   ```

## Usage

## Usage

Once the application is up and running, you can access the GIS services through FastAPI.

- **Development Environment**: The application runs on port `8005` by default. You can access the Swagger UI in the development environment to interact with the API:
  - `http://localhost:8005/docs`

- **Production Environment**: The production environment is more secure and does not expose the Swagger UI. The application runs on port `8000` by default, and you can access the API directly at:
  - `http://<your-production-server-IP>:8000`

In the development environment, the application automatically reloads when code changes are detected. In production, this feature is disabled for stability.



## Contributing
1. Fork the repository.
2. Create your feature branch (`git checkout -b feature/my-new-feature`).
3. Commit your changes (`git commit -am 'Add some feature'`).
4. Push to the branch (`git push origin feature/my-new-feature`).
5. Create a new Pull Request.

## License

This project is licensed under the MIT License. 

### Third-Party Data Sources

This application uses data from the following third-party sources:

- **LINZ (Land Information New Zealand)**: The data used in this project from LINZ is made available under the [Creative Commons Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/) license. You must give appropriate credit to LINZ when using or distributing this data.
- **Stats NZ**: The data used from Stats NZ is provided under the [Creative Commons Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/) license. Appropriate credit must be given to Stats NZ when using or distributing this data.
- **Google Maps**: This project utilizes Google Maps APIs for geospatial services. Usage of Google Maps is subject to [Google Maps Platform Terms of Service](https://cloud.google.com/maps-platform/terms).

Please ensure compliance with these licenses when using or distributing this project.





Development:

Work on the dev branch.
Push changes to Bitbucket (git push origin dev).

On Server server, pull the latest changes and rebuild the Docker dev environment:
git pull origin dev

docker-compose -f config/gis-dev/docker-compose.yml build
docker-compose -f config/gis-dev/docker-compose.yml up -d


Production:
Once you’re happy with the changes in dev, merge into main:
git checkout main
git merge dev
git push origin main

Then pull and rebuild the production environment:

git pull origin main
docker-compose -f config/gis-prod/docker-compose.yml build
docker-compose -f config/gis-prod/docker-compose.yml up -d


File: ./docker_script_dev.sh
---------------------------------
#!/bin/bash

# Step 1: Remove the existing container
echo "Stopping and removing the existing container: gis-dev_web_1..."
docker stop gis-dev_web_1 && docker rm gis-dev_web_1
if [ $? -ne 0 ]; then
  echo "Failed to remove container gis-dev_web_1. Exiting."
  exit 1
fi

# Step 2: Build the Docker image
echo "Building the Docker image..."
sudo docker-compose -f config/gis-dev/docker-compose.yml build
if [ $? -ne 0 ]; then
  echo "Failed to build the Docker image. Exiting."
  exit 1
fi

# Step 3: Bring up the container
echo "Starting the container..."
sudo docker-compose -f config/gis-dev/docker-compose.yml up -d
if [ $? -ne 0 ]; then
  echo "Failed to start the container. Exiting."
  exit 1
fi

echo "Script completed successfully."



File: ./create_database.sql
---------------------------------


-- Create the data Base
CREATE DATABASE mapping;


-- Create the versioning schema if it doesn't exist
CREATE SCHEMA IF NOT EXISTS versioning;

-- Create the data_versions table if it doesn't exist
CREATE TABLE IF NOT EXISTS versioning.data_versions (
    id SERIAL PRIMARY KEY,
    dataset_name VARCHAR(255) NOT NULL,
    year INT NOT NULL,
    schema_name VARCHAR(255) NOT NULL,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_dataset_name UNIQUE (dataset_name)  -- Add a unique constraint on dataset_name
);


File: ./Dockerfile
---------------------------------
# Use the official Python image from the Docker Hub
FROM python:3.10-slim AS base

# Set environment variables to prevent Python from writing .pyc files and buffering stdout/stderr
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set the working directory inside the container
WORKDIR /app

# Copy the requirements file first and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY ./app /app




File: ./merge_dev_to_main.sh
---------------------------------
#!/bin/bash

# Function to display a message
function log_message() {
    echo -e "\033[1;32m$1\033[0m"
}

# Switch to the main branch
log_message "Switching to the 'main' branch..."
git checkout main

# Check if the checkout was successful
if [ $? -ne 0 ]; then
    echo "Error: Failed to switch to the 'main' branch."
    exit 1
fi

# Merge changes from the dev branch
log_message "Merging changes from 'dev' to 'main'..."
git merge dev

# Check if the merge was successful
if [ $? -ne 0 ]; then
    echo "Error: Merge failed. Resolve conflicts and try again."
    exit 1
fi

# Push the changes to the remote repository
log_message "Pushing changes to the 'main' branch..."
git push origin main

# Check if the push was successful
if [ $? -ne 0 ]; then
    echo "Error: Failed to push changes to the 'main' branch."
    exit 1
fi

log_message "Successfully merged 'dev' into 'main' and pushed to remote."



File: ./structure.txt
---------------------------------
.
├── app
│   ├── config
│   │   ├── config.py
│   │   ├── dependencies.py
│   │   ├── json_convert.py
│   │   ├── places_of_interest_2023.json
│   │   └── places_of_interest.json
│   ├── depricatedEndpoint.txt
│   ├── __init__.py
│   ├── main.py
│   ├── models
│   │   ├── db_models.py
│   │   ├── models.py
│   │   └── __pycache__
│   │       └── models.cpython-310.pyc
│   ├── non_api_functions
│   │   └── maps_cache_loader.py
│   ├── routes
│   │   ├── addressDataUpdate.py
│   │   ├── admin.py
│   │   ├── combinations.py
│   │   ├── entitlementCalculator.py
│   │   ├── entitlementsBook.py
│   │   ├── GeoSpatialDataUpdate.py
│   │   ├── gisServices.py
│   │   ├── maps.py
│   │   ├── nominations.py
│   │   ├── placesOfInterest.py
│   │   ├── __pycache__
│   │   │   ├── admin.cpython-310.pyc
│   │   │   ├── entitlementCalculator.cpython-310.pyc
│   │   │   ├── entitlementsBook.cpython-310.pyc
│   │   │   ├── entitlementsRoutes.cpython-310.pyc
│   │   │   ├── gisServices.cpython-310.pyc
│   │   │   ├── maps.cpython-310.pyc
│   │   │   ├── nominations.cpython-310.pyc
│   │   │   └── updatedata.cpython-310.pyc
│   │   └── SVD.py
│   ├── services
│   │   ├── addressServices
│   │   │   └── address_service.py
│   │   ├── auth
│   │   │   ├── auth.py
│   │   │   ├── cros.py
│   │   │   ├── __pycache__
│   │   │   │   ├── auth.cpython-310.pyc
│   │   │   │   ├── cros.cpython-310.pyc
│   │   │   │   └── user_database.cpython-310.pyc
│   │   │   └── user_database.py
│   │   ├── by_orgID
│   │   │   ├── get_communityBoard_by_orgID.py
│   │   │   ├── get_districtWideCouncilor_by_orgID.py
│   │   │   ├── get_licensing_trust_orgID.py
│   │   │   ├── get_localBoard_by_orgID.py
│   │   │   ├── get_mayor_by_orgID.py
│   │   │   ├── get_organization.py
│   │   │   ├── get_regionalCouncil_constituencies_by_orgID.py
│   │   │   ├── get_wards_by_orgID.py
│   │   │   └── __pycache__
│   │   │       ├── get_communityBoard_by_orgID.cpython-310.pyc
│   │   │       ├── get_districtWideCouncilor_by_orgID.cpython-310.pyc
│   │   │       ├── get_localBoard_by_orgID.cpython-310.pyc
│   │   │       ├── get_mayor_by_orgID.cpython-310.pyc
│   │   │       ├── get_organization.cpython-310.pyc
│   │   │       ├── get_regionalCouncil_constituencies_by_orgID.cpython-310.pyc
│   │   │       └── get_wards_by_orgID.cpython-310.pyc
│   │   ├── by_TaID
│   │   │   ├── get_constit_by_ta.py
│   │   │   ├── get_constituencies_with_rc_by_ta.py
│   │   │   ├── get_mconstit_by_ta.py
│   │   │   ├── get_mwards_by_ta.py
│   │   │   ├── get_regc_by_ta.py
│   │   │   ├── get_subdivision_by_ta.py
│   │   │   └── __pycache__
│   │   │       ├── get_constit_by_ta.cpython-310.pyc
│   │   │       ├── get_constituencies_with_rc_by_ta.cpython-310.pyc
│   │   │       └── get_subdivision_by_ta.cpython-310.pyc
│   │   ├── constituency_service.py
│   │   ├── cros.py
│   │   ├── database_internal.py
│   │   ├── database.py
│   │   ├── files_temp
│   │   │   ├── ta_code_data_clean.csv
│   │   │   └── TA_codes.csv
│   │   ├── geojson.py
│   │   ├── GeoSpatialDataUpdate
│   │   │   ├── __pycache__
│   │   │   │   └── utils.cpython-310.pyc
│   │   │   └── utils.py
│   │   ├── get_entitlement
│   │   │   ├── get_entitlement_noRoll.py
│   │   │   ├── get_entitlement_noRoll_ratepayer.py
│   │   │   ├── get_entitlement_roll.py
│   │   │   ├── get_entitlements_byCoordinates_noRoll.py
│   │   │   └── __pycache__
│   │   │       ├── get_entitlement_noRoll.cpython-310.pyc
│   │   │       ├── get_entitlement_noRoll_ratepayer.cpython-310.pyc
│   │   │       ├── get_entitlement_roll.cpython-310.pyc
│   │   │       └── get_entitlements_byCoordinates_noRoll.cpython-310.pyc
│   │   ├── get_ta_list.py
│   │   ├── maps_cache_loader.py
│   │   ├── parse_TA_id.py
│   │   ├── property_processing.py
│   │   ├── __pycache__
│   │   │   ├── address_service.cpython-310.pyc
│   │   │   ├── address_service.cpython-37.pyc
│   │   │   ├── auth.cpython-310.pyc
│   │   │   ├── constituency_service.cpython-310.pyc
│   │   │   ├── cros.cpython-310.pyc
│   │   │   ├── cros.cpython-37.pyc
│   │   │   ├── database.cpython-310.pyc
│   │   │   ├── database.cpython-37.pyc
│   │   │   ├── database_internal.cpython-310.pyc
│   │   │   ├── entitlement_service.cpython-37.pyc
│   │   │   ├── geojson.cpython-310.pyc
│   │   │   ├── get_cb_by_ta.cpython-310.pyc
│   │   │   ├── get_constit_by_ta.cpython-310.pyc
│   │   │   ├── get_constit.cpython-310.pyc
│   │   │   ├── get_constituencies_with_rc_by_ta.cpython-310.pyc
│   │   │   ├── get_constituencies_with_rc.cpython-310.pyc
│   │   │   ├── get_dc_by_org.cpython-310.pyc
│   │   │   ├── get_dc_by_ta.cpython-310.pyc
│   │   │   ├── get_entitlement_noRoll.cpython-310.pyc
│   │   │   ├── get_entitlement_noRoll.cpython-37.pyc
│   │   │   ├── get_entitlement_roll.cpython-310.pyc
│   │   │   ├── get_entitlement_roll.cpython-37.pyc
│   │   │   ├── get_entitlement_service.cpython-37.pyc
│   │   │   ├── get_lb_by_ta.cpython-310.pyc
│   │   │   ├── get_mayor_by_ta.cpython-310.pyc
│   │   │   ├── get_mconstit_by_ta.cpython-310.pyc
│   │   │   ├── get_mwards_by_ta.cpython-310.pyc
│   │   │   ├── get_organization.cpython-310.pyc
│   │   │   ├── get_rc_con_by_org.cpython-310.pyc
│   │   │   ├── get_rc_con.cpython-310.pyc
│   │   │   ├── get_regc_by_ta.cpython-310.pyc
│   │   │   ├── get_regc.cpython-310.pyc
│   │   │   ├── get_subdivision_by_ta.cpython-310.pyc
│   │   │   ├── get_ta_list.cpython-310.pyc
│   │   │   ├── get_wards_by_ta.cpython-310.pyc
│   │   │   ├── __init__.py
│   │   │   ├── maps_cache_loader.cpython-310.pyc
│   │   │   ├── parse_TA_id.cpython-310.pyc
│   │   │   ├── process_coordinates.cpython-310.pyc
│   │   │   ├── property_processing.cpython-310.pyc
│   │   │   ├── Ratepayer_calculator.cpython-310.pyc
│   │   │   ├── Ratepayer_calculator.cpython-37.pyc
│   │   │   ├── ta_details.cpython-310.pyc
│   │   │   └── user_database.cpython-310.pyc
│   │   ├── Ratepayer_calculator.py
│   │   ├── ta_details.py
│   │   └── test.py
│   ├── static
│   │   ├── assets
│   │   │   ├── digital_solution_artwork.webp
│   │   │   ├── ESLogoVert1.png
│   │   │   ├── ESLogoVert2.png
│   │   │   ├── ESLogoVert.png
│   │   │   ├── GreyscaleBackground.png
│   │   │   ├── Header_Green_number.png
│   │   │   ├── marker.svg
│   │   │   ├── tagline.png
│   │   │   ├── upsidedown.png
│   │   │   └── Vector_art.jpg
│   │   ├── scripts
│   │   │   ├── calculator.js
│   │   │   ├── color-palette.js
│   │   │   ├── entitlementBook.js
│   │   │   ├── maps-google.js
│   │   │   ├── maps-google-screenshot.js
│   │   │   ├── maps-Mini.js
│   │   │   └── meshblock.js
│   │   └── styles
│   │       ├── calculator.css
│   │       ├── entitlementBook.css
│   │       ├── ies.css
│   │       └── index.css
│   ├── templates
│   │   ├── add_poi.html
│   │   ├── admin_add_remove_users.html
│   │   ├── admin_base.html
│   │   ├── admin.html
│   │   ├── admin_login.html
│   │   ├── admin_preload_cache.html
│   │   ├── base.html
│   │   ├── current_data.html
│   │   ├── entitlementBook_edit.html
│   │   ├── entitlementBook.html
│   │   ├── entitlementCalculator.html
│   │   ├── error.html
│   │   ├── index.html
│   │   ├── login.html
│   │   ├── map-home.html
│   │   ├── map-screenshot.html
│   │   ├── maps-google-api.html
│   │   ├── maps-google.html
│   │   ├── maps.html
│   │   ├── meshblock_address.html
│   │   ├── poi_home.html
│   │   ├── search_roll.html
│   │   ├── selectCouncil_edit.html
│   │   ├── selectCouncil.html
│   │   ├── select_schema_combination.html
│   │   ├── select_schema.html
│   │   ├── select_table.html
│   │   ├── update_address_view.html
│   │   ├── update_data.html
│   │   ├── update.html
│   │   ├── upload_combination_table.html
│   │   ├── upload_roll.html
│   │   ├── view_combination_table.html
│   │   ├── view_data.html
│   │   └── view_pois.html
│   └── tests
│       ├── test_main.py
│       └── test_routes
│           └── test_entitlementsBook.py
├── config
│   ├── gis-dev
│   │   ├── create_database.sql
│   │   ├── docker-compose.yml
│   │   └── Readme.md
│   └── gis-prod
│       ├── create_database.sql
│       ├── docker-compose.yml
│       └── Readme.md
├── create_database.sql
├── Dockerfile
├── docker_script_dev.sh
├── docker_script_prod.sh
├── merge_dev_to_main.sh
├── README.md
├── requirements.txt
└── structure.txt

31 directories, 202 files



File: ./structure_and_content.txt
---------------------------------



File: ./generate_structure_and_content.sh
---------------------------------
#!/bin/bash

# Output file
output_file="structure_and_content.txt"

# Start with the directory structure
echo "Directory Structure:" > $output_file
tree >> $output_file
echo -e "\nFile Contents:\n" >> $output_file

# Iterate through all files and append their contents
find . -type f | while read -r file; do
  echo "File: $file" >> $output_file
  echo "---------------------------------" >> $output_file
  cat "$file" >> $output_file
  echo -e "\n\n" >> $output_file
done



File: ./app/depricatedEndpoint.txt
---------------------------------
@router.get("/EntitlementBook_edit", response_class=HTMLResponse, summary="HTML page to display divisions in selected Council/TA")
async def entitlement_book_edit(request: Request, selected_ta: str, database=Depends(dbconnserv.get_database), current_user: User = Depends(get_current_admin_user)):
    ta_id, ta_name = selected_ta.split("-", 1)
    
    # Variation due to Auckland (076) having differences from other councils
    if ta_id == "076":
        local_board = await get_local_boards(database, ta_id)
        community_board = local_board
        regional_council = []
    else:
        community_board = await get_community_boards(database, ta_id)
        regional_council = await associate_constituencies_with_regional_councils(database, ta_id)

    regional_constituency = await associate_constituencies_with_regional_councils(database, ta_id)
    community_subdivision = await get_community_subdivisions_by_ta(database, ta_id)
    wards = await get_wards_by_ta(database, ta_id)
    
    return templates.TemplateResponse("entitlementBook_edit.html", {
        "request": request,
        "ta_id": ta_id.lstrip("0"),
        "ta_name": ta_name,
        "wards": wards,
        "community_board": community_board,
        "community_subdivision": community_subdivision,
        "regional_council": regional_council,
        "regional_constituency": regional_constituency,
        "user_name": current_user.username.capitalize()
    })




@router.get("/SelectCouncil_edit", response_class=HTMLResponse, summary="HTML page to select Council/TA")
async def select_ta_edit(request: Request, database=Depends(dbconnserv.get_database), current_user: User = Depends(get_current_admin_user)):
    try:
        tas = await get_tas(database)
        
    except RuntimeError as e:
        print(e)
        return HTMLResponse(content="Error fetching TAs", status_code=500)
    return templates.TemplateResponse("selectCouncil_edit.html", {
        "request": request,
        "tas": tas,
        "user_name": current_user.username.capitalize()
    })
    





File: ./app/main.py
---------------------------------
# Standard Library Imports
import os
from datetime import timedelta
from contextlib import asynccontextmanager



# Third-Party Library Imports
from fastapi import FastAPI, Request, Depends, HTTPException, status, Form
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel
from sqlalchemy.orm import Session
from sqlalchemy.ext.asyncio import AsyncSession
import uvicorn
from starlette.middleware.sessions import SessionMiddleware

# Local Application Imports (app directory)
from services.auth import cros as cros
from services import database as dbconnserv
from config.dependencies import startup_redis, shutdown_redis, get_redis_client
from models.models import LoginRequest
from routes import (
    GeoSpatialDataUpdate,
    entitlementsBook,
    gisServices,
    maps,
    admin,
    nominations,
    addressDataUpdate,
    combinations,
    placesOfInterest
)
from services.auth.auth import (
    ACCESS_TOKEN_EXPIRE_MINUTES,
    authenticate_user,
    create_access_token,
    get_password_hash,
    get_current_active_user,
    get_db,
    get_current_user_from_cookie,
    get_current_admin_user,
)
from services.auth.user_database import (
    AsyncSessionLocal,
    create_db_and_tables,
    get_user,
    add_user,
    User,
)




app = FastAPI()

# FastAPI startup event to connect to the database
@app.on_event("startup")
async def startup():
    # Connect to the database
    if not dbconnserv.database.is_connected:
        await dbconnserv.database.connect()
    print("Database connection established.")

    # Initialize Redis
    await startup_redis()
    print("Redis connection established.")

@app.on_event("shutdown")
async def shutdown():
    # Disconnect from the database
    if dbconnserv.database.is_connected:
        await dbconnserv.database.disconnect()
    print("Database connection closed.")

    # Close Redis connection
    await shutdown_redis()
    print("Redis connection closed.")

# Get the absolute path to the "static" directory
static_dir = os.path.join(os.path.dirname(__file__), "static")

# Mount the static directory
app.mount("/static", StaticFiles(directory=static_dir), name="static")

app.include_router(entitlementsBook.router, tags=["Entitlements"])
app.include_router(gisServices.router, tags=["GisServices"])
app.include_router(maps.router, tags=["Maps"], prefix="/Map")
app.include_router(admin.router, tags=["Admin"])
app.include_router(nominations.router, tags=["Nominations"], prefix="/Nominations")
app.include_router(GeoSpatialDataUpdate.router, tags=["GeoSpatial Data"], prefix="/Geo", dependencies=[Depends(get_current_admin_user)])
app.include_router(addressDataUpdate.router, tags=["Address Data"], prefix="/Address", dependencies=[Depends(get_current_admin_user)])
app.include_router(combinations.router, tags=["Combinations"])
app.include_router(placesOfInterest.router, tags=["Places Of Interest"], prefix="/POI")



cros.setup_cors(app)


# Get the absolute path to the "templates" directory
templates_dir = os.path.join(os.path.dirname(__file__), "templates")

# Initialize Jinja2Templates with the absolute path to the "templates" directory
templates = Jinja2Templates(directory=templates_dir)


SECRET_KEY = os.getenv('SECRET_KEY')

app.add_middleware(SessionMiddleware, secret_key=SECRET_KEY)




class Token(BaseModel):
    access_token: str
    token_type: str

# Lifespan function
@asynccontextmanager
async def lifespan(app: FastAPI):
    await create_db_and_tables()
    async with AsyncSessionLocal() as db:
        admin_user = await get_user(db, "admin")
        if not admin_user:
            hashed_password = get_password_hash("admin")
            await add_user(db, "admin", "Admin User", "admin@example.com", hashed_password, role="admin")
    yield

app.router.lifespan_context = lifespan

# Login with token generation
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    user = await authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}


@app.get("/users/me")
async def read_users_me(current_user: dict = Depends(get_current_active_user)):
    return current_user


@app.get("/home", response_class=HTMLResponse)
async def index(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    try:
        parent_template = "admin_base.html" if current_user.username == "admin" else "base.html"
        return templates.TemplateResponse("index.html", {
            "request": request,
            "parent_template": parent_template,
            "user_name": current_user.username.capitalize()
        })
    except RuntimeError as e:
        print(f"Error occurred: {e}")
        return HTMLResponse(content="Error rendering home page", status_code=500)


@app.get("/login", response_class=HTMLResponse)
def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})


@app.post("/login")
async def login(request: Request, login_data: LoginRequest, db: AsyncSession = Depends(get_db)):
    user = await authenticate_user(db, login_data.username, login_data.password)
    if not user:
        return JSONResponse(status_code=400, content={"message": "Incorrect username or password"})
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    
    response = JSONResponse(status_code=200, content={"message": "Login successful"})
    response.set_cookie(key="access_token", value=f"{access_token}", httponly=True)
    return response


@app.get("/logout")
async def logout(request: Request):
    response = RedirectResponse(url="/login", status_code=status.HTTP_303_SEE_OTHER)
    response.delete_cookie(key="access_token")
    return response


@app.exception_handler(HTTPException)
async def custom_http_exception_handler(request: Request, exc: HTTPException):
    if exc.status_code == status.HTTP_401_UNAUTHORIZED:
        return RedirectResponse(url="/login")
    if exc.status_code == status.HTTP_403_FORBIDDEN:
        return RedirectResponse(url="/admin/login")
    return JSONResponse(
        status_code=exc.status_code,
        content={"message": exc.detail},
    )




File: ./app/tests/test_routes/test_entitlementsBook.py
---------------------------------
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_select_council():
    # Authenticate the client first
    response = client.post("/token", data={"username": "testuser", "password": "testpassword"})
    assert response.status_code == 200
    token = response.json()["access_token"]

    # Use the token to make an authenticated request
    response = client.get("/SelectCouncil", headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200
    assert "tas" in response.text  # Assuming "tas" is a part of the HTML content



File: ./app/tests/test_main.py
---------------------------------
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_read_main():
    # Authenticate the client first
    response = client.post("/token", data={"username": "testuser", "password": "testpassword"})
    assert response.status_code == 200, f"Authentication failed: {response.text}"
    token = response.json().get("access_token")
    assert token, f"Token not found in response: {response.json()}"

    # Print the token for debugging
    print(f"Token: {token}")
    
    # Use the token to make an authenticated request to the root endpoint
    response = client.get("/", headers={"Authorization": f"Bearer {token}"})
    assert response.status_code == 200, f"Request to '/' failed: {response.text}"
    
    # Debug print the response text to see the actual content
    print("Response Text:", response.text)
    
    # Check if the span with class "text" and user_name is in the HTML content
    assert '<span class="text">testuser</span>' in response.text





File: ./app/templates/index.html
---------------------------------
{% extends parent_template %}

{% block content %}
<div class="container mt-5" style="padding: 0;">
    <!-- Greeting Section -->
    <div class="card shadow-lg border-0 rounded-lg mb-4 p-4">
        <div class="card-body text-center">
            <h2 id="greeting" style="color: var(--ies-grey);"></h2>
            <p id="current-time" style="color: var(--ies-mint-dark); font-size: 1.25rem;"></p>
        </div>
    </div>

    <!-- Navigation Section -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <div class="card-body">
            <div class="row gy-3 justify-content-center">
                <div class="col-md-4">
                    <a href="/Map/" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-aqua); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                        <i class="fas fa-map icon" style="margin-right: 8px;"></i> GIS Maps
                    </a>
                </div>
                <div class="col-md-4">
                    <a href="/SelectCouncil" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-lime); color: var(--ies-grey); border: none; font-size: 1.25rem;">
                        <i class="bi bi-book" style="margin-right: 8px;"></i> Entitlement Book
                    </a>
                </div>
                <div class="col-md-4">
                    <a href="/POI" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                        <i class="fas fa-map-marker-alt icon" style="margin-right: 8px;"></i> Point with Marker
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card {
        border: 3px solid var(--ies-mint-light);
    }

    h2 {
        font-weight: 600;
    }
</style>
{% block scripts %}
<script>
    function updateTime() {
        var now = new Date();
        var options = { hour: '2-digit', minute: '2-digit', second: '2-digit' };
        var timeString = now.toLocaleTimeString('en-US', options);
        document.getElementById('current-time').textContent = timeString;
    }

    function updateGreeting() {
        var now = new Date();
        var hour = now.getHours();
        var greeting = 'Welcome to the ES Information System';

        if (hour < 12) {
            greeting = 'Good Morning';
        } else if (hour < 18) {
            greeting = 'Good Afternoon';
        } else {
            greeting = 'Good Evening';
        }

        document.getElementById('greeting').textContent = greeting;
    }

    // Update the time and greeting immediately and then every second
    document.addEventListener("DOMContentLoaded", function() {
        updateTime();
        updateGreeting();
        setInterval(updateTime, 1000);
    });
</script>
{% endblock %}
{% endblock %}


File: ./app/templates/view_data.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="card shadow-sm mb-4 p-3 mx-3">
    <h2>View Data from {{ table_name }}</h2>
    <form method="post" action="/Geo/update_table_data">
        <input type="hidden" name="year" value="{{ year }}">
        <input type="hidden" name="dataset_name" value="{{ table_name }}">

        <!-- Table with DataTables integration -->
        <table class="table table-striped" id="data-table">
            <thead>
                <tr>
                    {% for column in data[0].keys() %}
                    <th>{{ column }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
                {% for row in data %}
                <tr>
                    {% for column, value in row.items() %}
                    <td>
                        {% if column == "dw_flag" %}
                        <select name="row_{{ row.id }}_{{ column }}" class="form-control">
                            <option value="False" {% if value is not sameas true %}selected{% endif %}>False</option>
                            <option value="True" {% if value is sameas true %}selected{% endif %}>True</option>
                        </select>
                        {% elif column == "dw_vacancies" %}
                        <input type="text" name="row_{{ row.id }}_{{ column }}" value="{{ value }}" class="form-control">
                        {% elif column in ["es_num_code", "alpha_code", "vacancies", "issue_type"] %}
                        <input type="text" name="row_{{ row.id }}_{{ column }}" value="{{ value }}" class="form-control">
                        {% else %}
                        {{ value }}
                        {% endif %}
                    </td>
                    {% endfor %}
                    <input type="hidden" name="row_{{ row.id }}_id" value="{{ row.id }}">
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <input type="submit" value="Update" class="registration-button">
    </form>
</div>

<!-- Ensure correct order: jQuery first, then DataTables -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>

<script>
    $(document).ready(function() {
        // Check if jQuery is loaded
        if (typeof jQuery !== 'undefined') {
            console.log('jQuery is loaded correctly.');
        } else {
            console.error('jQuery failed to load.');
        }

        // Check if DataTables is available
        if (typeof $.fn.DataTable !== 'undefined') {
            console.log('DataTables is available.');

            // Initialize DataTables on the table with ID "data-table"
            $('#data-table').DataTable({
                "paging": true,        // Enable pagination
                "ordering": true,      // Enable column sorting
                "info": true,          // Display table information (X to Y of Z entries)
                "searching": true,     // Enable search bar
                "lengthMenu": [10, 25, 50, 100]  // Options for rows per page
            });

        } else {
            console.error('DataTables is not available. Check the script loading order.');
        }
    });
</script>
{% endblock %}



File: ./app/templates/maps-google.html
---------------------------------
{% extends parent_template %}

{% block title %}ES - Maps{% endblock %}

{% block styles %}
<link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
  
{% endblock %}



{% block content %}
<div class="content container-fluid" style="max-height: 80%;">
    <!-- Sidebar and Map Row -->
    <div class="row w-100 mx-0">
        <div class="map-container col-12 position-relative" style="max-height: 100%;">
            <div id="map" class="map">
                <!-- Map content here -->
            </div>
            <!-- Sidebar Container -->
            <div class="sidebar-container card p-2" style="position: absolute; top: 10px; left: 10px; z-index: 1000; width: 350px; background: rgba(255, 255, 255, 0.8); max-height: 80vh; overflow-y: auto;">
                <!-- Year Selector -->
                <div class="year-selector card p-1 mb-2" style="font-size: 0.9em; display: flex; flex-direction: row; align-items: center; gap: 0.5rem;">
                    <label for="yearSelect" class="mb-0 me-2">Select Year:</label>
                    <select id="yearSelect" class="form-control form-control-sm" onchange="updateYearSchema(this.value)" style="width: auto;">
                        <!-- Dynamically populate options here -->
                    </select>
                </div>   
                <!-- Sidebar Left -->
                <div class="sidebar-left">
                    <div class="dropdown">
                        <input type="text" id="search" class="form-control" placeholder="Search for address...">
                        <div id="suggestions" class="dropdown-menu" style="width: 100%;"></div>
                    </div>
                
                    <div class="d-flex justify-content-between align-items-center mb-3" style="margin-top: 5px;">
                        <button type="button"
                                class="btn p-0 border-0 bg-transparent"
                                data-toggle="collapse"
                                data-target="#checkboxSection"
                                aria-expanded="false"
                                aria-controls="checkboxSection"
                                style="font-size: 1.2rem; color: var(--ies-moss-dark);">
                            <i class="fas fa-chevron-down"></i>
                        </button>
                    
                        <input id="clear" 
                               type="button" 
                               value="Clear" 
                               class="btn btn-secondary btn-sm" 
                               style="height: 1.5rem; padding: 0 0.5rem;">
                    </div>
                    
                    
                    <!-- Collapsible Section -->
                    <div id="checkboxSection" class="collapse" style="margin-top: 5px;">
                        <div class="checkboxes d-flex flex-wrap align-items-start" style="font-size: 0.9em; gap: 1rem;">
                            <!-- Static Checkboxes -->
                            <div id="static-checkboxes" style="line-height: 1.2; font-size: 0.9em;">
                                <label><input id="cs_cb" type="checkbox" data-feature="Councils" onclick='handleCheckboxChange("Councils", this.checked, "Councils")'> Councils</label><br>
                                <label><input id="wrds_cb" type="checkbox" data-feature="Wards" onclick='handleCheckboxChange("Wards", this.checked, "Wards")'> Wards</label><br>
                                <label><input id="maori_wards_cb" type="checkbox" data-feature="Maori Wards" onclick='handleCheckboxChange("Maori Wards", this.checked, "Maori Wards")'> M&#257;ori Wards</label><br>
                                <label><input id="cb_cb" type="checkbox" data-feature="Community Board" onclick='handleCheckboxChange("Community Board", this.checked, "Community Board")'> Community Board</label><br>
                                <label><input id="subdiv_cb" type="checkbox" data-feature="Subdivisions" onclick='handleCheckboxChange("Subdivisions", this.checked, "Subdivisions")'> Subdivisions</label><br>
                                <label><input id="reg_council_cb" type="checkbox" data-feature="Regional Council" onclick='handleCheckboxChange("Regional Council", this.checked, "Regional Council")'> Regional Council</label><br>
                                <label><input id="gen_const_cb" type="checkbox" data-feature="General Constituency" onclick='handleCheckboxChange("General Constituency", this.checked, "General Constituency")'> General Constituency</label><br>
                                <label><input id="maori_const_cb" type="checkbox" data-feature="Maori Constituency" onclick='handleCheckboxChange("Maori Constituency", this.checked, "Maori Constituency")'> M&#257;ori Constituency</label><br>
                                <label><input id="LT_cb" type="checkbox" data-feature="LT" onclick='handleCheckboxChange("LT", this.checked, "LT")'> Licensing trust</label><br>
                            </div>
                            <!-- Dynamic Checkboxes -->
                            <div id="dynamic-checkboxes">
                                <!-- Dynamic checkboxes will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    
                </div>
                <!-- Sidebar Right -->
                <div class="sidebar-right" style="overflow-y: auto; flex-grow: 1;">
                    <div id="entitlements"></div>
                </div>
            </div>
        </div>
    </div>
</div>


    <!-- Modal HTML -->
    <div id="loadingModal" class="modal">
        <div class="modal-content">
            <div class="loader"></div>
            <p>Loading data, please wait...</p>
        </div>
    </div>
{% endblock %}




{% block scripts %}
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ol/dist/ol.js"></script>
    
    <script src="/static/scripts/maps-google.js"></script>
    <script>
     document.addEventListener("DOMContentLoaded", function() {
    // Fetch available years from the database using Axios
    axios.get('/POI/getAvailableYears')
        .then(response => {
            const yearSelect = document.getElementById('yearSelect');
            
            // Sort years in descending order and set the highest year as the default
            const years = response.data.sort((a, b) => b - a);
            
            years.forEach((year, index) => {
                const option = new Option(year, year);
                if (index === 0) {
                    option.selected = true;  // Set the highest year as the default selected option
                    updateYearSchema(year);  // Load categories for the default year
                }
                yearSelect.add(option);
            });
        })
        .catch(error => {
            console.error("Failed to load available years:", error);
            alert("Failed to load available years.");
        });
    });

    function updateYearSchema(selectedYear) {
    console.log("Selected Year:", selectedYear);

    // Fetch categories for the selected year
    axios.get(`/POI/getCategoriesByYear/${selectedYear}`)
        .then(response => {
            const categories = response.data.categories;
            console.log("Fetched categories:", categories); // Debugging log
            updateCheckboxList(categories);
        })
        .catch(error => {
            console.error("Failed to load categories:", error);
            alert("Failed to load categories for the selected year.");
        });
}


function updateCheckboxList(categories) {
    const dynamicCheckboxesContainer = document.getElementById('dynamic-checkboxes');

    // Clear existing checkboxes
    dynamicCheckboxesContainer.innerHTML = '';

    // Create a document fragment for better performance
    const fragment = document.createDocumentFragment();

    // Add new checkboxes
    categories.forEach(category => {
        const label = document.createElement('label');
        label.innerHTML = `<input type="checkbox" id="checkbox-${category}" data-feature="${category}"
                                onclick='handleCheckboxChange("POI", this.checked, "${category}")'> 
                                ${category}`;
        fragment.appendChild(label);
        fragment.appendChild(document.createElement('br'));
    });

    // Append fragment to container
    dynamicCheckboxesContainer.appendChild(fragment);
    console.log("Dynamic checkboxes updated:", categories); // Debugging log
}
</script>
    
    
    
{% endblock %}





File: ./app/templates/map-home.html
---------------------------------
{% extends parent_template %}

{% block content %}
<div class="container mt-5" style="padding: 0%;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
            <h2 class="mb-0" style="color: white;">Maps Portal</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body text-center">
            <p class="text-muted fs-5" style="color: black !important;">
                Select one of the map features below to explore and use the available tools.
            </p>

            <!-- Navigation Buttons -->
            <div class="row mt-4 gy-3 justify-content-center">
                <div class="col-md-6 col-lg-4">
                    <a href="/Map/Map-google" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-aqua); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                        <i class="bi bi-map" style="margin-right: 8px;"></i> Google Maps
                    </a>
                </div>
                <div class="col-md-6 col-lg-4">
                    <a href="/Map/Map-Screenshot" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-lime); color: var(--ies-grey); border: none; font-size: 1.25rem;">
                        <i class="bi bi-camera" style="margin-right: 8px;"></i> Map Screenshot Tool
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .text-muted {
        color: var(--ies-grey-light) !important;
    }
</style>
{% endblock %}



File: ./app/templates/entitlementBook.html
---------------------------------
{% extends parent_template %}

{% block title %}IESL GIS - Entitlement Book{% endblock %}

{% block styles %}
<link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .card-header {
        background-color: var(--ies-moss-dark);
        color: var(--ies-mint-light);
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .card {
        background-color: var(--ies-moss-light);
        border: 2px solid var(--ies-mint-light);
    }

    .table {
        background-color: white;
        border: 1px solid var(--ies-grey-light);
    }

    .table th {
        background-color: var(--ies-aqua);
        color: white;
        font-weight: bold;
    }

    .table td {
        color: var(--ies-grey);
    }

    .nested-table {
        width: 100%;
        table-layout: fixed;
        margin-top: 10px;
        border: 1px solid var(--ies-grey-light);
    }

    .nested-table td, .nested-table th {
        word-wrap: break-word;
        overflow-wrap: anywhere;
    }

    h2 {
        color: var(--ies-aqua);
        font-weight: bold;
        font-size: 1.75rem;
    }

    h3 {
        color: var(--ies-mint-dark);
        font-weight: bold;
        margin-top: 20px;
        margin-bottom: 10px;
    }

    .horizontal-divider-inner {
        border-bottom: 2px solid var(--ies-mint-light);
        margin: 20px 0;
    }

    .custom-card {
        padding: 20px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid mt-5">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center">
            <h2 class="mb-0">Divisions under {{ ta_name }} ({{ year }})</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <div class="main-data">
                {% if wards %}
                <h3>Wards</h3>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Code</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for ward in wards %}
                        <tr>
                            <td>{{ ward["id"] }}</td>
                            <td>{{ ward["name"] }}</td>
                            <td>{{ ward["alpha_code"] }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
                {% endif %}

                {% if community_board %}
                <div class="horizontal-divider-inner"></div>
                <h3>Community Boards</h3>
                <p>The following list contains community boards and their associated subdivisions.</p>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Code</th>
                            <th>Subdivisions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for cb in community_board %}
                        <tr>
                            <td>{{ cb["id"] }}</td>
                            <td>{{ cb["name"] }}</td>
                            <td>{{ cb["alpha_code"] }}</td>
                            <td>
                                {% if cb["subdivisions"] %}
                                <div class="table-responsive">
                                    <table class="nested-table table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>Name</th>
                                                <th>Code</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for sub in cb["subdivisions"] %}
                                            <tr>
                                                <td>{{ sub["id"] }}</td>
                                                <td>{{ sub["name"] }}</td>
                                                <td>{{ sub["alpha_code"] }}</td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
                {% endif %}

                {% if regional_council %}
                <div class="horizontal-divider-inner"></div>
                <h3>Regional Councils</h3>
                <p>The following list contains regional councils and their associated constituencies.</p>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Code</th>
                            <th>Constituencies</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for rc in regional_council %}
                        <tr>
                            <td>{{ rc["id"] }}</td>
                            <td>{{ rc["name"] }}</td>
                            <td>{{ rc["alpha_code"] }}</td>
                            <td>
                                {% if rc["constituencies"] %}
                                <div class="table-responsive">
                                    <table class="nested-table table table-striped table-bordered">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>Name</th>
                                                <th>Code</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for cons in rc["constituencies"] %}
                                            <tr>
                                                <td>{{ cons["id"] }}</td>
                                                <td>{{ cons["name"] }}</td>
                                                <td>{{ cons["alpha_code"] }}</td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/static/scripts/calculator.js"></script>
{% endblock %}



File: ./app/templates/admin_login.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <title>Admin Login</title>
    <style>
        .center-content {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f8f9fa;
        }
        .card-content {
            display: flex;
            padding: 0;
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            width: 900px; /* Adjust width as needed */
            max-width: 100%;
            overflow: hidden; /* Ensure no overflow */
        }
        .logo-section {
            background-color: #ffffff;
            padding: 40px 20px;
            width: 45%; /* Adjust width as needed */
        }
        .logo-section h1 {
            color: var(--ies-aqua);
        }
        .logo {
            width: 150px; /* Adjust logo size as needed */
            height: auto; /* Maintain aspect ratio */
            margin: 0px;
            padding: 0px;
        }
        .header-container h1 {
            font-size: 1.5rem; /* Adjust font size as needed */
            margin-top: 20px; /* Add space between logo and title */
            color: #fff; /* Ensure text is readable */
        }
        .form-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding: 40px;
            width: 55%; /* Adjust width as needed */
        }
        .body {
            padding: 0px !important;
        }
        .card-content .vertical-divider {
            border-left: 2px solid var(--ies-moss); /* Divider style */
            margin: 10px 10px 10px 10px; /* Adjust margins as needed */
        }
        h2 {
            color: var(--ies-moss);
        }
        /* Override Bootstrap primary button styles */
        .btn-primary {
            background-color: var(--ies-aqua);
            border-color: var(--ies-aqua);
        }
        .btn-primary:hover,
        .btn-primary:focus,
        .btn-primary:active,
        .btn-primary.active {
            background-color: var(--ies-aqua-hover) !important;
            border-color: var(--ies-aqua-hover) !important;
        }
        .error-message {
            color: red;
            margin-top: 10px;
            display: none; /* Hide by default */
        }
    </style>
</head>
<body>
    <div class="center-content">
        <div class="card-content">
            <div class="logo-section">
                <a href="/home">
                    <img src="/static/assets/ESLogoVert.png" alt="Logo" class="logo mb-3">
                </a>
                <h1>Election Information System</h1>
            </div>
            <div class="vertical-divider"></div>
            <div class="form-container">
                <h2 class="text-center" style="color: var(--ies-moss);">Admin Login</h2>
                <form id="admin-login-form" class="w-100">
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" id="username" name="username" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="password" name="password" class="form-control" required>
                    </div>
                    <button type="submit" class="btn btn-primary btn-block">Login</button>
                </form>
                <div id="error-message" class="error-message"></div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#admin-login-form').on('submit', function (event) {
                event.preventDefault(); // Prevent the form from submitting normally
    
                // Create a JSON object with the form data
                var formData = {
                    username: $('#username').val(),
                    password: $('#password').val()
                };
    
                $.ajax({
                    type: 'POST',
                    url: '/admin/login',
                    contentType: 'application/json',  // Set content type to JSON
                    data: JSON.stringify(formData),  // Convert form data to JSON
                    success: function (response) {
                        window.location.href = '/admin'; // Redirect on success
                    },
                    error: function (response) {
                        console.log(response); // Log the response for debugging
                        let errorMessage = 'An error occurred. Please try again.';
                        if (response.responseJSON && response.responseJSON.message) {
                            errorMessage = response.responseJSON.message;
                        } else if (response.responseText) {
                            try {
                                const jsonResponse = JSON.parse(response.responseText);
                                if (jsonResponse.message) {
                                    errorMessage = jsonResponse.message;
                                }
                            } catch (e) {
                                errorMessage = response.responseText;
                            }
                        }
                        $('#error-message').text(errorMessage).show(); // Display error message
                    }
                });
            });
        });
    </script>
    
</body>
</html>



File: ./app/templates/maps-google-api.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>IESL GIS</title>
        <link rel="stylesheet" type="text/css" href="static/styles/ies.css">
        <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/ol/dist/ol.js"></script>
        <script src="static/scripts/maps-google-api.js"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCsvhHz6xMhry_y9PPjdwL3hFg4wwfBD9Y"></script>
    </head>
    
<body>
    <div class="container">
        <header class="header">
             <a href="/home">
                <img src="static\assets\ESLogoVert.png" alt="Logo" class="logo">
            </a>
            <div class="header-container">
                <h1>Maps</h1>
                <img src="static\assets\Header_Green_number.png" alt="Additional Image" class="additional-image">
            </div>
        </header>
    </div>

    <div class="content">
        <div class="sidebars">
            <div class="sidebar-left">
                <input id="search" type="text" autocomplete="off" placeholder="Search Address" size="31">
                <input id="clear" type="button" value="Clear">
                
                <div class="checkboxes">
                    <label><input id="mb_cb" type="checkbox" onclick='handleCheckboxChange("Meshblock", this.checked)'>Meshblock</label>
                    <label><input id="cs_cb" type="checkbox" onclick='handleCheckboxChange("Councils", this.checked)' >Councils</label>
                    <label><input id="wrds_cb" type="checkbox" onclick='handleCheckboxChange("Wards", this.checked)'>Wards</label>
                    <label><input id="maori_wards_cb" type="checkbox" onclick='handleCheckboxChange("Maori Wards", this.checked)'>M&#257;ori Wards</label>
                    <label><input id="subdiv_cb" type="checkbox" onclick='handleCheckboxChange("Subdivisions", this.checked)'>Subdivisions</label>
                    <label><input id="reg_council_cb" type="checkbox" onclick='handleCheckboxChange("Regional Council", this.checked)'>Regional Council</label>
                    <label><input id="gen_const_cb" type="checkbox" onclick='handleCheckboxChange("General Constituency", this.checked)'>General Constituency</label>
                    <label><input id="maori_const_cb" type="checkbox" onclick='handleCheckboxChange("Maori Constituency", this.checked)'>M&#257;ori Constituency</label>
                    <label><input id="LT_cb" type="checkbox" onclick='handleCheckboxChange("LT", this.checked)'>Licensing Trust</label>

                </div>
                <div id="address"></div>
				<div id="data-date">
				Address data from LINZ as at 2024 (CC BY 4.0 NZ).
				<Br />
				All boundaries from StatsNZ as at 2024 (CC BY 4.0).
				<br />
				Base map data from the OpenStreetMap project(ODbL).
			</div>
        
            </div>
            <div class="sidebar-right">
                <div id="entitlements"></div>
            </div>
        </div>

        <div id="map" class="map">
            <!-- Map content here -->
        </div>  
    </div>
      <!-- Modal HTML -->
      <div id="loadingModal" class="modal">
        <div class="modal-content">
            <div class="loader"></div>
            <p>Loading data, please wait...</p>
        </div>
    </div>
           
</body>

</html>



File: ./app/templates/upload_combination_table.html
---------------------------------
{% extends "admin_base.html" %}

{% block title %}Upload Combination Table{% endblock %}

{% block content %}
<div class="container-fluid p-4">
    <div class="row justify-content-center">
        <!-- Upload Combination Table Card -->
        <div class="col-md-6">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
                    <h3 class="mb-0" style="color: white;">Upload Combination Table</h3>
                </div>
                <div class="card-body">
                    <form id="uploadCombinationForm" class="mt-3">
                        <div class="mb-3">
                            <label for="schema" class="form-label fw-bold">Schema Name <span class="text-danger">*</span></label>
                            <input type="text" id="schema" name="schema" class="form-control" placeholder="Enter Schema Name" required>
                        </div>
                        <div class="mb-3 p-2">
                            <label for="file" class="form-label fw-bold">Select Excel File <span class="text-danger">*</span></label>
                            <input type="file" id="file" name="file" class="form-control" accept=".xlsx" required>
                        </div>
                        <button type="submit" 
                                class="btn btn-custom btn-lg w-100"
                                style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                            <i class="bi bi-cloud-arrow-up" style="margin-right: 8px;"></i> Upload File
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Upload Progress and Result Card -->
        <div class="col-md-6">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
                    <h3 class="mb-0" style="color: white;">Upload Status</h3>
                </div>
                <div class="card-body">
                    <div id="result" class="alert alert-info" role="alert" style="display: none;">
                        <p id="result-message" class="mb-0"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Custom Styles -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .btn-custom:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .form-label {
        color: var(--ies-grey);
        font-weight: bold;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .alert {
        padding: 1rem;
    }

    .alert-info {
        background-color: var(--ies-mint-light);
        color: var(--ies-grey);
    }

    .alert-success {
        background-color: var(--ies-lime-light);
        color: var(--ies-grey);
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #842029;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    document.getElementById("uploadCombinationForm").addEventListener("submit", async function(event) {
        event.preventDefault();

        const formData = new FormData();
        const fileInput = document.getElementById('file');
        const schemaInput = document.getElementById('schema');

        if (!fileInput.files.length || !schemaInput.value) {
            alert("Please provide a file and schema name.");
            return;
        }

        formData.append('file', fileInput.files[0]);
        formData.append('schema', schemaInput.value);

        const resultDiv = document.getElementById("result");
        const resultMessage = document.getElementById("result-message");

        try {
            const response = await fetch("/upload_combination_table/", {
                method: "POST",
                body: formData
            });

            const data = await response.json();

            if (response.ok) {
                resultDiv.classList.remove("alert-danger", "alert-info");
                resultDiv.classList.add("alert-success");
                resultMessage.textContent = data.message || "File uploaded successfully!";
            } else {
                resultDiv.classList.remove("alert-success", "alert-info");
                resultDiv.classList.add("alert-danger");
                resultMessage.textContent = data.detail || "An error occurred during upload.";
            }
        } catch (error) {
            resultDiv.classList.remove("alert-success", "alert-info");
            resultDiv.classList.add("alert-danger");
            resultMessage.textContent = "Error uploading file: " + error.message;
        }

        resultDiv.style.display = "block";
    });
</script>
{% endblock %}



File: ./app/templates/select_table.html
---------------------------------
<!-- templates/select_table.html -->
{% extends "base.html" %}

{% block content %}
<div class="container">
    <h2>Select Schema and Table to View Data</h2>
    <form method="GET" action="/view_data">
        <div class="form-group">
            <label for="schema">Select Schema (Year):</label>
            <select name="schema_name" id="schema" class="form-control">
                {% for schema, tables in schemas.items() %}
                <option value="{{ schema }}">{{ schema }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="dataset">Select Dataset (Table):</label>
            <select name="dataset_name" id="dataset" class="form-control">
                {% for schema, tables in schemas.items() %}
                {% for table in tables %}
                <option value="{{ table }}">{{ table }}</option>
                {% endfor %}
                {% endfor %}
            </select>
        </div>
        <button type="submit" class="btn btn-primary mt-3">View Data</button>
    </form>
</div>
{% endblock %}



File: ./app/templates/select_schema.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container-fluid m-2">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
            <h2 class="mb-0" style="color: white;">Select Schema and Table</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="text-muted fs-5 text-center">
                Choose a schema and table to view the data.
            </p>

            <!-- Form Section -->
            <form action="/Geo/view_data" class="mt-4">
                <div class="row gy-3 justify-content-center">
                    <!-- Schema Selection -->
                    <div class="col-md-6">
                        <label for="schemaSelect" class="form-label">Schema:</label>
                        <select id="schemaSelect" name="schema_name" class="form-control" onchange="fetchTables()">
                            <option value="">--Select Schema--</option>
                            {% for schema in schemas %}
                            <option value="{{ schema }}">{{ schema }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <!-- Table Selection -->
                    <div class="col-md-6">
                        <label for="tableSelect" class="form-label">Table:</label>
                        <select id="tableSelect" name="dataset_name" class="form-control">
                            <option value="">--Select Table--</option>
                            <!-- Options will be dynamically populated -->
                        </select>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="row mt-4 justify-content-center">
                    <div class="col-md-6">
                        <button type="submit" class="btn btn-custom w-100"
                                style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                            <i class="bi bi-eye" style="margin-right: 8px;"></i> View Data
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Custom Styles -->
<style>
    .btn-custom:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .form-control {
        padding: .375rem .75rem;
        height: auto;
    }

    h2 {
        font-size: 1.75rem;
        font-weight: bold;
    }
</style>

<script>
    async function fetchTables() {
        const schemaSelect = document.getElementById("schemaSelect");
        const schema = schemaSelect.value;
        const tableSelect = document.getElementById("tableSelect");

        // Clear current options
        tableSelect.innerHTML = '<option value="">--Loading Tables--</option>';

        if (schema) {
            try {
                const response = await fetch(`/Geo/get_tables/${schema}`);
                const data = await response.json();

                // Populate table options
                tableSelect.innerHTML = '<option value="">--Select Table--</option>';
                data.tables.forEach(function (table) {
                    const option = document.createElement("option");
                    option.value = table;
                    option.textContent = table;
                    tableSelect.appendChild(option);
                });
            } catch (error) {
                console.error("Error fetching tables:", error);
                tableSelect.innerHTML = '<option value="">--Error Loading Tables--</option>';
            }
        } else {
            tableSelect.innerHTML = '<option value="">--Select Schema First--</option>';
        }
    }
</script>
{% endblock %}



File: ./app/templates/current_data.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container-fluid mt-2">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); ">
            <h2 class="mb-0" style="color: white;">Current Data</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="fs-5 text-center text-muted">
                Below are the current data versions grouped by year. Review and update them as necessary.
            </p>

            {% set grouped_data = current_data|groupby('year') %}
            {% for year, data_in_year in grouped_data %}
            <!-- Year Section -->
            <div class="mt-5">
                <h4 class="text-secondary mb-3" style="border-left: 4px solid var(--ies-aqua); padding-left: 10px;">
                    Year: {{ year }}
                </h4>

                <!-- Table Section -->
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>Dataset Name</th>
                                <th>Schema</th>
                                <th>Last Updated</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for data in data_in_year %}
                            <tr>
                                <td>{{ loop.index }}</td>
                                <td>{{ data.dataset_name }}</td>
                                <td>{{ data.schema_name }}</td>
                                <td>{{ data.updated_at.strftime('%d/%m/%Y %H:%M') }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<!-- Custom Styles -->
<style>
    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    h4 {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .table {
        font-size: 1rem;
    }

    .table-hover tbody tr:hover {
        background-color: var(--ies-mint-light) !important;
    }
</style>
{% endblock %}



File: ./app/templates/search_roll.html
---------------------------------
{% extends "admin_base.html" %}

{% block title %}Search Roll Data{% endblock %}

{% block content %}
<div class="container-fluid mt-5">
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h1 class="card-title">Search Roll Data</h1>
            <form id="searchForm" class="form-inline">
                <div class="form-group mb-2">
                    <label for="searchType" class="mr-2">Search By:</label>
                    <select id="searchType" name="searchType" class="form-control mr-2">
                        <option value="barcode">Voting Document ID</option>
                        <option value="name">Name</option>
                        <option value="address">Qualifying Address</option>
                    </select>
                </div>
                <div class="form-group mb-2 flex-grow-1">
                    <label for="searchInput" class="sr-only">Enter Search Term:</label>
                    <input type="text" id="searchInput" name="searchInput" class="form-control mr-2 w-100" placeholder="Enter search term">
                </div>
                <button type="submit" class="btn btn-primary mb-2">Search</button>
            </form>
        </div>
    </div>
    
    <div id="results" class="mt-4">
        <!-- Results will be displayed here -->
    </div>
</div>

<script>
    async function postData(url = '', data = {}) {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        return response.json();
    }

    function createTable(data) {
        const table = document.createElement('table');
        table.className = 'table table-striped table-bordered';

        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');
        const headers = Object.keys(data[0]);
        headers.forEach(header => {
            const th = document.createElement('th');
            th.textContent = header.replace(/_/g, ' ');
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        const tbody = document.createElement('tbody');
        data.forEach(item => {
            const row = document.createElement('tr');
            headers.forEach(header => {
                const td = document.createElement('td');
                td.textContent = item[header];
                row.appendChild(td);
            });
            tbody.appendChild(row);
        });
        table.appendChild(tbody);

        return table;
    }

    document.getElementById('searchForm').addEventListener('submit', async function(event) {
        event.preventDefault();
        const searchType = document.getElementById('searchType').value;
        const searchInput = document.getElementById('searchInput').value;
        let url;
        let data;

        if (searchType === 'barcode') {
            url = '/rollBook/by_barcode';
            data = { Voting_Document_ID: searchInput };
        } else if (searchType === 'name') {
            url = '/rollBook/by_name';
            data = { name: searchInput };
        } else if (searchType === 'address') {
            url = '/rollBook/by_qualifyingAddress';
            data = { Qualifying_Address: searchInput };
        }

        const resultData = await postData(url, data);
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = '';
        if (resultData.length > 0) {
            const tableWrapper = document.createElement('div');
            tableWrapper.className = 'table-responsive';
            tableWrapper.appendChild(createTable(resultData));
            resultsDiv.appendChild(tableWrapper);
        } else {
            resultsDiv.textContent = 'No results found';
        }
    });
</script>
{% endblock %}



File: ./app/templates/update.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container-fluid mt-2">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
            <h2 class="mb-0" style="color: white;">Update Data</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="fs-5 text-muted text-center">
                Below is the available data grouped by year. Select a dataset to update.
            </p>

            <!-- Yearly Data Section -->
            {% for year in sorted_years %}
            <div class="mt-5">
                <h4 class="text-secondary mb-3" style="border-left: 4px solid var(--ies-aqua); padding-left: 10px;">
                    Available Data for {{ year }}
                </h4>
                {% if layers_by_year[year]|length == 0 %}
                <p class="fs-5 text-muted" style="font-style: italic;">{{ year }} data is not updated yet on Stats.govt.nz</p>
                {% else %}
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>Category</th>
                                <th>Title</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for layer in layers_by_year[year] %}
                            <tr>
                                <td>{{ loop.index }}</td>
                                <td>{{ layer.category }}</td>
                                <td>{{ layer.title }}</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm w-100" onclick="triggerUpdate('{{ layer.category }}', '{{ layer.name }}', '{{ year }}')">
                                        Add to {{ year }}
                                    </button>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                {% endif %}
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<!-- Modal -->
<div id="updateModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                <h5 class="modal-title" id="updateModalLabel">Updating Data</h5>
            </div>
            <div class="modal-body text-center">
                <!-- Loading Bar -->
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%;"></div>
                </div>
                <p class="mt-3 text-muted">Please wait while the data is being updated...</p>
            </div>
        </div>
    </div>
</div>

<!-- Custom Styles -->
<style>
    .btn-primary {
        background-color: var(--ies-aqua);
        border-color: var(--ies-aqua);
    }

    .btn-primary:hover {
        background-color: var(--ies-aqua-hover);
        border-color: var(--ies-aqua-hover);
    }

    .table-hover tbody tr:hover {
        background-color: var(--ies-mint-light) !important;
    }

    .modal-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    h4 {
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

{% endblock %}

{% block scripts %}
{{ super() }}
<script>
    function triggerUpdate(dataset_name, layer_id, year) {
        // Show the modal
        $('#updateModal').modal({
            backdrop: 'static',
            keyboard: false
        });
        $('#updateModal').modal('show');

        // Dynamically create a form and submit it
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Geo/update_data';

        const datasetInput = document.createElement('input');
        datasetInput.type = 'hidden';
        datasetInput.name = 'dataset_name';
        datasetInput.value = dataset_name;
        form.appendChild(datasetInput);

        const layerInput = document.createElement('input');
        layerInput.type = 'hidden';
        layerInput.name = 'layer_id';
        layerInput.value = layer_id;
        form.appendChild(layerInput);

        const yearInput = document.createElement('input');
        yearInput.type = 'hidden';
        yearInput.name = 'year';
        yearInput.value = year;
        form.appendChild(yearInput);

        document.body.appendChild(form);
        form.submit();
    }
</script>
{% endblock %}



File: ./app/templates/select_schema_combination.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container mt-5" style="padding: 0;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark);">
            <h2 class="mb-0" style="color: var(--ies-mint-light);">Select Schema</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body text-center">
            <p class="text-muted fs-5" style="color: black !important;">
                Choose a schema to view and manage your data.
            </p>

            <!-- Schema Selection Section -->
            <div class="row py-4 justify-content-center">
                <div class="col-md-6 col-lg-4">
                    <form id="schemaForm" class="text-center">
                        <div class="form-group mb-4">
                            <label for="schema" class="form-label fw-bold" style="color: var(--ies-grey);">Select Schema <span class="text-danger">*</span></label>
                            <select id="schema" name="schema" class="form-select" required>
                                <option value="">--Select Schema--</option>
                                {% for schema in schemas %}
                                    <option value="{{ schema }}">{{ schema }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <button type="submit" 
                                class="btn w-100 py-3 shadow" 
                                style="background-color: var(--ies-aqua); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                            <i class="bi bi-search" style="margin-right: 8px;"></i> View Data
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .text-muted {
        color: var(--ies-grey-light) !important;
    }

    .form-label {
        font-size: 1.1rem;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    document.getElementById("schemaForm").addEventListener("submit", function(event) {
        event.preventDefault();
        const schema = document.getElementById("schema").value;
        if (schema) {
            window.location.href = `/view_combination_data/${schema}`;
        } else {
            alert("Please select a schema.");
        }
    });
</script>
{% endblock %}



File: ./app/templates/admin.html
---------------------------------
{% extends "admin_base.html" %}


{% block content %}
<div class="container mt-5" style="padding: 0;">
    <!-- Greeting Section -->
    <div class="card shadow-lg border-0 rounded-lg mb-4 p-4">
        <div class="card-body text-center">
            <h2 id="greeting" style="color: var(--ies-grey);"></h2>
            <p id="current-time" style="color: var(--ies-mint-dark); font-size: 1.25rem;"></p>
        </div>
    </div>

    <!-- Navigation Section -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <div class="card-body">
            <div class="row gy-3 justify-content-center">
                <div class="col-md-4">
                    <a href="/Map/" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-aqua); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                        <i class="fas fa-map icon" style="margin-right: 8px;"></i> GIS Maps
                    </a>
                </div>
                <div class="col-md-4">
                    <a href="/SelectCouncil" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-lime); color: var(--ies-grey); border: none; font-size: 1.25rem;">
                        <i class="bi bi-book" style="margin-right: 8px;"></i> Entitlement Book
                    </a>
                </div>
                <div class="col-md-4">
                    <a href="/POI" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                        <i class="fas fa-map-marker-alt icon" style="margin-right: 8px;"></i> Point with Marker
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card {
        border: 3px solid var(--ies-mint-light);
    }

    h2 {
        font-weight: 600;
    }
</style>
{% block scripts %}
<script>
    function updateTime() {
        var now = new Date();
        var options = { hour: '2-digit', minute: '2-digit', second: '2-digit' };
        var timeString = now.toLocaleTimeString('en-US', options);
        document.getElementById('current-time').textContent = timeString;
    }

    function updateGreeting() {
        var now = new Date();
        var hour = now.getHours();
        var greeting = 'Welcome to the ES Information System';

        if (hour < 12) {
            greeting = 'Good Morning';
        } else if (hour < 18) {
            greeting = 'Good Afternoon';
        } else {
            greeting = 'Good Evening';
        }

        document.getElementById('greeting').textContent = greeting;
    }

    // Update the time and greeting immediately and then every second
    document.addEventListener("DOMContentLoaded", function() {
        updateTime();
        updateGreeting();
        setInterval(updateTime, 1000);
    });
</script>
{% endblock %}
{% endblock %}



File: ./app/templates/meshblock_address.html
---------------------------------
{% extends "admin_base.html" %}

{% block title %}Mesh Block Address Lookup{% endblock %}

{% block styles %}
<link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
<style>
    .custom-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }
    .custom-table th, .custom-table td {
        padding: 10px;
        text-align: left;
    }
    .custom-table th {
        background-color: var(--ies-moss);
    }
    .custom-table tr:nth-child(odd) {
        background-color: #ffffff;
    }
    .custom-table tr:nth-child(even) {
        background-color: var(--ies-mint-light);
    }
</style>
{% endblock %}

{% block content %}
<div class="card shadow-sm mb-4 p-3 mx-3">
    <form id="meshblockForm" style="padding: 10px;">
        <div class="form-group">
            <label for="meshblocks">Enter Mesh Block IDs (comma-separated):</label>
            <input class="form-control" type="text" id="meshblocks" name="meshblocks">
        </div>
        <button class="btn btn-primary" type="submit">Get Addresses</button>
        <button class="btn btn-secondary" type="button" onclick="exportTableToCSV('addresses.csv')">Export to CSV</button>
    </form>

    <div class="table-responsive mt-4">
        <p>Total Addresses Retrieved: <span id="addressCount" style="font-weight: bold;">0</span></p> <!-- New element for count -->
        <table id="resultTable" class="table custom-table">
            <thead>
                <tr>
                    <th>Address ID</th>
                    <th>Meshblock</th>
                    <th>Full Address</th>
                    <th>Council</th>
                    <th>General Ward</th>
                    <th>Maori Ward</th>
                    <th>Local Board</th>
                    <th>Community Board</th>
                    <th>Subdivision</th>
                </tr>
            </thead>
            <tbody id="resultBody">
                <!-- Rows will be added here dynamically -->
            </tbody>
        </table>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="/static/scripts/meshblock.js"></script>
{% endblock %}



File: ./app/templates/admin_preload_cache.html
---------------------------------
{% extends "admin_base.html" %}

{% block title %}Preload Cache{% endblock %}

{% block content %}
<div class="container mt-4 pb-4">
    <h2 class="text-center">Preload Cache</h2>
    <div class="row mt-5">
        <div class="col-md-12">
            <button id="preloadCacheBtn" class="btn btn-warning btn-block">Preload Cache</button>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.getElementById("preloadCacheBtn").addEventListener("click", function() {
        fetch('/preload-cache')
            .then(response => response.json())
            .then(data => {
                if (data.results) {
                    alert("Cache preloaded successfully!");
                } else {
                    alert("Failed to preload cache.");
                }
            })
            .catch(error => {
                console.error("Error preloading cache:", error);
                alert("Error preloading cache.");
            });
    });
</script>
{% endblock %}



File: ./app/templates/update_address_view.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container mt-5 p-5 shadow-none">
  <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
            <h2 class="mb-0" style="color: white;">Update LINZ Address Data</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body text-center">
            <p class="fs-5 text-muted">Keep your LINZ address database up to date to ensure data accuracy and reliability.</p>

            <!-- Statistics Section -->
            <div class="row gy-3 justify-content-center mt-4">
                <div class="col-md-6">
                    <div class="card bg-light shadow-sm border-0">
                        <div class="card-body text-center">
                            <h4 class="text-secondary">Total Addresses</h4>
                            <h2 class="text-dark fw-bold">{{ total_addresses }}</h2>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Update Button -->
            <div class="mt-4">
                <form action="/Address/update_linz_address_data" method="post">
                    <button type="submit" 
                            class="btn w-100 py-3 shadow"
                            style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                        <i class="bi bi-arrow-repeat" style="margin-right: 8px;"></i> Update Address Data
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add CSS for consistency -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .btn-custom:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    h2 {
        font-size: 1.75rem;
        font-weight: bold;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .card {
        margin-bottom: 20px;
    }
</style>
{% endblock %}



File: ./app/templates/admin_add_remove_users.html
---------------------------------
{% extends "admin_base.html" %}

{% block title %}Manage Users{% endblock %}

{% block content %}
<div class="container mt-2" style="padding: 20px; max-width: 100%;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark);">
            <h2 class="mb-0" style="color: var(--ies-mint-light);">Add/Remove Users</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="text-muted fs-5 text-center" style="color: black !important;">
                Manage users for the system. Add new users, remove existing users, or view all user details.
            </p>
            <!-- User Table -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="card shadow-lg border-0 rounded-lg">
                        <div class="card-header text-center" style="background-color: var(--ies-moss-dark);">
                            <h4 class="mb-0" style="color: var(--ies-mint-light);">All Users</h4>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table id="userTable" class="table table-striped table-bordered">
                                    <thead class="text-center" style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                                        <tr>
                                            <th>Username</th>
                                            <th>Full Name</th>
                                            <th>Email</th>
                                            <th>Role</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for user in users %}
                                        <tr>
                                            <td>{{ user.username }}</td>
                                            <td>{{ user.full_name }}</td>
                                            <td>{{ user.email }}</td>
                                            <td>{{ user.role }}</td>
                                        </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-4">
                <!-- Add User Card -->
                <div class="col-md-6">
                    <div class="card shadow-sm mb-4">
                        <div class="card-header text-center" style="background-color: var(--ies-aqua);">
                            <h4 class="mb-0" style="color: var(--ies-mint-light);">Add User</h4>
                        </div>
                        <div class="card-body">
                            <form id="addUserForm">
                                <div class="form-group">
                                    <label for="username" class="form-label fw-bold">Username:</label>
                                    <input type="text" id="username" name="username" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="full_name" class="form-label fw-bold">Full Name:</label>
                                    <input type="text" id="full_name" name="full_name" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="email" class="form-label fw-bold">Email:</label>
                                    <input type="email" id="email" name="email" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="password" class="form-label fw-bold">Password:</label>
                                    <input type="password" id="password" name="password" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="role" class="form-label fw-bold">Role:</label>
                                    <select id="role" name="role" class="form-select">
                                        <option value="user">User</option>
                                        <option value="admin">Admin</option>
                                    </select>
                                </div>
                                <button type="submit" class="btn btn-success w-100 mt-3">Add User</button>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Delete User Card -->
                <div class="col-md-6">
                    <div class="card shadow-sm mb-4">
                        <div class="card-header text-center" style="background-color: var(--ies-lime);">
                            <h4 class="mb-0" style="color: var(--ies-grey);">Delete User</h4>
                        </div>
                        <div class="card-body">
                            <form id="deleteUserForm">
                                <div class="form-group">
                                    <label for="del_username" class="form-label fw-bold">Username:</label>
                                    <input type="text" id="del_username" name="username" class="form-control" required>
                                </div>
                                <button type="submit" class="btn btn-danger w-100 mt-3">Delete User</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            
        </div>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .text-muted {
        color: var(--ies-grey-light) !important;
    }

    thead th {
        font-size: 1rem;
        font-weight: bold;
    }

    tbody td {
        font-size: 0.95rem;
    }
</style>
{% endblock %}

{% block scripts %}
<script>
    // Function to handle form submission as JSON
    async function submitFormAsJson(event, formId, url, method) {
        event.preventDefault();

        const form = document.getElementById(formId);
        const formData = new FormData(form);
        const jsonData = {};

        // Convert FormData to JSON
        formData.forEach((value, key) => {
            jsonData[key] = value;
        });

        try {
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const errorData = await response.json();
                alert("Error: " + errorData.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while processing the request.');
        }
    }

    // Add event listener for Add User form
    document.getElementById('addUserForm').addEventListener('submit', function(event) {
        submitFormAsJson(event, 'addUserForm', '/admin/add_user', 'POST');
    });

    // Add event listener for Delete User form
    document.getElementById('deleteUserForm').addEventListener('submit', function(event) {
        submitFormAsJson(event, 'deleteUserForm', '/admin/delete_user', 'POST');
    });
</script>
{% endblock %}



File: ./app/templates/view_pois.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container-fluid mt-3">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4 mb-5">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
            <h2 class="mb-0" style="color: white;">Points of Interest (POI)</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="text-muted fs-5 text-center">
                Select a year, category, and council to view Points of Interest.
            </p>

            <!-- Filter Section -->
            <form id="filterForm" class="row gy-3 justify-content-center mt-4">
                <!-- Year Selection -->
                <div class="col-md-4">
                    <label for="yearSelect" class="form-label fw-bold">Select Year:</label>
                    <select id="yearSelect" class="form-select">
                        {% for year in years %}
                        <option value="{{ year }}">{{ year }}</option>
                        {% endfor %}
                    </select>
                </div>

                <!-- Category Selection -->
                <div class="col-md-4">
                    <label for="categorySelect" class="form-label fw-bold">Select Category:</label>
                    <select id="categorySelect" class="form-select">
                        {% for category in categories %}
                        <option value="{{ category }}">{{ category }}</option>
                        {% endfor %}
                    </select>
                </div>

                <!-- Council Selection -->
                <div class="col-md-4">
                    <label for="councilSelect" class="form-label fw-bold">Select Council:</label>
                    <select id="councilSelect" class="form-select">
                        <option value="">Select Year First</option>
                    </select>
                </div>

                <!-- Filter Button -->
                <div class="col-md-12 d-grid text-end">
                    <button type="button" class="btn btn-custom"
                            style="background-color: var(--ies-aqua); color: var(--ies-mint-light); max-width: 150px;"
                            onclick="filterPOIs()">
                        <i class="bi bi-funnel" style="margin-right: 8px;"></i> View
                    </button>
                </div>
                
            </form>
        </div>
    </div>

    <!-- Data Table Section -->
    <div id="poisTableWrapper" class="card shadow-lg border-0 rounded-lg p-4 mt-4 d-none">
        <div class="card-body">
            <div class="table-responsive">
                <table id="poisDataTable" class="table table-striped table-bordered w-100">
                    <thead class="table-dark">
                        <tr>
                            <th>Council</th>
                            <th>Local Board</th>
                            <th>Name</th>
                            <th>Icon</th>
                            <th>Category</th>
                            <th>Address</th>
                            <th>Coordinates</th>
                        </tr>
                    </thead>
                    <tbody id="poisTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Include DataTables -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<!-- Custom Styles -->
<style>
    .btn-custom:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .table-dark th {
        background-color: var(--ies-moss-dark);
        color: var(--ies-mint-light);
    }

    .form-control {
        padding: .375rem .75rem;
        height: auto;
    }

    h2 {
        font-size: 1.75rem;
        font-weight: bold;
    }

    h3 {
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

<script>
    $(document).ready(function () {
        let dataTable;

        // Fetch councils dynamically when the year changes
        document.getElementById("yearSelect").addEventListener("change", async function () {
            const year = this.value;
            const councilSelect = document.getElementById("councilSelect");

            // Clear existing options
            councilSelect.innerHTML = '<option value="">Loading...</option>';

            if (!year) {
                councilSelect.innerHTML = '<option value="">Select Year First</option>';
                return;
            }

            try {
                const response = await fetch(`/POI/get_councils?year=${year}`);
                const data = await response.json();

                // Populate council dropdown
                councilSelect.innerHTML = data.councils.length
                    ? data.councils.map(council => `<option value="${council}">${council}</option>`).join("")
                    : '<option value="">No Councils Available</option>';
            } catch (error) {
                console.error("Error fetching councils:", error);
                councilSelect.innerHTML = '<option value="">Error Loading Councils</option>';
            }
        });

        // Filter POIs and display in DataTable
        async function filterPOIs() {
            const year = document.getElementById("yearSelect").value;
            const category = document.getElementById("categorySelect").value;
            const council = document.getElementById("councilSelect").value;
            const url = `/POI/get_pois?year=${year}&category=${category}&council=${council}`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                // Initialize DataTable if not already initialized
                if (!dataTable) {
                    dataTable = $('#poisDataTable').DataTable({
                        data: [],
                        columns: [
                            { title: "Council" },
                            { title: "Local Board" },
                            { title: "Name" },
                            { title: "Icon" },
                            { title: "Category" },
                            { title: "Address" },
                            { title: "Coordinates" },
                        ],
                        autoWidth: false,
                    });
                }

                // Clear and update DataTable
                dataTable.clear();

                if (data.pois.length === 0) {
                    alert("No data available for the selected filters.");
                    $('#poisTableWrapper').addClass('d-none');
                    return;
                }

                data.pois.forEach(poi => {
                    const markerIcon = poi.color
                        ? `<img src="${createMarkerCanvas(poi.color.toLowerCase())}" alt="${poi.color}" style="width: 20px; height: 30px;">`
                        : "-";

                    dataTable.row.add([
                        poi.council || "-",
                        poi.local_board || "-",
                        poi.name || "-",
                        markerIcon,
                        poi.category || "-",
                        poi.address || "-",
                        `${poi.coordinates.easting}, ${poi.coordinates.northing}`,
                    ]);
                });

                dataTable.draw();
                $('#poisTableWrapper').removeClass('d-none');
            } catch (error) {
                console.error("Error fetching POIs:", error);
                alert("An error occurred while fetching data.");
            }
        }

        window.filterPOIs = filterPOIs;

        function createMarkerCanvas(color) {
            const canvas = document.createElement('canvas');
            canvas.width = 32;
            canvas.height = 48;

            const ctx = canvas.getContext('2d');
            ctx.beginPath();
            ctx.moveTo(16, 44);
            ctx.bezierCurveTo(4, 28, 4, 8, 16, 8);
            ctx.bezierCurveTo(28, 8, 28, 28, 16, 44);
            ctx.closePath();
            ctx.fillStyle = color;
            ctx.fill();
            ctx.lineWidth = 2;
            ctx.strokeStyle = '#ffffff';
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(16, 16, 6, 0, 2 * Math.PI, false);
            ctx.fillStyle = '#ffffff';
            ctx.fill();

            return canvas.toDataURL();
        }
    });
</script>
{% endblock %}



File: ./app/templates/poi_home.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container mt-5" style="padding: 0;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark);">
            <h2 class="mb-0" style="color: var(--ies-mint-light);">Points of Interest (POI)</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body text-center">
            <p class="text-muted fs-5" style="color: black !important;">
                Manage your Points of Interest data seamlessly.
            </p>

            <!-- Statistics Section -->
            <div class="row py-4 justify-content-center">
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-lg border-0 rounded-lg" style="background-color: var(--ies-moss-light);">
                        <div class="card-body text-center">
                            <h4 class="text-secondary">Total POIs</h4>
                            <h2 class="text-dark fw-bold">{{ total_pois }}</h2>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Navigation Buttons -->
            <div class="row mt-4 gy-3 justify-content-center">
                <div class="col-md-6 col-lg-4">
                    <a href="/POI/view" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-aqua); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                        <i class="bi bi-table" style="margin-right: 8px;"></i> View POIs
                    </a>
                </div>
                <div class="col-md-6 col-lg-4">
                    <a href="/POI/add" 
                       class="btn w-100 py-3 shadow" 
                       style="background-color: var(--ies-lime); color: var(--ies-grey); border: none; font-size: 1.25rem;">
                        <i class="bi bi-plus-circle" style="margin-right: 8px;"></i> Add POI
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .text-muted {
        color: var(--ies-grey-light) !important;
    }
</style>
{% endblock %}



File: ./app/templates/view_combination_table.html
---------------------------------
{% extends "admin_base.html" %}

{% block title %}View Combination Table Data{% endblock %}

{% block content %}
<div class="container mt-2" style="padding: 20px; max-width: 100%;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark);">
            <h2 class="mb-0" style="color: var(--ies-mint-light);">Combination Table Data</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="text-muted fs-5 text-center" style="color: black !important;">
                View and manage data from the combination table below.
            </p>

            <!-- Data Table Section -->
            <div class="table-responsive mt-4">
                <table id="combinationTable" class="table table-striped table-bordered">
                    <thead class="text-center" style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                        <tr>
                            <th>Name</th>
                            <th>Form Name</th>
                            <th>Election Name</th>
                            <th>Barcode</th>
                            <th>Local Authority ID</th>
                            <th>Ward ID</th>
                            <th>Community Board ID</th>
                            <th>Subdivision ID</th>
                            <th>Regional Council ID</th>
                            <th>Regional Constituency ID</th>
                            <th>Licensing Trust ID</th>
                            <th>District Health Board ID</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in data %}
                        <tr>
                            <td>{{ row.name }}</td>
                            <td>{{ row.form_name }}</td>
                            <td>{{ row.election_name }}</td>
                            <td>{{ row.barcode }}</td>
                            <td>{{ row.local_authority_id }}</td>
                            <td>{{ row.ward_id }}</td>
                            <td>{{ row.community_board_id }}</td>
                            <td>{{ row.subdivision_id }}</td>
                            <td>{{ row.regional_council_id }}</td>
                            <td>{{ row.regional_constituency_id }}</td>
                            <td>{{ row.licensing_trust_id }}</td>
                            <td>{{ row.district_health_board_id }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS -->
<style>
    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .btn:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    thead th {
        font-size: 1rem;
        font-weight: bold;
    }

    tbody td {
        font-size: 0.95rem;
    }
</style>
{% endblock %}

{% block scripts %}
<!-- Include jQuery and DataTables CSS/JS from CDN -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>

<script>
    $(document).ready(function() {
        // Initialize DataTables for sorting, search, and pagination
        $('#combinationTable').DataTable({
            "paging": true,       // Enables pagination
            "ordering": true,     // Enables column sorting
            "info": true,         // Shows entry information (X to Y of Z entries)
            "searching": true,    // Enables search/filter
            "lengthChange": true, // Allows changing the number of records per page
            "autoWidth": false,   // Prevents fixed column widths
        });
    });
</script>
{% endblock %}



File: ./app/templates/add_poi.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container mt-2" style="padding: 10px; max-width: 100%;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg">
        <!-- Header Section -->
        <div class="card-header text-center" style="background-color: var(--ies-moss-dark); color: var(--ies-mint-light);">
            <h2 class="mb-0" style="color: white;">Add Point of Interest</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="text-muted text-center">Fill in the details below to add a new point of interest. Fields marked with <span class="text-danger">*</span> are required.</p>

            <form action="/POI/add_poi" method="post" class="mt-4">

                <!-- Dropdowns Section -->
                <div class="row gy-3">
                    <!-- Year Schema -->
                    <div class="col-md-4">
                        <label for="year" class="form-label fw-bold">Select Year Schema <span class="text-danger">*</span></label>
                        <select name="year" id="year" class="form-select" required>
                            <option value="" selected>Select year</option>
                            {% for year in years %}
                                <option value="{{ year }}">{{ year }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <!-- Council -->
                    <div class="col-md-4">
                        <label for="council" class="form-label fw-bold">Council <span class="text-danger">*</span></label>
                        <select id="council" name="council" class="form-select" required>
                            <option value="">Select a Council</option>
                        </select>
                    </div>

                    <!-- Local Board -->
                    <div class="col-md-4">
                        <label for="local_board" class="form-label fw-bold">Local Board <span class="text-danger">*</span></label>
                        <select id="local_board" name="local_board" class="form-select" required>
                            <option value="">Select a Local Board</option>
                        </select>
                    </div>
                </div>

                <!-- Location Details Section -->
                <div class="row gy-3 mt-4">
                    <!-- Location -->
                    <div class="col-md-6">
                        <label for="name" class="form-label fw-bold">Location Name</label>
                        <input type="text" id="name" name="name" class="form-control" placeholder="Enter Location">
                    </div>

                    <!-- Color -->
                    <div class="col-md-6">
                        <label for="color" class="form-label fw-bold">Color</label>
                        <input type="text" id="color" name="color" class="form-control" placeholder="Select a color" readonly>
                    
                        <!-- Color Palette Container -->
                        <div id="color-palette" class="d-none">
                            <!-- The JavaScript code will populate this container with color options -->
                        </div>
                    </div>
                    
                   
                </div>

                <div class="row gy-3 mt-3">
                    <!-- Category -->
                    <div class="col-md-6">
                        <label for="category" class="form-label fw-bold">Category</label>
                        <input type="text" id="category" name="category" class="form-control" placeholder="Enter Category">
                    </div>

                    <!-- Address -->
                    <div class="col-md-6 position-relative">
                        <label for="address" class="form-label fw-bold">Address <span class="text-danger">*</span></label>
                        <input type="text" id="address" name="address" class="form-control" placeholder="Enter Address" required>
                        
                        <!-- Dropdown container for suggestions -->
                        <div class="dropdown">
                            <div id="suggestions" class="dropdown-menu w-100"></div>
                        </div>
                    </div>
                    
                </div>

                <div class="row gy-3 mt-3">
                    <!-- Easting -->
                    <div class="col-md-6">
                        <label for="easting" class="form-label fw-bold">Easting <span class="text-danger">*</span></label>
                        <input type="number" id="easting" name="easting" class="form-control" step="any" placeholder="Enter Easting" required>
                    </div>

                    <!-- Northing -->
                    <div class="col-md-6">
                        <label for="northing" class="form-label fw-bold">Northing <span class="text-danger">*</span></label>
                        <input type="number" id="northing" name="northing" class="form-control" step="any" placeholder="Enter Northing" required>
                    </div>
                </div>
                <div class="d-grid mt-4">
                    <button type="submit" class="btn btn-custom btn-lg"
                            style="background-color: var(--ies-aqua); color: var(--ies-mint-light);">
                        <i class="bi bi-plus-circle"></i> Add Point of Interest
                    </button>
                </div>
                <!-- Map Widget -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div id="map" class="map" style="height: 400px; width: 100%; border: 1px solid #ccc;"></div>
                    </div>
                </div>

                <!-- Submit Button -->
                
            </form>
        </div>
    </div>
</div>

<!-- Add CSS for consistency -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .btn-custom:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    #map {
        border-radius: 5px;
    }

    .form-control {
        padding: .375rem .75rem;
    }

    h2 {
        font-size: 1.75rem;
        font-weight: bold;
    }

    .card-header {
        border-bottom: 3px solid var(--ies-lime-light);
    }
</style>

<!-- Add JavaScript for interactivity -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/ol/dist/ol.js"></script>
<script src="/static/scripts/maps-Mini.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const yearSelect = document.getElementById("year");
        const councilSelect = document.getElementById("council");
        const localBoardSelect = document.getElementById("local_board");

        // Fetch councils when the year changes
        yearSelect.addEventListener("change", async function () {
            const year = this.value;

            // Clear existing council options
            councilSelect.innerHTML = '<option value="">Loading...</option>';
            localBoardSelect.innerHTML = '<option value="">Select a Local Board</option>';

            if (!year) {
                councilSelect.innerHTML = '<option value="">Select a Year First</option>';
                return;
            }

            try {
                const response = await fetch(`/EntitlementBook/tas?year=${year}`);
                if (!response.ok) throw new Error("Failed to fetch councils");

                const tas = await response.json();

                councilSelect.innerHTML = tas.length
                    ? tas.map(ta => `<option value="${ta.id}">${ta.name}</option>`).join("")
                    : '<option value="">No Councils Available</option>';
            } catch (error) {
                console.error("Error fetching councils:", error);
                councilSelect.innerHTML = '<option value="">Error Loading Councils</option>';
            }
        });

        // Fetch local boards when the council changes
        councilSelect.addEventListener("change", async function () {
            const councilId = this.value;
            const year = yearSelect.value;

            localBoardSelect.innerHTML = '<option value="">Loading...</option>';

            if (!councilId || !year) {
                localBoardSelect.innerHTML = '<option value="">Select a Year and Council First</option>';
                return;
            }

            try {
    // Fetch the response
    const response = await fetch(`/EntitlementBook/community_board_TA?selected_ta=${councilId}&year=${year}`);
    if (!response.ok) {
        throw new Error(`Failed to fetch local boards. Status: ${response.status}`);
    }

    // Parse the response once and store it
    const data = await response.json();

    // Log the response for debugging
    console.log("API Response:", data);

    // Safely access community_board
    const boards = Array.isArray(data.community_board) ? data.community_board : [];

    // Handle the case where boards are not available
    const localBoardSelect = document.getElementById("local_board");
    if (!localBoardSelect) {
        throw new Error("Local Board select element not found.");
    }

    localBoardSelect.innerHTML = boards.length
        ? boards.map(board => `<option value="${board.id}">${board.name}</option>`).join("")
        : '<option value="">No Local Boards Available</option>';
} catch (error) {
    console.error("Error fetching local boards:", error);

    // Handle errors gracefully
    const localBoardSelect = document.getElementById("local_board");
    if (localBoardSelect) {
        localBoardSelect.innerHTML = '<option value="">Error Loading Local Boards</option>';
    }
}

        });
    });
</script>
{% endblock %}



File: ./app/templates/entitlementCalculator.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IESL GIS</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <link rel="stylesheet" type="text/css" href="static/styles/ies.css">
    <script src="static/scripts/calculator.js"></script>
</head>
<div class="container">
    <header class="header">
         <a href="/">
            <img src="static\assets\ESLogoVert.png" alt="Logo" class="logo">
        </a>
        <div class="header-container">
            <h1>Calculate Entitlements</h1>
            <img src="static\assets\Header_Green_number.png" alt="Additional Image" class="additional-image">
        </div>
    </header>
</div>
<body>
    <h1>This page is under Development</h1>
    <div class="container">
        <div class="main-content">
            <div class="radio-options">
                <label>
                    <input type="radio" name="rollType" value="General"> General Electoral Roll
                </label>
                <label>
                    <input type="radio" name="rollType" value="Maori"> M&#257;ori Electoral Roll
                </label>
            </div>
            <div class="top-section">
                <div class="left-section">
                    <label for="residentialAddressInput"><strong>Residential Address:</strong></label>
                    <input type="text" id="residentialAddressInput" placeholder="Start typing..." autocomplete="off">
                    <div class=residentialCarddisplay>
                        <div id="selectedResidentialAddress" class="address-cards-container"></div>
                    </div>
                </div>
                <div class="right-section">
                    <label for="ratepayerAddressInput"><strong >Ratepayer Property Address:</strong></label>
                    <input type="text" id="ratepayerAddressInput" placeholder="Start typing..." autocomplete="off">
                    <div class=ratepayerCarddisplay>
                        <ul id="selectedRatepayerAddresses" class="address-cards-container">
                        </ul>
                    </div>
                </div>       
            </div>
            <div class="bottom-section">
                <p>Bottom Section</p>
            </div>    
        </div>
    </div>    
</body>
</html>



File: ./app/templates/upload_roll.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="container-fluid mt-5">
    <div class="row">
        <div class="col-md-12">
            <h2>Upload Roll Data</h2>
            <div class="card shadow-sm mb-4 w-100">
                <div class="card-body">
                    <form action="/rollBook/upload" method="post" enctype="multipart/form-data" class="d-flex align-items-center">
                        <label for="files" class="mr-3">Choose Tilda Separated Files:</label>
                        <input type="file" class="form-control-file border mr-3" id="files" name="files" accept=".txt,.csv" multiple required>
                        <button type="submit" class="btn btn-primary">Upload</button>
                    </form>

                    {% if message %}
                        <div class="alert alert-success mt-3">
                            {{ message }}
                        </div>
                    {% elif error %}
                        <div class="alert alert-danger mt-3">
                            {{ error }}
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

{% block styles %}
<style>
    .form-control-file {
        padding: .375rem .75rem;
        border: 1px solid #ced4da;
    }
    .d-flex .form-control-file {
        flex-grow: 1;
    }
</style>
{% endblock %}
{% endblock %}



File: ./app/templates/entitlementBook_edit.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IESL GIS - Entitlement Book</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <style>
        .nested-table {
            background-color: #f9f9f9; /* Light grey background for nested tables */
            border: 1px solid #dee2e6; /* Border to separate nested table */
            margin-top: 10px;
            padding: 10px;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script src="/static/scripts/calculator.js"></script>
</head>
<body>
    <div class="container mt-4 pb-4">
        <header class="header d-flex justify-content-between align-items-center">
            <a href="/home">
                <img src="/static/assets/ESLogoVert.png" alt="Logo" class="logo">
            </a>
            <div class="header-container text-center">
                <h1>ES Information System</h1>
                <img src="/static/assets/Header_Green_number.png" alt="Additional Image" class="additional-image">
            </div>
        </header>

        <div class="container">
            <div class="main-content">
                <h2 class="mb-4">Divisions under {{ ta_name }} ({{ ta_id }})</h2>

                {% if wards %}
                <h3 class="mt-4">Wards</h3>
                <table class="table table-bordered">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Code</th>
                            <th>Vacancies</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for ward in wards %}
                        <tr>
                            <td><input type="text" class="form-control" value="{{ ward["id"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ ward["name"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ ward["code"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ ward["vacancies"] }}"></td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
                {% endif %}

                {% if community_board %}
                <h3 class="mt-4">Community Boards</h3>
                <p>The following list contains community boards and their associated subdivisions.</p>
                <table class="table table-bordered">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Code</th>
                            <th>Vacancies</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for cb in community_board %}
                        <tr>
                            <td><input type="text" class="form-control" value="{{ cb["id"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ cb["name"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ cb["code"] }}"></td>
                            {% if not cb["subdivisions"] %}
                            <td><input type="text" class="form-control" value="{{ cb["vacancies"] }}"></td>
                            {% else %}
                            <td></td>
                            {% endif %}
                        </tr>
                        {% if cb["subdivisions"] %}
                        <tr>
                            <td colspan="4">
                                <div class="nested-table">
                                    <table class="table table-bordered mt-2">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>ID</th>
                                                <th>Name</th>
                                                <th>Code</th>
                                                <th>Vacancies</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for sub in cb["subdivisions"] %}
                                            <tr>
                                                <td><input type="text" class="form-control" value="{{ sub["id"] }}"></td>
                                                <td><input type="text" class="form-control" value="{{ sub["name"] }}"></td>
                                                <td><input type="text" class="form-control" value="{{ sub["code"] }}"></td>
                                                <td><input type="text" class="form-control" value="{{ sub["vacancies"] }}"></td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                            </td>
                        </tr>
                        {% endif %}
                        {% endfor %}
                    </tbody>
                </table>
                {% endif %}

                {% if regional_council %}
                <h3 class="mt-4">Regional Councils</h3>
                <p>The following list contains regional councils and their associated constituencies.</p>
                <table class="table table-bordered">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Code</th>
                            <th>Vacancies</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for rc in regional_council %}
                        <tr>
                            <td><input type="text" class="form-control" value="{{ rc["id"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ rc["name"] }}"></td>
                            <td><input type="text" class="form-control" value="{{ rc["code"] }}"></td>
                            {% if not rc["constituencies"] %}
                            <td><input type="text" class="form-control" value="{{ rc["vacancies"] }}"></td>
                            {% else %}
                            <td></td>
                            {% endif %}
                        </tr>
                        {% if rc["constituencies"] %}
                        <tr>
                            <td colspan="4">
                                <div class="nested-table">
                                    <table class="table table-bordered mt-2">
                                        <thead class="thead-light">
                                            <tr>
                                                <th>ID</th>
                                                <th>Name</th>
                                                <th>Code</th>
                                                <th>Vacancies</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {% for cons in rc["constituencies"] %}
                                            <tr>
                                                <td><input type="text" class="form-control" value="{{ cons["id"] }}"></td>
                                                <td><input type="text" class="form-control" value="{{ cons["name"] }}"></td>
                                                <td><input type="text" class="form-control" value="{{ cons["code"] }}"></td>
                                                <td><input type="text" class="form-control" value="{{ cons["vacancies"] }}"></td>
                                            </tr>
                                            {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                            </td>
                        </tr>
                        {% endif %}
                        {% endfor %}
                    </tbody>
                </table>
                {% endif %}
            </div>
        </div>
    </div>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



File: ./app/templates/selectCouncil.html
---------------------------------
{% extends parent_template %}

{% block title %}Select Territorial Authority{% endblock %}

{% block styles %}
<link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .btn-custom:hover {
        background-color: var(--ies-aqua-hover) !important;
        color: var(--ies-moss-light) !important;
        transform: scale(1.02);
        transition: all 0.3s ease;
    }
    #loadingSplash {
        position: fixed; /* Overlay the whole screen */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        color: white;
        display: none;
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        z-index: 1000; /* Make sure it is on top of other content */
        font-size: 24px;
        /* Add display: flex; to enable flex properties when visible */
    }

    .form-control {
        padding: .375rem .75rem;
        height: auto;
    }

    .form-group label {
        font-weight: bold;
        color: var(--ies-grey);
    }

    .card-header {
        background-color: var(--ies-moss-dark);
        color: var(--ies-mint-light);
        border-bottom: 3px solid var(--ies-lime-light);
    }

    .card {
        background-color: var(--ies-moss-light);
        border: 2px solid var(--ies-mint-light);
    }

    .btn {
        font-size: 1.25rem;
        padding: 0.75rem 1.5rem;
    }

    h2 {
        font-size: 1.75rem;
        font-weight: bold;
        color: var(--ies-aqua);
    }

    .loader {
        border: 8px solid var(--ies-mint-light);
        border-top: 8px solid var(--ies-aqua);
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-5" style="padding: 0%;">
    <!-- Card Container -->
    <div class="card shadow-lg border-0 rounded-lg p-4">
        <!-- Header Section -->
        <div class="card-header text-center">
            <h2 class="mb-0">Select Territorial Authority</h2>
        </div>

        <!-- Body Section -->
        <div class="card-body">
            <p class="text-muted fs-5 text-center" style="color: var(--ies-grey);">
                Choose a year and council to view the entitlement book.
            </p>

            <!-- Form Section -->
            <form action="/EntitlementBook" method="get" class="mt-4" onsubmit="showLoadingSplash()">
                <div class="row gy-3 justify-content-center">
                    <!-- Year Selection -->
                    <div class="col-md-6">
                        <label for="schema_year" class="form-label">Select Year:</label>
                        <select id="schema_year" name="year" class="form-control">
                            {% for schema in schemas %}
                            <option value="{{ schema }}" {% if schema == selected_schema %}selected{% endif %}>
                                {{ schema }}
                            </option>
                            {% endfor %}
                        </select>
                    </div>

                    <!-- Council Selection -->
                    <div class="col-md-6">
                        <label for="ta_name" class="form-label">Select Council:</label>
                        <select id="ta_name" name="selected_ta" class="form-control">
                            {% for ta in tas %}
                            <option value="{{ ta['id'] }}">{{ ta['name'] }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="row mt-4 justify-content-center">
                    <div class="col-md-6">
                        <button  class="btn w-100 py-3 shadow"  type="submit" 
                        style="background-color: var(--ies-aqua); color: var(--ies-mint-light); border: none; font-size: 1.25rem;">
                            <i class="bi bi-arrow-right-circle" style="margin-right: 8px;"></i> Go to Entitlement Book
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Loading Splash -->
<div id="loadingSplash" class="flex-column align-items-center justify-content-center" 
     style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
            background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
    <div class="loader"></div>
    <p class="mt-3 text-light">Loading, please wait...</p>
</div>

{% endblock %}

{% block scripts %}
<script>
    function showLoadingSplash() {
        const splashScreen = document.getElementById('loadingSplash');
        if (splashScreen) {
            splashScreen.style.display = 'flex'; // Show the splash screen
        }
    }

    // Hide the loading splash once the page is fully loaded
    function hideSplashOnLoad() {
        const splashScreen = document.getElementById('loadingSplash');
        if (splashScreen) {
            splashScreen.style.display = 'none'; // Hide the splash screen
        }
    }

    // Ensure the splash screen is hidden after DOM content is loaded
    document.addEventListener("DOMContentLoaded", hideSplashOnLoad);

    // Handle back/forward navigation (browser caching scenarios)
    window.addEventListener("pageshow", hideSplashOnLoad);
</script>
{% endblock %}



File: ./app/templates/base.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <title>{% block title %}Election Information System{% endblock %}</title>
    <style>
        body {
            margin: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden; /* Prevent the body from scrolling */
            padding: 0;
        }
        .header {
            background-color: #ffffff;
            display: flex;
            align-items: center;
            height: 100px;
            position: sticky;
            top: 0;
            z-index: 2;
            width: 100%;
        }
        .header .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between; /* Ensure the elements are at the ends */
            width: 230px; /* Ensuring the width is same as sidebar */
            overflow-y: hidden;
        }
        .header h1 {
            flex-grow: 1;
            text-align: left;
            margin: 0;
            padding-left: 10px; /* Adjust spacing as needed */
            color: var(--ies-aqua);
        }
        .header .vertical-divider {
            border-left: 2px solid var(--ies-moss); /* Divider style */
            height: 70px; /* Adjust height to leave space above and below */
            margin: 0 10px; /* Adjust margins as needed */
        }
        .horizontal-divider {
            border-top: 10px solid var(--ies-aqua);
            width: 99%;
            margin-top: 5px;
        }
        .horizontal-divider-small {
            border-top: 2px solid var(--ies-grey);
            width: 90%;
            margin-left: 5px;
        }
        .main-container {
            display: flex;
            flex-grow: 1;
            overflow: hidden;
        }
        .sidebar {
            width: 220px;
            background-color: var(--ies-aqua);
            transition: width 0.3s;
            display: flex;
            flex-direction: column;
            height: calc(100vh - 100px);
            box-sizing: border-box;
            position: sticky;
            top: 100px;
        }
        .sidebar.collapsed {
            width: 80px;
        }
        .sidebar .logo {
            margin-bottom: 20px;
        }
        .sidebar a, .sidebar .user-info, .sidebar .toggle-sidebar {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 18px;
            color: #ffffff;
            display: flex;
            align-items: center;
            white-space: nowrap;
        }
        .sidebar a .icon, .sidebar .user-info .icon, .sidebar .toggle-sidebar .icon {
            margin-right: 10px;
        }
        .sidebar.collapsed a .text, .sidebar.collapsed .user-info .text {
            display: none;
        }
        .sidebar a:hover, .sidebar .toggle-sidebar:hover {
            background-color: #ddd;
            color: #000;
        }
        .toggle-sidebar {
            cursor: pointer;
            position: absolute;
            right: -15px;
            top: 50%;
            transform: translateY(-50%);
            padding: 10px;
            background-color: var(--ies-aqua);
            border-radius: 50%;
            border: 2px solid #ccc;
            z-index: 1;
        }
        .toggle-sidebar .fas {
            font-size: 20px;
        }
        .content-container {
            flex-grow: 1;
            overflow-y: auto;
            background-image: url('/static/assets/GreyscaleBackground.png');
            background-size: 80vh 80vh;; /* Adjust size of the image */
            background-repeat: no-repeat; /* Prevents the image from repeating */
            background-position: bottom right; /* Positions the image at the bottom right corner */
            background-attachment: fixed; /* Keeps the image in a fixed position */
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <img src="/static/assets/ESLogoVert.png" alt="Logo" class="logo">
            <div class="vertical-divider"></div>
        </div>
        <h1>Election Information System</h1>
    </header>
    <div class="horizontal-divider"></div> <!-- Horizontal divider -->
    <div class="main-container">
        <div class="sidebar">
            <div class="toggle-sidebar">
                <i class="fas fa-chevron-left"></i>
            </div>
            <div class="user-info">
                <i class="fas fa-user icon"></i>
                <span class="text">{{ user_name }}</span>
            </div>
            <div class="horizontal-divider-small"></div> <!-- Horizontal divider -->

            <a href="/home">
                <i class="fas fa-home icon"></i>
                <span class="text">Home</span>
            </a>
            <a href="/Map/">
                <i class="fas fa-map icon"></i>
                <span class="text">Maps</span>
            </a>
            <a href="/SelectCouncil">
                <i class="fas fa-book icon"></i>
                <span class="text">Entitlement Book</span>
            </a>
            <a href="/logout">
                <i class="fas fa-sign-out-alt icon"></i>
                <span class="text">Logout</span>
            </a>
        </div>
        <div class="content-container">
            <div class="main-content">
                {% block content %}{% endblock %}
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        document.querySelector('.toggle-sidebar').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('collapsed');
            const icon = document.querySelector('.toggle-sidebar .fas');
            if (document.querySelector('.sidebar').classList.contains('collapsed')) {
                icon.classList.remove('fa-chevron-left');
                icon.classList.add('fa-chevron-right');
            } else {
                icon.classList.remove('fa-chevron-right');
                icon.classList.add('fa-chevron-left');
            }
        });
    </script>
    {% block scripts %}{% endblock %}
</body>
</html>



File: ./app/templates/error.html
---------------------------------
{% extends "base.html" %}

{% block title %}Error - ES Information System{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 text-danger">Error</h1>
        <p class="lead">{{ message }}</p>
        <a href="/login" class="btn btn-outline-primary btn-lg mt-3">Go to Home</a>
    </div>
</div>
{% endblock %}



File: ./app/templates/admin_base.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <script src="/static/scripts/color-palette.js"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css"/>
    <!-- Remove the jQuery slim version and keep only the standard one -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    

    <title>{% block title %}Election Information System{% endblock %}</title>
    <style>
        body {
            margin: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
            padding: 0;
        }
        .header {
            background-color: #ffffff;
            display: flex;
            align-items: center;
            height: 100px;
            position: sticky;
            top: 0;
            z-index: 2;
            width: 100%;
        }
        .header .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between; /* Ensure the elements are at the ends */
            width: 230px; /* Ensuring the width is same as sidebar */
        }
        .header h1 {
            flex-grow: 1;
            text-align: left;
            margin: 0;
            padding-left: 10px; /* Adjust spacing as needed */
            color: var(--ies-aqua);
        }
        .header .vertical-divider {
            border-left: 2px solid var(--ies-moss); /* Divider style */
            height: 70px; /* Adjust height to leave space above and below */
            margin: 0 10px; /* Adjust margins as needed */
        }
        .horizontal-divider {
            border-top: 10px solid var(--ies-aqua);
            width: 99%;
            margin-top: 5px;
        }
        .horizontal-divider-small {
            border-top: 2px solid var(--ies-grey);
            width: 90%;
            margin-left: 5px;
        }
        .main-container {
            display: flex;
            flex-grow: 1;
            overflow: hidden;
        }
        .sidebar {
            width: 220px;
            background-color: var(--ies-aqua);
            transition: width 0.3s;
            display: flex;
            flex-direction: column;
            height: calc(100vh - 100px);
            box-sizing: border-box;
            position: sticky;
            top: 100px;
        }
        .sidebar.collapsed {
            width: 80px;
        }
        .sidebar .logo {
            margin-bottom: 20px;
        }
        .sidebar a, .sidebar .user-info, .sidebar .toggle-sidebar {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 18px;
            color: #ffffff;
            display: flex;
            align-items: center;
            white-space: nowrap;
        }
        .sidebar a .icon, .sidebar .user-info .icon, .sidebar .toggle-sidebar .icon {
            margin-right: 10px;
        }
        .sidebar.collapsed a .text, .sidebar.collapsed .user-info .text {
            display: none;
        }
        .sidebar a:hover, .sidebar .toggle-sidebar:hover {
            background-color: #ddd;
            color: #000;
        }
        .toggle-sidebar {
            cursor: pointer;
            position: absolute;
            right: -15px;
            top: 90%;
            transform: translateY(-50%);
            padding: 10px;
            background-color: var(--ies-aqua);
            border-radius: 50%;
            border: 2px solid #ccc;
            z-index: 1;
        }
        .toggle-sidebar .fas {
            font-size: 20px;
        }
        .content-container {
            flex-grow: 1;
            overflow-y: auto;
            background-image: url('/static/assets/GreyscaleBackground.png');
            background-size: 400px 400px; /* Adjust size of the image */
            background-repeat: no-repeat; /* Prevents the image from repeating */
            background-position: bottom right; /* Positions the image at the bottom right corner */
            background-attachment: fixed; /* Keeps the image in a fixed position */
        }
        .nested-menu {
            display: none;
            padding-left: 20px;
        }
        .sidebar .nested-menu a {
            padding-left: 30px;
            font-size: 16px;
        }
        .sidebar .menu-item {
            cursor: pointer;
            position: relative;
        }
        .sidebar .menu-item .toggle-arrow {
            margin-left: auto;
            transition: transform 0.3s;
        }
        .sidebar .menu-item.open .toggle-arrow {
            transform: rotate(90deg);
        }
        .main-content{
            margin-top: 5px;
        }
        .text{
            font-size: small !important;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <img src="/static/assets/ESLogoVert.png" alt="Logo" class="logo">
            <div class="vertical-divider"></div>
        </div>
        <h1>Election Information System</h1>
    </header>
    <div class="horizontal-divider"></div> <!-- Horizontal divider -->
    <div class="main-container">
        <div class="sidebar">
            <div class="toggle-sidebar">
                <i class="fas fa-chevron-left"></i>
            </div>
            <div class="user-info">
                <i class="fas fa-user icon"></i>
                <span class="text">{{ user_name }}</span>
            </div>
            <div class="horizontal-divider-small"></div> <!-- Horizontal divider -->
            <a href="/admin">
                <i class="fas fa-home icon"></i>
                <span class="text">Home</span>
            </a>
            <a href="/Map/">
                <i class="fas fa-map icon"></i>
                <span class="text">Maps</span>
            </a>
            <a href="/SelectCouncil">
                <i class="fas fa-book icon"></i>
                <span class="text">Entitlement Book</span>
            </a>
            <a href="/POI">
                <i class="fas fa-map-marker-alt icon"></i>
                <span class="text">POI</span>
            </a>
            <div class="menu-item">
                <a href="#"><i class="fas fa-search icon"></i><span class="text">Search Address</span><i class="fas fa-chevron-right toggle-arrow"></i></a>
                <div class="nested-menu">
                    <a href="/meshblock-lookup"><span class="text">By Meshblock</span></a>
                </div>
            </div>
            
          
            
            <div class="menu-item">
                <a href="#"><i class="fas fa-database icon"></i><span class="text">GeoSpatial Data</span><i class="fas fa-chevron-right toggle-arrow"></i></a>
                <div class="nested-menu">
                    <a href="/Geo/currentdata"><span class="text">Current Data Version</span></a>
                    <a href="/Geo/updateroute"><span class="text">Update Data</span></a>
                    <a href="/Geo/select_schema"><span class="text">View Data</span></a>
                </div>
            </div>


            <div class="menu-item">
                <a href="#"><i class="fas fa-database icon"></i><span class="text">Address Data</span><i class="fas fa-chevron-right toggle-arrow"></i></a>
                <div class="nested-menu">
                    <a href="/Address/update_data_page"><span class="text">View Data</span></a>
                </div>
            </div>


            

            <div class="menu-item">
                <a href="#"><i class="fas fa-database icon"></i><span class="text">Combination Data</span><i class="fas fa-chevron-right toggle-arrow"></i></a>
                <div class="nested-menu">
                    <a href="/upload_combination_table_form/">
                        <i class="fas fa-database icon"></i>
                        <span class="text">Combination Upload</span>
                    </a>
                    <a href="/select_schema_combination/">
                        <i class="fas fa-database icon"></i>
                        <span class="text">View Combination</span>
                    </a>
                </div>
            </div>

            <a href="/admin/add-remove-users">
                <i class="fas fa-user-plus icon"></i>
                <span class="text">Add/Remove Users</span>
            </a>
            <a href="/admin/preload-cache">
                <i class="fas fa-database icon"></i>
                <span class="text">Preload Cache</span>
            </a>
            <a href="/logout">
                <i class="fas fa-sign-out-alt icon"></i>
                <span class="text">Logout</span>
            </a>
        </div>
        <div class="content-container">
            <div class="main-content">
                {% block content %}{% endblock %}
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
   
    <script>
        document.querySelector('.toggle-sidebar').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('collapsed');
            const icon = document.querySelector('.toggle-sidebar .fas');
            if (document.querySelector('.sidebar').classList.contains('collapsed')) {
                icon.classList.remove('fa-chevron-left');
                icon.classList.add('fa-chevron-right');
            } else {
                icon.classList.remove('fa-chevron-right');
                icon.classList.add('fa-chevron-left');
            }
        });

        document.querySelectorAll('.menu-item > a').forEach(item => {
            item.addEventListener('click', function(event) {
                event.preventDefault();
                const menuItem = this.parentElement;
                const nestedMenu = menuItem.querySelector('.nested-menu');
                const toggleArrow = menuItem.querySelector('.toggle-arrow');
                if (nestedMenu.style.display === 'block') {
                    nestedMenu.style.display = 'none';
                    menuItem.classList.remove('open');
                } else {
                    nestedMenu.style.display = 'block';
                    menuItem.classList.add('open');
                }
            });
        });
    </script>
    {% block scripts %}{% endblock %}
</body>
</html>



File: ./app/templates/selectCouncil_edit.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Territorial Authority</title>
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .form-control {
            line-height: 1.5;
            padding: .375rem .75rem;
            height: auto; /* Set height to auto to avoid cutting off text */
        }

        .form-control option {
            padding: 5px; /* Ensure dropdown items have enough padding */
        }
    </style>
    <script>
        // This function checks the visibility of the splash screen and adjusts it
        function checkAndHideSplash() {
            const splashScreen = document.getElementById('loadingSplash');
            if (splashScreen) {
                splashScreen.style.display = 'none'; // Hide the splash screen
            }
        }

        // Event listener for when the page is fully loaded or revisited
        window.addEventListener("pageshow", checkAndHideSplash);

        // Add DOMContentLoaded to ensure the form element is accessible
        document.addEventListener("DOMContentLoaded", function() {
            const form = document.querySelector("form");
            if (form) {
                form.addEventListener("submit", function() {
                    const splashScreen = document.getElementById('loadingSplash');
                    if (splashScreen) {
                        splashScreen.style.display = 'flex'; // Show the splash screen
                    }
                });
            }
        });
    </script>
</head>
<body>
    <div class="container mt-4 pb-4">
        <header class="header d-flex justify-content-between align-items-center">
            <a href="/">
                <img src="/static/assets/ESLogoVert.png" alt="Logo" class="logo">
            </a>
            <div class="header-container text-center">
                <h1>ES Information System</h1>
                <img src="/static/assets/Header_Green_number.png" alt="Additional Image" class="additional-image">
            </div>
        </header>

        <div class="main-content">
            <h2 class="text-center mb-4">Select a Territorial Authority</h2>
            <form action="/EntitlementBook_edit" method="post" class="w-50 mx-auto">
                <div class="form-group d-flex align-items-center">
                    <label for="ta_name" class="sr-only">Select Council:</label>
                    <select id="ta_name" name="selected_ta" class="form-control">
                        {% for ta in tas %}
                        <option value="{{ ta['id'] }}-{{ ta['name'] }}-{{ ta['code'] }}">{{ ta['name'] }}</option>
                        {% endfor %}
                    </select>
                    <button class="btn btn-primary mr-3" type="submit">Go to Entitlement Book</button>
                </div>
            </form>
        </div>
    </div>

    <div id="loadingSplash" style="display:none;">
        <div class="loader"></div>
        <p>Loading, please wait...</p>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>



File: ./app/templates/map-screenshot.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ES - Maps</title>
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol/dist/ol.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css"/>
    <!-- Remove the jQuery slim version and keep only the standard one -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <style>
        /* Additional styles to make the map take as much space as possible */
        html, body {
            height: 100%;
            margin: 0;
        }
        .content {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        .sidebar-container {
            width: 100%;
            display: flex;
            flex-direction: column;
        }
        .sidebar-left, .sidebar-right {
            overflow-y: auto;
        }
        .map-container {
            width: 100%;
            height: 1750px;
        }
        #map {
            width: 100%;
            height: 100% !important;
        }
        .checkboxes {
            display: flex;
            flex-wrap: wrap;
            gap: 10px; /* Adds space between items */
        }

        .checkbox-item {
            display: flex;
            align-items: center;
        }

        .sidebar-left {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1000;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 300px;
            padding: 10px;
            gap: 10px;
        }

        /* Adjustments for responsiveness */
        @media (max-width: 768px) {
            .sidebar-container {
                width: 100%;
                height: 50%;
            }
            .map-container {
                width: 100%;
                height: 50%;
            }
            .content {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="content">
        <div class="sidebar-container">
            
        </div>

        
        <div class="map-container">
            <div id="map">
                <!-- Map content here -->
            </div>
            <div class="sidebar-left" style="max-width: 350px !important;">
                
                <div class="year-selector card p-1 mb-2" 
                    style="font-size: 0.9em; display: flex; flex-direction: row; justify-content: space-between; align-items: center; gap: 0.5rem;">
                    <!-- Back Icon -->
                    <div id="back-to-map" style="
                        cursor: pointer; 
                        color: #007bff; 
                        font-size: 1.5em; 
                        display: flex; 
                        align-items: center;">
                        <i class="fa fa-arrow-left"></i>
                    </div>
                    <!-- Year Selector -->
                    <div style="display: flex; flex-direction: row; align-items: center; gap: 0.5rem;">
                        <label for="yearSelect" class="mb-0">Select Year:</label>
                        <select id="yearSelect" class="form-control form-control-sm" onchange="updateYearSchema(this.value)" style="width: auto;">
                            <!-- Dynamically populate options here -->
                        </select>
                    </div>
                </div>


                <div class="dropdown">
                    <input type="text" id="search" class="form-control" placeholder="Search for address...">
                    <div id="suggestions" class="dropdown-menu" style="width: 100%;"></div>
                </div>
            
                <div class="d-flex justify-content-between align-items-center mb-3" style="margin-top: 5px;">
                    <button type="button"
                            class="btn p-0 border-0 bg-transparent"
                            data-toggle="collapse"
                            data-target="#checkboxSection"
                            aria-expanded="false"
                            aria-controls="checkboxSection"
                            style="font-size: 1.2rem; color: var(--ies-moss-dark);">
                        <i class="fas fa-chevron-down"></i>
                    </button>
                
                    <input id="clear" 
                           type="button" 
                           value="Clear" 
                           class="btn btn-secondary btn-sm" 
                           style="height: 1.5rem; padding: 0 0.5rem;">
                </div>
                
                
                <!-- Collapsible Section -->
                <div id="checkboxSection" class="collapse" style="margin-top: 5px;">
                    <div class="checkboxes d-flex flex-wrap align-items-start" style="font-size: 0.9em; gap: 1rem;">
                        <!-- Static Checkboxes -->
                        <div id="static-checkboxes" style="line-height: 1.2; font-size: 0.9em;">
                            <label><input id="cs_cb" type="checkbox" data-feature="Councils" onclick='handleCheckboxChange("Councils", this.checked, "Councils")'> Councils</label><br>
                            <label><input id="wrds_cb" type="checkbox" data-feature="Wards" onclick='handleCheckboxChange("Wards", this.checked, "Wards")'> Wards</label><br>
                            <label><input id="maori_wards_cb" type="checkbox" data-feature="Maori Wards" onclick='handleCheckboxChange("Maori Wards", this.checked, "Maori Wards")'> M&#257;ori Wards</label><br>
                            <label><input id="cb_cb" type="checkbox" data-feature="Community Board" onclick='handleCheckboxChange("Community Board", this.checked, "Community Board")'> Community Board</label><br>
                            <label><input id="subdiv_cb" type="checkbox" data-feature="Subdivisions" onclick='handleCheckboxChange("Subdivisions", this.checked, "Subdivisions")'> Subdivisions</label><br>
                            <label><input id="reg_council_cb" type="checkbox" data-feature="Regional Council" onclick='handleCheckboxChange("Regional Council", this.checked, "Regional Council")'> Regional Council</label><br>
                            <label><input id="gen_const_cb" type="checkbox" data-feature="General Constituency" onclick='handleCheckboxChange("General Constituency", this.checked, "General Constituency")'> General Constituency</label><br>
                            <label><input id="maori_const_cb" type="checkbox" data-feature="Maori Constituency" onclick='handleCheckboxChange("Maori Constituency", this.checked, "Maori Constituency")'> M&#257;ori Constituency</label><br>
                            <label><input id="LT_cb" type="checkbox" data-feature="LT" onclick='handleCheckboxChange("LT", this.checked, "LT")'> Licensing trust</label><br>
                        </div>
                        <!-- Dynamic Checkboxes -->
                        <div id="dynamic-checkboxes">
                            <!-- Dynamic checkboxes will be inserted here -->
                        </div>
                    </div>
                </div>
                <div id="feature-container" style="margin-top: 20px; max-height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                    <div style="margin-bottom: 10px;">
                        <input type="checkbox" id="select-all-checkbox" onchange="toggleSelectAllFeatures(this.checked)">
                        <label for="select-all-checkbox">Select All</label>
                    </div>
                    <div id="feature-checkboxes">
                        <!-- Dynamic checkboxes for features will be inserted here -->
                    </div>
                </div>
                



            </div>
        </div>
    </div>

    <!-- Modal HTML -->
    <div id="loadingModal" class="modal">
        <div class="modal-content">
            <div class="loader"></div>
            <p>Loading data, please wait...</p>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ol/dist/ol.js"></script>
    
    <script src="/static/scripts/maps-google-screenshot.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
       // Fetch available years from the database using Axios
       axios.get('/POI/getAvailableYears')
           .then(response => {
               const yearSelect = document.getElementById('yearSelect');
               
               // Sort years in descending order and set the highest year as the default
               const years = response.data.sort((a, b) => b - a);
               
               years.forEach((year, index) => {
                   const option = new Option(year, year);
                   if (index === 0) {
                       option.selected = true;  // Set the highest year as the default selected option
                       updateYearSchema(year);  // Load categories for the default year
                   }
                   yearSelect.add(option);
               });
           })
           .catch(error => {
               console.error("Failed to load available years:", error);
               alert("Failed to load available years.");
           });
       });
   
       document.getElementById('back-to-map').addEventListener('click', () => {
            window.location.href = `${window.location.origin}/Map`;
        });

        // Add hover effects for the back icon
        const backToMapIcon = document.getElementById('back-to-map');
        backToMapIcon.addEventListener('mouseover', () => {
            backToMapIcon.style.color = '#0056b3'; // Darker blue on hover
            backToMapIcon.style.transform = 'scale(1.1)'; // Slight zoom effect
        });
        backToMapIcon.addEventListener('mouseout', () => {
            backToMapIcon.style.color = '#007bff'; // Original blue
            backToMapIcon.style.transform = 'scale(1)'; // Reset zoom
        });


       function updateYearSchema(selectedYear) {
       console.log("Selected Year:", selectedYear);
   
       // Fetch categories for the selected year
       axios.get(`/POI/getCategoriesByYear/${selectedYear}`)
           .then(response => {
               const categories = response.data.categories;
               console.log("Fetched categories:", categories); // Debugging log
               updateCheckboxList(categories);
           })
           .catch(error => {
               console.error("Failed to load categories:", error);
               alert("Failed to load categories for the selected year.");
           });
   }
   
   
   function updateCheckboxList(categories) {
       const dynamicCheckboxesContainer = document.getElementById('dynamic-checkboxes');
   
       // Clear existing checkboxes
       dynamicCheckboxesContainer.innerHTML = '';
   
       // Create a document fragment for better performance
       const fragment = document.createDocumentFragment();
   
       // Add new checkboxes
       categories.forEach(category => {
           const label = document.createElement('label');
           label.innerHTML = `<input type="checkbox" id="checkbox-${category}" data-feature="${category}"
                                   onclick='handleCheckboxChange("POI", this.checked, "${category}")'> 
                                   ${category}`;
           fragment.appendChild(label);
           fragment.appendChild(document.createElement('br'));
       });
   
       // Append fragment to container
       dynamicCheckboxesContainer.appendChild(fragment);
       console.log("Dynamic checkboxes updated:", categories); // Debugging log
   }
   </script>

</body>
</html>



File: ./app/templates/login.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/static/styles/ies.css">
    <title>Login</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            height: 100vh;
        }

        .top-header {
            display: flex;
            align-items: center;
            padding-left: 45px;
            padding-right: 20px;
            padding-top: 20px;
            background-color: white;
            color: var(--ies-aqua);
        }

        .top-header .logo {
            width: 100px;
            height: auto;
        }

        .top-header .vertical-divider {
            height: 80px;
            width: 3px;
            background-color: var(--ies-aqua);
            margin: 0 15px;
        }

        .top-header .heading-text {
            font-size: 2rem;
            font-weight:400;
        }

        .horizontal-divider {
            height: 3px;
            background-color: var(--ies-aqua);
            margin-top: 10px;
        }

        .background-section {
            height: 30vh;
            background: url('/static/assets/Vector_art.jpg') no-repeat center center;
            background-size: cover;
            position: relative;
            display: flex;
            justify-content: flex-start; 
            align-items: center; 
        }

        .background-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1; 
        }
        .branding {
            position: absolute;
            z-index: 2; 
            left: 0; 
            top: 50%;
            transform: translateY(-50%);
            padding: 40px;
        }

        .login-section {
            display: flex;
            justify-content: space-around;
            align-items:start;
            padding: 40px;
            background-color: var(--ies-aqua-light);
            width: 100%;
        }


        .login-container {
            flex: 1;
            width: 50%;
            padding: 20px 30px;
        }

        .login-container, .login-info {
            flex: 1;
            padding: 20px;
        }
        .login-container h2 {
            color: var(--ies-aqua);
            margin-bottom: 20px;
        }

        
        .vertical-divider2 {
            height: 300px;
            width: 2px;
            background-color: var(--ies-aqua);
            margin: 0 20px;
        }

        h2 {
            margin-bottom: 0.5rem;
        }

        .btn{
            background-color: var(--ies-aqua);
            width: 100px;
            color: white;
            border-radius: 0px;
        }

        .form-group input{
            border-color: var(--ies-aqua);
            border-radius: 0%;
            border-width: 2px;
        }

        .contact-info p {
            text-align: left;
            margin: 0;
            line-height: 1.6;
            font-size: small;
        }

        footer {
            background-color: var(--ies-aqua);
            color: white;
            width: 100%;
            padding-left: 40px;
            padding-right: 20px;
            padding-top: 20px;
        }
    </style>
</head>
<body>
    <!-- Top Header -->
    <div class="top-header">
        <img src="/static/assets/ESLogoVert.png" alt="Logo" class="logo">
        <div class="vertical-divider"></div>
        <div class="heading-text">Election Information System</div>
    </div>
    <div class="horizontal-divider"></div>

    <!-- Background Section -->
    <div class="background-section">
        <div class="background-overlay"></div>
        <img src="/static/assets/digital_solution_artwork.webp" alt="Digita-solutions" class="branding">
    </div>

    <!-- Login Section -->
    <div class="login-section">
        <div class="login-container">
            <form id="login-form" style="width: 80%;">
                <div style="text-align: left !important; width: 100%;">
                    <h2 style="margin: 0%;">Login</h2>
                </div>
                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" id="username" name="username" class="form-control" required>
                </div>
                <div class="form-group" >
                    <label for="password">Password:</label>
                    <input type="password" id="password" name="password" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-block">Login</button>
                <p style="text-decoration: underline; color: var(--ies-aqua);">Forgotten your username or password?</p>
            </form>
        </div>
        <div class="vertical-divider2"></div>

        <!-- Ensure this is outside and next to the login-container -->
        <div class="login-info">
            <h2>Account Registration</h2>
            <p>Welcome! Please request an account to access our services.</p>
            <button class="btn btn-block" style="width: 200px !important;">Request Account</button>
        </div>
    </div>


    <!-- Footer -->
    <footer>
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 20px;">
            <div class="contact-info">
                <p>Contact us:<br>
                    Independent Election Services Ltd<br>
                    0800 922 822 | 09 973 5212 | <a href="mailto:info@electionservices.co.nz">info@electionservices.co.nz</a><br>
                    Level 2A, 198 Federal Street, Auckland<br>
                    Monday - Friday 8AM-5PM | Saturday and Sunday: Closed
                </p>
            </div>
            <div style="display: flex; flex-direction: column; justify-content: space-between; align-items: flex-end; gap: 20px;">
                <img src="/static/assets/tagline.png" style="width: 300px; height: auto;"> 
                <p style="margin: 0;">&copy; 2024 Election Information System. All rights reserved.</p>
            </div>
            
        </div>
    </footer>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#login-form').on('submit', function (event) {
                event.preventDefault(); 
    
                var formData = {
                    username: $('#username').val(),
                    password: $('#password').val()
                };
    
                $.ajax({
                    type: 'POST',
                    url: '/login',
                    contentType: 'application/json', 
                    data: JSON.stringify(formData),  
                    success: function () {
                        window.location.href = '/home'; 
                    },
                    error: function (response) {
                        console.log(response); 
                        let errorMessage = 'An error occurred. Please try again.';
                        if (response.responseJSON && response.responseJSON.message) {
                            errorMessage = response.responseJSON.message;
                        }
                        $('#error-message').text(errorMessage).show();
                    }
                });
            });
        });
    </script>
</body>
</html>



File: ./app/templates/maps.html
---------------------------------
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>IESL GIS</title>
        <link rel="stylesheet" type="text/css" href="static/styles/ies.css">
        <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.2/proj4.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/ol/dist/ol.js"></script>
        <script src="static/scripts/map.js"></script>
    </head>
    
<body>
    <div class="container">
        <header class="header">
             <a href="/home">
                <img src="static\assets\ESLogoVert.png" alt="Logo" class="logo">
            </a>
            <div class="header-container">
                <h1>Maps</h1>
                <img src="static\assets\Header_Green_number.png" alt="Additional Image" class="additional-image">
            </div>
        </header>
    </div>

    <div class="content">
        <div class="sidebars">
            <div class="sidebar-left">
                <input id="search" type="text" autocomplete="off" placeholder="Search Address" size="31">
                <input id="clear" class="btn btn-custom ml-3" type="button" value="Clear">
                
                <div class="checkboxes">
                    <!-- <label><input id="mb_cb" type="checkbox" onclick='handleCheckboxChange("Meshblock", this.checked)'>Meshblock</label>-->
                    <label><input id="cs_cb" type="checkbox" onclick='handleCheckboxChange("Councils", this.checked)' >Councils</label>
                    <label><input id="wrds_cb" type="checkbox" onclick='handleCheckboxChange("Wards", this.checked)'>Wards</label>
                    <label><input id="maori_wards_cb" type="checkbox" onclick='handleCheckboxChange("Maori Wards", this.checked)'>M&#257;ori Wards</label>
                    <label><input id="subdiv_cb" type="checkbox" onclick='handleCheckboxChange("Subdivisions", this.checked)'>Subdivisions</label>
                    <label><input id="reg_council_cb" type="checkbox" onclick='handleCheckboxChange("Regional Council", this.checked)'>Regional Council</label>
                    <label><input id="gen_const_cb" type="checkbox" onclick='handleCheckboxChange("General Constituency", this.checked)'>General Constituency</label>
                    <label><input id="maori_const_cb" type="checkbox" onclick='handleCheckboxChange("Maori Constituency", this.checked)'>M&#257;ori Constituency</label>
                    <!--<label><input id="LT_cb" type="checkbox" onclick='handleCheckboxChange("LT", this.checked)'>Licensing Trust</label>-->

                </div>
                <div id="address"></div>
				<div id="data-date">
				Address data from LINZ as at 2024 (CC BY 4.0 NZ).
				<Br />
				All boundaries from StatsNZ as at 2024 (CC BY 4.0).
				<br />
				Base map data from the OpenStreetMap project(ODbL).
			</div>
            </div>
            <div class="sidebar-right">
                <div id="entitlements"></div>
            </div>
        </div>

        <div id="map" class="map">
            <!-- Map content here -->
        </div>  
    </div>
      <!-- Modal HTML -->
      <div id="loadingModal" class="modal">
        <div class="modal-content">
            <div class="loader"></div>
            <p>Loading data, please wait...</p>
        </div>
    </div>
           
</body>

</html>



File: ./app/templates/update_data.html
---------------------------------
{% extends "admin_base.html" %}

{% block content %}
<div class="card shadow-sm mb-4 p-3 mx-3">
    <h2>Update Data in {{ table_name }}</h2>
    <form method="POST">
        {% for column, value in data.items() %}
        <div class="form-group">
            <label for="{{ column }}">{{ column }}</label>
            <input type="text" id="{{ column }}" name="{{ column }}" value="{{ value }}" class="form-control">
        </div>
        {% endfor %}
        <button type="submit" class="btn btn-primary">Update</button>
    </form>
</div>
{% endblock %}



File: ./app/static/scripts/meshblock.js
---------------------------------
document.getElementById('meshblockForm').addEventListener('submit', function(event) {
    event.preventDefault();
    fetchAddressesAndDisplay();
});

document.getElementById('exportButton').addEventListener('click', function() {
    if (!document.getElementById('resultBody').hasChildNodes()) {
        // If no results are displayed, fetch addresses first
        fetchAddressesAndDisplay().then(() => {
            exportTableToCSV('addresses.csv');
        });
    } else {
        // If results are already displayed, export directly
        exportTableToCSV('addresses.csv');
    }
});

function fetchAddressesAndDisplay() {
    const meshblocksInput = document.getElementById('meshblocks').value;
    const meshblocks = meshblocksInput.split(',').map(item => item.trim());
    
    return fetch('/addresses_by_meshblocks/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(meshblocks)
    })
    .then(response => response.json())
    .then(data => {
        displayResults(data);
    })
    .catch(error => {
        console.error('Error fetching addresses:', error);
    });
}

function displayResults(data) {
    const resultBody = document.getElementById('resultBody');
    resultBody.innerHTML = ''; // Clear previous results

    data.forEach(address => {
        const row = resultBody.insertRow();
        const cell1 = row.insertCell(0);
        const cell2 = row.insertCell(1);
        const cell3 = row.insertCell(2);
        const cell4 = row.insertCell(3);
        const cell5 = row.insertCell(4);
        const cell6 = row.insertCell(5);
        const cell7 = row.insertCell(6);
        const cell8 = row.insertCell(7);
        const cell9 = row.insertCell(8);

        cell1.textContent = address.address_id;
        cell2.textContent = address.meshblock;
        cell3.textContent = address.full_add_1;
        cell4.textContent = address.council || 'N/A';
        cell5.textContent = address.general_ward || 'N/A';
        cell6.textContent = address.maori_ward || 'N/A';
        cell7.textContent = address.local_board || 'N/A';
        cell8.textContent = address.community_board || 'N/A';
        cell9.textContent = address.subdivision || 'N/A';
    });

    // Update the address count
    document.getElementById('addressCount').textContent = data.length;
}

function downloadCSV(csv, filename) {
    var csvFile;
    var downloadLink;

    // CSV file
    csvFile = new Blob([csv], {type: "text/csv"});

    // Download link
    downloadLink = document.createElement("a");

    // File name
    downloadLink.download = filename;

    // Create a link to the file
    downloadLink.href = window.URL.createObjectURL(csvFile);

    // Hide download link
    downloadLink.style.display = "none";

    // Add the link to DOM
    document.body.appendChild(downloadLink);

    // Click download link
    downloadLink.click();

    // Clean up the DOM by removing the link
    document.body.removeChild(downloadLink);
}

function exportTableToCSV(filename) {
    var csv = [];
    var rows = document.querySelectorAll("table tr");
    
    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll("td, th");
        
        for (var j = 0; j < cols.length; j++) 
            row.push('"' + cols[j].innerText.replace(/"/g, '""') + '"');  // Handle quotes to avoid CSV errors
        
        csv.push(row.join(","));        
    }

    // Download CSV file
    downloadCSV(csv.join("\n"), filename);
}



File: ./app/static/scripts/maps-Mini.js
---------------------------------
/*******************************************************************************
 * MAP INITIALIZATION
 ******************************************************************************/
let map; // OpenLayers map instance
let vectorSource; // Source for the marker layer
let markerLayer; // Marker layer

$(document).ready(function () {
    // Initialize the map
    initializeMap();

    // Set up address suggestions and interaction
    setupAutocomplete();
});

function initializeMap() {
    // Define the map projection
    proj4.defs('EPSG:2193', "+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");
    ol.proj.proj4.register(proj4);

    // Default New Zealand bounds
    const bounds = [983515.7211, 4650500, 2120000.3527, 6300000];

    // Map view
    const view = new ol.View({
        projection: 'EPSG:2193',
        center: [1600000, 5400000], // Roughly center of NZ
        zoom: 6,
        extent: bounds,
    });

    // Map layers
    const googleMapsLayer = new ol.layer.Tile({
        source: new ol.source.XYZ({
            url: `https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&hl=en&gl=en&key=YOUR_GOOGLE_MAPS_API_KEY`, // Replace with your key
        }),
    });

    vectorSource = new ol.source.Vector(); // Marker source
    markerLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
            image: new ol.style.Circle({
                radius: 8,
                fill: new ol.style.Fill({ color: 'red' }),
                stroke: new ol.style.Stroke({ color: 'white', width: 2 }),
            }),
        }),
    });

    // Initialize the map
    map = new ol.Map({
        target: 'map',
        layers: [googleMapsLayer, markerLayer],
        view: view,
    });
}

/*******************************************************************************
 * ADDRESS SEARCH BAR AND INTERACTION
 ******************************************************************************/
function setupAutocomplete() {
    const debounceSearch = debounce(async function (request, response) {
        var host = window.location.origin;

        // Show "Loading..." immediately
        response([{ label: "Loading addresses...", value: "", selectable: false }]);

        try {
            const data = await $.ajax({
                url: `${host}/addresses_suggestion_coordinates/`,
                dataType: "json",
                data: { query: request.term },
            });

            if (data.length === 0) {
                response([{ label: "No addresses found", value: "", selectable: false }]);
            } else {
                const limitedData = data.slice(0, 10); // Limit results
                response($.map(limitedData, function (item) {
                    return {
                        label: item.full_add_1,
                        value: item.full_add_1,
                        easting: item.easting,
                        northing: item.northing,
                        selectable: true,
                    };
                }));
            }
        } catch (error) {
            response([{ label: "Failed to fetch addresses", value: "", selectable: false }]);
        }
    }, 300); // Debounce for 300ms

    $("#address").on("input", function () {
        const term = $(this).val();
        if (term.length >= 3) {
            debounceSearch({ term: term }, function (suggestions) {
                const suggestionsList = suggestions.map(function (suggestion) {
                    if (suggestion.selectable) {
                        return `<a href="#" class="dropdown-item" data-easting="${suggestion.easting}" data-northing="${suggestion.northing}">${suggestion.label}</a>`;
                    } else {
                        return `<span class="dropdown-item text-muted">${suggestion.label}</span>`;
                    }
                }).join("");
                $("#suggestions").html(suggestionsList).show();
            });
        } else {
            $("#suggestions").hide();
        }
    });

    // Handle selection of an address
    $(document).on("click", "#suggestions .dropdown-item", function (e) {
        e.preventDefault();
        const easting = $(this).data("easting");
        const northing = $(this).data("northing");
        const fullAddress = $(this).text();

        // Update address input
        $("#address").val(fullAddress);

        $("#easting").val(easting);
        $("#northing").val(northing);

        // Show the location on the map
        updateMap(easting, northing);

        // Hide suggestions
        $("#suggestions").hide();
    });

    // Hide suggestions when clicking outside
    $(document).on("click", function (e) {
        if (!$(e.target).closest(".dropdown").length) {
            $("#suggestions").hide();
        }
    });
}

/*******************************************************************************
 * MAP INTERACTION
 ******************************************************************************/
function updateMap(easting, northing) {
    // Clear previous markers
    vectorSource.clear();

    // Add marker
    const pointFeature = new ol.Feature({
        geometry: new ol.geom.Point([easting, northing]),
    });
    vectorSource.addFeature(pointFeature);

    // Center and zoom
    map.getView().animate({
        center: [easting, northing],
        zoom: 15,
        duration: 1000,
    });
}

/*******************************************************************************
 * DEBOUNCE FUNCTION
 ******************************************************************************/
function debounce(func, wait) {
    let timeout;
    return function (...args) {
        const later = () => {
            clearTimeout(timeout);
            func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}



File: ./app/static/scripts/maps-google-screenshot.js
---------------------------------
/******************************************************************************
 * CONSTANTS
 ******************************************************************************/
let map;
var mapLayers = {};
var featureCache = {}; // Client-side cache for features
var vectorSource; // Define vectorSource at a global scope
let tooltipElement = document.createElement('div');
tooltipElement.className = 'poi-tooltip'; // Style this in CSS
tooltipElement.style.position = 'absolute';
tooltipElement.style.backgroundColor = '#ffffff';
tooltipElement.style.padding = '10px'; // Increased padding for better spacing
tooltipElement.style.width = '200px'; // Set a fixed width for consistency
tooltipElement.style.border = '1px solid #ccc';
tooltipElement.style.borderRadius = '5px';
tooltipElement.style.boxShadow = '0px 2px 5px rgba(0,0,0,0.3)';
tooltipElement.style.pointerEvents = 'none';
tooltipElement.style.lineHeight = '1.5'; // Improve readability
tooltipElement.style.fontSize = '14px'; // Slightly larger font
tooltipElement.style.display = 'none'; // Initially hidden

// Add the tooltip overlay to the map
const tooltipOverlay = new ol.Overlay({
    element: tooltipElement,
    offset: [10, -10],
    positioning: 'bottom-left',
});

var noAddressFound = {
    label: "no address found", 
    value: undefined 
}
/*******************************************************************************
 * ADDRESS SEARCH BAR 
 ******************************************************************************/
$(function() {
    setupAutocomplete();
});

function debounce(func, wait) {
    let timeout;
    return function(...args) {
        const later = () => {
            clearTimeout(timeout);
            func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

async function setupAutocomplete() {
    const debounceSearch = debounce(async function(request, response) {
        var host = window.location.origin;

        // Show "Address Loading..." suggestion immediately
        response([{ label: "Address Loading...", value: "", selectable: false }]);

        try {
            const data = await $.ajax({
                url: `${host}/addresses_suggestion_coordinates/`,
                dataType: "json",
                data: { query: request.term }
            });

            if (data.length === 0) {
                response([{ label: "No addresses found", value: "", selectable: false }]);
            } else {
                // Limit the suggestions to 10 and map the data
                var limitedData = data.slice(0, 10);
                response($.map(limitedData, function(item) {
                    return {
                        label: item.full_add_1,
                        value: item.full_add_1,
                        limitedData: item,
                        selectable: true
                    };
                }));
            }
        } catch (error) {
            response([{ label: "Failed to fetch addresses", value: "", selectable: false }]);
        }
    }, 300);

    $("#search").on("input", function() {
        const term = $(this).val();
        if (term.length >= 3) {
            debounceSearch({ term: term }, function(suggestions) {
                const suggestionsList = suggestions.map(function(suggestion) {
                    if (suggestion.selectable) {
                        return `<a href="#" class="dropdown-item" data-address-id="${suggestion.limitedData.address_id}" data-full-address="${suggestion.label}" data-easting="${suggestion.limitedData.easting}" data-northing="${suggestion.limitedData.northing}">${suggestion.label}</a>`;
                    } else {
                        return `<span class="dropdown-item text-muted">${suggestion.label}</span>`;
                    }
                }).join("");
                $("#suggestions").html(suggestionsList).show();
            });
        } else {
            $("#suggestions").hide();
        }
    });

    $(document).on("click", "#suggestions .dropdown-item", function(e) {
        e.preventDefault();
        const fullAddress = $(this).data("full-address");
        const addressId = $(this).data("address-id");
        const easting = $(this).data("easting");
        const northing = $(this).data("northing");

        // Use sendCoordinatesToServer with the address
        sendCoordinatesToServer(easting, northing, fullAddress);

        // Show the point on the map and zoom to it
        showPointOnMap(easting, northing);

        // Clear the input field to allow for a new search
        $("#search").val("");
        $("#suggestions").hide();
    });

    // Hide suggestions when clicking outside
    $(document).on("click", function(e) {
        if (!$(e.target).closest(".dropdown").length) {
            $("#suggestions").hide();
        }
    });
}

async function fetchAndWriteEntitlements(properties) {
    const url = `${window.location.origin}/check_entitlement_no_roll/`;
    const property = {
        address: properties.full_add_1,
        address_id: String(properties.address_id) // Ensure address_id is a string
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(property)
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        const filteredEntries = Object.entries(data).filter(([key, value]) => value !== null && value !== 'null');
        const filteredData = Object.fromEntries(filteredEntries);
        addDataCard(properties.full_add_1, filteredData);

    } catch (error) {
        console.error("Error fetching entitlements:", error);
        addDataCard(properties.full_add_1, null);
    }
}

function addDataCard(address, data) {
    const container = document.getElementById("entitlements");
    const cardHtml = `
        <div class="address-card card">
            <div class="card-body">
                <div style="margin-bottom: 10px;">
                    <p><strong>Address: </strong><span>${address}</span></p>
                </div>
                ${data ? formatDataAsHTML(data) : "<p class='text-muted'>No entitlement data available</p>"}
            </div>
        </div>
    `;
    container.insertAdjacentHTML('afterbegin', cardHtml); // Insert at the top
}

function formatDataAsHTML(data) {
    return Object.entries(data).map(([key, value]) => {
        return `<p style="margin: 2px 0;"><strong>${key}:</strong> <span>${value}</span></p>`; // Value is within a <span> for separate styling
    }).join('');
}

function showPointOnMap(easting, northing) {
    // Clear previous point features
    vectorSource.clear();

    // Create a point feature at the given coordinates
    var pointFeature = new ol.Feature({
        geometry: new ol.geom.Point([easting, northing])
    });

    // Add the point feature to the vector source
    vectorSource.addFeature(pointFeature);

    // Zoom to the point
    map.getView().animate({
        center: [easting, northing],
        zoom: 12,
        duration: 1000
    });
}





/*******************************************************************************
 * MAP
 ******************************************************************************/
$(document).ready(async function () {
    $("#clear").click(function () {
        $("#entitlements").html("");
        vectorSource.clear(); // Clear the dots
        if (mapLayers['Meshblock']) {
            map.removeLayer(mapLayers['Meshblock']);
            delete mapLayers['Meshblock'];
        }
    });

    // Define the projection using Proj4js
    proj4.defs(
        'EPSG:2193',
        "+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
    );
    ol.proj.proj4.register(proj4);

    // Define the bounds for New Zealand in EPSG:2193 coordinates
    var bounds = [983515.7211, 4650500, 2120000.3527, 6300000];

    // Create an OpenLayers projection instance for EPSG:2193
    var projection = new ol.proj.Projection({
        code: 'EPSG:2193',
        units: 'm',
        extent: bounds
    });

    // Specify resolutions for the tile grid
    var resolutions = [8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5];

    // Create the map view with the custom projection and tile grid
    var view = new ol.View({
        projection: projection,
        center: ol.extent.getCenter(bounds), // Center the map on New Zealand
        zoom: 6, // Initial zoom
        minZoom: 1, // Allow zooming out beyond bounds
        maxZoom: 15,
        constrainResolution: false // Allow smoother zoom levels
    });




    // Your Google Maps API key
    const apiKey = await fetchApiKey();
    if (!apiKey) {
        console.error("Failed to fetch the API key.");
        return;
    }

    // Google Maps layer
    var googleMapsLayer = new ol.layer.Tile({
        source: new ol.source.XYZ({
            url: `https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&hl=en&gl=en&key=${apiKey}`
        })
    });

    // Blue background for areas outside New Zealand bounds
    var blueBackgroundLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
            features: [
                new ol.Feature({
                    geometry: new ol.geom.Polygon([[
                        [bounds[0] - 2000000, bounds[1] - 2000000], // Larger bottom-left area
                        [bounds[2] + 2000000, bounds[1] - 2000000], // Larger bottom-right
                        [bounds[2] + 2000000, bounds[3] + 2000000], // Larger top-right
                        [bounds[0] - 2000000, bounds[3] + 2000000], // Larger top-left
                        [bounds[0] - 2000000, bounds[1] - 2000000]  // Close the polygon
                    ]])
                })
            ]
        }),
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: '#78D5E9' // Sky blue for the "ocean" background
            })
        }),
        zIndex: 0 // Ensure it stays below all other layers
    });

    // Initialize the OpenLayers map with the view and layers
    map = new ol.Map({
        target: 'map', // The id of your map container
        layers: [blueBackgroundLayer, googleMapsLayer],
        view: view
    });


    map.on('moveend', function () {
        const currentExtent = map.getView().calculateExtent(map.getSize());
        const expandedExtent = [
            currentExtent[0] - 500000, currentExtent[1] - 500000,
            currentExtent[2] + 500000, currentExtent[3] + 500000
        ];
    
        // Update the blue background layer geometry to always fill the visible area
        blueBackgroundLayer.getSource().clear();
        blueBackgroundLayer.getSource().addFeature(new ol.Feature({
            geometry: new ol.geom.Polygon([[
                [expandedExtent[0], expandedExtent[1]], // Bottom-left
                [expandedExtent[2], expandedExtent[1]], // Bottom-right
                [expandedExtent[2], expandedExtent[3]], // Top-right
                [expandedExtent[0], expandedExtent[3]], // Top-left
                [expandedExtent[0], expandedExtent[1]]  // Close the polygon
            ]])
        }));
    });

    // Automatically fit the map to the bounds with padding
    map.getView().fit(bounds, {
        size: map.getSize(), // Get the current size of the map
        padding: [10, 10, 10, 10] // Padding to ensure visibility
    });

    // Create a vector source to hold the point features
    vectorSource = new ol.source.Vector({
        features: []
    });

    // Create a vector layer to display the point features
    var vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
            image: new ol.style.Circle({
                radius: 10,
                fill: new ol.style.Fill({ color: 'red' }),
                stroke: new ol.style.Stroke({
                    color: 'red',
                    width: 2
                })
            })
        })
    });
    map.addLayer(vectorLayer);

    map.addOverlay(tooltipOverlay);


    // Function to handle map click events
    map.on('singleclick', function (event) {
        // Clear previous point features
        vectorSource.clear();

        // Get the coordinates directly from the event, already in EPSG:2193
        var coords = event.coordinate;
        var easting = coords[0];
        var northing = coords[1];

        // Create a point feature at the clicked location
        var pointFeature = new ol.Feature({
            geometry: new ol.geom.Point([easting, northing])
        });

        // Add the point feature to the vector source
        vectorSource.addFeature(pointFeature);

        // Zoom to the point
        map.getView().animate({
            center: [easting, northing],
            zoom: 15,
            duration: 500
        });
        // Call the server endpoint to send the coordinates
        sendCoordinatesToServer(easting, northing);
    });

    // Custom zoom controls
    document.querySelector('.ol-zoom-in').addEventListener('click', function () {
        var zoom = view.getZoom();
        view.setZoom(zoom + 1);
    });

    document.querySelector('.ol-zoom-out').addEventListener('click', function () {
        var zoom = view.getZoom();
        view.setZoom(zoom - 1);
    });

    document.querySelector('.ol-rotate-reset').addEventListener('click', function () {
        view.setZoom(view.getMinZoom()); // Reset to minimum zoom
    });
    
    hideLoadingModal();
});


/*******************************************************************************
 * LOADING MODAL
 ******************************************************************************/

function showLoadingModal() {
    document.getElementById('loadingModal').style.display = 'flex';
}

function hideLoadingModal() {
    document.getElementById('loadingModal').style.display = 'none';
}


/*******************************************************************************
 * GETTING INFO FROM THE MAP VIA MOUSE CLICKS
 ******************************************************************************/

async function sendCoordinatesToServer(easting, northing, fullAddress = null) {
    const url = `${window.location.origin}/get_entitlement_coordinates/`;
    const params = new URLSearchParams({
        easting: easting,
        northing: northing
    });

    try {
        const response = await fetch(`${url}?${params.toString()}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Network response was not ok: ${response.status} - ${errorText}`);
        }

        const data = await response.json();

        if (!data) {
            throw new Error("Response data is null or undefined");
        }

        const filteredEntries = Object.entries(data).filter(([key, value]) => value !== null && value !== 'null');
        const filteredData = Object.fromEntries(filteredEntries);

        const combinedData = combineNameAndCode(filteredData);

        // Call reverse geocode API to get the address
        let addressLabel = await getReverseGeocodedAddress(easting, northing, fullAddress);

        // If reverse geocode didn't return an address, fall back to easting and northing
        if (!addressLabel) {
            addressLabel = fullAddress ? fullAddress : `Easting: ${easting}, Northing: ${northing}`;
        }

        addDataCard(addressLabel, combinedData);

        // Remove existing Meshblock layer if it exists
        if (mapLayers['Meshblock']) {
            map.removeLayer(mapLayers['Meshblock']);
            delete mapLayers['Meshblock'];
        }

        // Display the geometry on the map if present
        if (data.geometry) {
            addLayerToMap(data.geometry, 'Meshblock');
        }

    } catch (error) {
        console.error("Error fetching entitlements:", error);
        addDataCard(fullAddress ? fullAddress : `Easting: ${easting}, Northing: ${northing}`, null);
    }
}


async function getReverseGeocodedAddress(easting, northing, fullAddress = null) {
    const reverseGeocodeUrl = `${window.location.origin}/reverse_geocode/`;
    const params = new URLSearchParams({
        easting: easting,
        northing: northing
    });

    try {
        const response = await fetch(`${reverseGeocodeUrl}?${params.toString()}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Reverse geocoding failed: ${response.status} - ${errorText}`);
        }

        const reverseGeocodeData = await response.json();
        if (reverseGeocodeData && reverseGeocodeData.full_address) {
            return reverseGeocodeData.full_address;  // Use the returned address
        } else {
            return null;  // Return null if no address is found
        }

    } catch (error) {
        console.error("Error reverse geocoding:", error);
        return null;  // Return null if there's an error
    }
}



function combineNameAndCode(data) {
    const combinedData = {};
    const mappings = {
        "District/City Council": "District/City Council Num Code",
        "General Ward": "General Ward Num Code",
        "Maori Ward": "Maori Ward Num Code",
        "Local Board Area": "Local Board Area Num Code",
        "Community Board": "Community Board Num Code",
        "Subdivision": "Subdivision Num Code",
        "Regional Council": "Regional Council Num Code",
        "General Constituency": "General Constituency Num Code",
        "Maori Constituency": "Maori Constituency Num Code",
        "Licensing Trust": "Licensing Trust Num Code"
    };

    for (const [nameKey, numKey] of Object.entries(mappings)) {
        if (data[nameKey] && data[numKey]) {
            const formattedNum = nameKey === "Licensing Trust" 
                ? data[numKey] // Skip formatting for "Licensing Trust"
                : formatNumberCode(data[numKey]);
            combinedData[nameKey] = `${data[nameKey]} (${formattedNum})`;
        } else if (data[nameKey]) {
            combinedData[nameKey] = data[nameKey];
        }
    }

    // Handle Meshblock separately
    if (data["Meshblock"]) {
        combinedData["Meshblock"] = data["Meshblock"];
    }


    if (data["General Form Code"]) {
        combinedData["General Form Code"] = data["General Form Code"];
    }
    if (data["Maori Form Code"]) {
        combinedData["Maori Form Code"] = data["Maori Form Code"];
    }
    
    // Check if both form codes are absent
    if (!data["General Form Code"] && !data["Maori Form Code"]) {
        combinedData["Form Code"] = " N/A Not an IEL Council";
    }


    return combinedData;
}

function formatNumberCode(numCode) {
    // Take the last two digits and retain leading zeros
    return numCode.slice(-2);
}



 // Ensure the map container has a height
 document.addEventListener("DOMContentLoaded", function() {
    var mapContainer = document.getElementById('map');
    if (mapContainer) {
        mapContainer.style.height = "calc(100vh - 150px)";
    }
});



/*******************************************************************************
 * LAYERS
 ******************************************************************************/
function toggleFeatureOnMap(checked, featureId, featureName) {
    const layer = mapLayers[featureName]; // Access the layer associated with the featureName
    if (!layer) {
        console.error(`Layer not found for featureName: ${featureName}`);
        return;
    }

    const source = layer.getSource();
    const features = source.getFeatures();
    const feature = features.find(f => f.getId() === featureId);

    if (feature) {
        // Update the 'visible' property based on the checkbox status
        feature.set('visible', checked);

        // Trigger a layer redraw to reflect visibility changes
        layer.changed();

        console.log(`Feature with ID ${featureId} visibility set to: ${checked}`);
    } else {
        console.warn(`Feature with ID ${featureId} not found in layer ${featureName}`);
    }
}




function displayFeatures(featureName, featuresData) {
    const featureContainer = document.getElementById('feature-checkboxes');
    featureContainer.innerHTML = ''; // Clear existing checkboxes before adding new ones

    // Sorting logic
    featuresData.sort((a, b) => {
        const nameKeyA = Object.keys(a.properties).find(key => key.endsWith('_name_ascii') || key.endsWith('_name') || key === 'name');
        const nameKeyB = Object.keys(b.properties).find(key => key.endsWith('_name_ascii') || key.endsWith('_name') || key === 'name');
        
        const nameA = nameKeyA ? a.properties[nameKeyA] : '';
        const nameB = nameKeyB ? b.properties[nameKeyB] : '';

        // "Area Outside" goes to the bottom
        const isAreaOutsideA = nameA.startsWith('Area Outside');
        const isAreaOutsideB = nameB.startsWith('Area Outside');

        if (isAreaOutsideA && !isAreaOutsideB) return 1;
        if (!isAreaOutsideA && isAreaOutsideB) return -1;

        // Alphabetical sort for the rest
        return nameA.localeCompare(nameB);
    });

    // Create checkboxes
    featuresData.forEach(feature => {
        const nameKey = Object.keys(feature.properties).find(key => key.endsWith('_name_ascii') || key.endsWith('_name') || key === 'name');
        const labelContent = nameKey ? feature.properties[nameKey] : 'No name available';

        const featureCheckbox = document.createElement('input');
        featureCheckbox.type = 'checkbox';
        featureCheckbox.checked = true; // Ensure checkboxes are checked by default
        featureCheckbox.id = `checkbox-${feature.id}`;
        featureCheckbox.onchange = () => toggleFeatureOnMap(featureCheckbox.checked, feature.id, featureName);

        const label = document.createElement('label');
        label.htmlFor = featureCheckbox.id;
        label.textContent = labelContent;

        const wrapper = document.createElement('div');
        wrapper.classList.add('checkbox-item'); // Add styling class for layout
        wrapper.appendChild(featureCheckbox);
        wrapper.appendChild(label);

        featureContainer.appendChild(wrapper);
    });

    // Make the container visible if it was previously hidden
    featureContainer.style.display = 'block';
}





async function handleCheckboxChange(featureName, isChecked, category = null) {
    try {
        showLoadingModal(); // Show loading modal

        const selectedYear = document.getElementById("yearSelect").value;
        const featureContainer = document.getElementById('feature-container'); // Reference to the container
        const cacheKey = category ? `${featureName}_${category}_${selectedYear}` : `${featureName}_${selectedYear}`;

        // Show the container when a checkbox is checked
        if (isChecked) {
            featureContainer.style.display = 'block'; // Make the container visible
        }

        if (isChecked) {
            if (featureName === "POI") { 
                // POI-specific handling
                await handlePOILayer(featureName, category, selectedYear, cacheKey);
            } else { 
                // Handling other geographic features
                console.log(`Loading features for: ${featureName}`);
                await handleGeographicFeatureLayer(featureName, selectedYear, cacheKey);
            }
        } else {
            // Handling the unchecking of a category
            removeFeatureLayer(featureName, category);

            // Hide the container if no features are checked
            const anyChecked = Array.from(document.querySelectorAll('.category-checkbox')).some(checkbox => checkbox.checked);
            if (!anyChecked) {
                featureContainer.style.display = 'none';
            }
        }
    } catch (error) {
        console.error("Error handling checkbox change:", error);
    } finally {
        hideLoadingModal(); // Hide loading modal
    }
}


function toggleSelectAllFeatures(checked) {
    const featureCheckboxes = document.querySelectorAll('#feature-checkboxes input[type="checkbox"]');
    featureCheckboxes.forEach((checkbox) => {
        if (checkbox.checked !== checked) {
            checkbox.checked = checked;
            // Trigger the onchange event for each checkbox
            checkbox.dispatchEvent(new Event('change'));
        }
    });
}




function removeFeatureLayer(featureName, category = null) {
    const layerKey = category ? `${category}` : featureName;
    const layer = mapLayers[layerKey];

    if (layer) {
        map.removeLayer(layer);
        delete mapLayers[layerKey];
        console.log(`Layer removed for ${layerKey}`);
    } else {
        console.warn(`No layer found for ${layerKey}`);
        console.log('Available layers in mapLayers:', Object.keys(mapLayers));
    }

    const featureContainer = document.getElementById('feature-checkboxes');
    if (featureContainer) {
        featureContainer.innerHTML = '';
        console.log(`Cleared checkboxes for ${layerKey}`);
    }
}




async function handlePOILayer(featureName, category, selectedYear, cacheKey) {
    if (featureCache[cacheKey]) {
        addPOILayerToMap(featureCache[cacheKey], category);
    } else {
        const url = `/POI/${selectedYear}/places_of_interest?category=${encodeURIComponent(category)}`;
        console.log("Fetching POI data from:", url);
        const response = await fetch(url);
        const data = await response.json();
        if (data && data.locations) {
            featureCache[cacheKey] = data.locations; // Cache the POI data
            addPOILayerToMap(data.locations, category);
        } else {
            console.error("No POI data available for:", category);
        }
    }
}


async function handleGeographicFeatureLayer(featureName, selectedYear, cacheKey) {
    console.log(`handleGeographicFeatureLayer called with: featureName=${featureName}, selectedYear=${selectedYear}, cacheKey=${cacheKey}`);
    if (featureCache[cacheKey]) {
        console.log(`Using cached data for featureName: ${featureName}`);
        addLayerToMap(featureCache[cacheKey], featureName);
        displayFeatures(featureName, featureCache[cacheKey].features); // Use cached data
    } else {
        console.log(`Fetching GeoJSON data for featureName: ${featureName}`);
        const data = await fetchGeoJsonData(featureName, selectedYear);
        if (data) {
            console.log(`Data fetched for featureName: ${featureName}, caching and adding layer`);
            featureCache[cacheKey] = data; // Cache the data
            addLayerToMap(data, featureName);
            displayFeatures(featureName, data.features); // Pass the features directly
        } else {
            console.error(`No data to add for ${featureName}`);
        }
    }
}




function removeLayerFromMap(featureName) {
    console.log(`removeLayerFromMap called with featureName=${featureName}`);
    var layer = mapLayers[featureName];
    if (layer) {
        map.removeLayer(layer);
        delete mapLayers[featureName];
        console.log(`Layer removed for featureName: ${featureName}`);
    } else {
        console.log(`No layer found for featureName: ${featureName}`);
    }
}

async function displayAdditionalCheckboxes(featureName, year) {
    const featureContainer = document.getElementById(`${featureName}-features`);
    try {
        const response = await fetch(`/${selectedYear}/get_geojson/`);
        const data = await response.json();
        featureContainer.innerHTML = ''; // Clear previous entries

        // Helper function to get the feature's name
        const getName = (feature) => {
            const key = Object.keys(feature.properties).find(
                (key) => key.endsWith('_name_ascii') || key.endsWith('_name') || key === 'name'
            );
            return key ? feature.properties[key] : '';
        };

        // Debug: Log the names before sorting
        console.log("Before sorting:", data.features.map(getName));

        // Sort the features
        const sortedFeatures = data.features.sort((a, b) => {
            const nameA = getName(a) || '';
            const nameB = getName(b) || '';

            // Move "Area Outside" features to the bottom
            const isAreaOutsideA = nameA.startsWith('Area Outside');
            const isAreaOutsideB = nameB.startsWith('Area Outside');

            if (isAreaOutsideA && !isAreaOutsideB) return 1;
            if (!isAreaOutsideA && isAreaOutsideB) return -1;

            // Sort alphabetically for the rest
            return nameA.localeCompare(nameB, undefined, { sensitivity: 'base' });
        });

        // Debug: Log the names after sorting
        console.log("After sorting:", sortedFeatures.map(getName));

        // Generate checkboxes
        sortedFeatures.forEach((feature) => {
            const featureCheckbox = document.createElement('input');
            featureCheckbox.type = 'checkbox';
            featureCheckbox.id = feature.id;
            featureCheckbox.onchange = () => toggleFeatureOnMap(featureCheckbox.checked, feature.id); // Assuming a function to toggle visibility on the map

            const label = document.createElement('label');
            label.htmlFor = featureCheckbox.id;

            const nameKey = Object.keys(feature.properties).find(
                (key) => key.endsWith('_name_ascii') || key.endsWith('_name') || key === 'name'
            );
            const labelContent = nameKey ? feature.properties[nameKey] : 'No name available';
            label.textContent = labelContent;

            const wrapper = document.createElement('div');
            wrapper.classList.add('checkbox-item'); // Add styling class for layout
            wrapper.appendChild(featureCheckbox);
            wrapper.appendChild(label);

            featureContainer.appendChild(wrapper);
        });

        $(featureContainer).slideDown(); // Use jQuery for a slide effect
    } catch (error) {
        console.error('Error fetching feature data:', error);
        featureContainer.innerHTML = ''; // Ensure clean up on error
    }
}





async function fetchApiKey() {
    const response = await fetch('/Map/api-key', {
        headers: {
            'Authorization': `Bearer expected_token` // Replace with your actual token
        }
    });
    const data = await response.json();
    return data.api_key;
}


async function fetchGeoJsonData(featureName) {
    const selectedYear = document.getElementById("yearSelect").value;
    let url;
    if (featureName === "LT") {
        url = `${window.location.origin}/live/getgeojson/`;
    } else {
        url = `${window.location.origin}/${selectedYear}/get_geojson/`;
    }



    if (!featureName) {
        alert('Feature name is required but not provided.');
        return null;
    }

    if(featureName )

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ feature: featureName })
        });

        // Check if the response is not OK
        if (!response.ok) {
            try {
                const errorResponse = await response.json(); // Parse the response as JSON
                alert(errorResponse.message); // Show only the error message
            } catch (error) {
                // Fallback for non-JSON responses
                const fallbackMessage = await response.text();
                alert(`Failed to fetch GeoJSON data: ${response.status} - ${fallbackMessage}`);
            }
            // Uncheck the associated checkbox
            document.querySelector(`input[type="checkbox"][data-feature="${featureName}"]`).checked = false;
            return null;
        }

        const geoJsonData = await response.json();

        // Validate GeoJSON format
        if (
            geoJsonData &&
            geoJsonData.type === 'FeatureCollection' &&
            Array.isArray(geoJsonData.features)
        ) {
            return geoJsonData; // Return valid GeoJSON data
        } else {
            alert('Invalid GeoJSON data received');
            // Uncheck the associated checkbox
            document.querySelector(`input[type="checkbox"][data-feature="${featureName}"]`).checked = false;
            return null;
        }
    } catch (error) {
        alert(`Error fetching GeoJSON data: ${error.message}`);
        // Uncheck the associated checkbox
        document.querySelector(`input[type="checkbox"][data-feature="${featureName}"]`).checked = false;
        return null;
    }
}













function createMarkerCanvas(color) {
    const canvas = document.createElement('canvas');
    canvas.width = 32; // Pin width
    canvas.height = 48; // Pin height

    const ctx = canvas.getContext('2d');

    // Draw the map pin shape
    ctx.beginPath();
    ctx.moveTo(16, 44); // Bottom point of the pin
    ctx.bezierCurveTo(4, 28, 4, 8, 16, 8); // Left curve
    ctx.bezierCurveTo(28, 8, 28, 28, 16, 44); // Right curve
    ctx.closePath();
    ctx.fillStyle = color;
    ctx.fill();

    // Optional: Add a border
    ctx.lineWidth = 2;
    ctx.strokeStyle = '#ffffff'; // White border for visibility
    ctx.stroke();

    // Draw a highlight circle at the top for emphasis
    ctx.beginPath();
    ctx.arc(16, 16, 6, 0, 2 * Math.PI, false); // Circle at the top
    ctx.fillStyle = '#ffffff';
    ctx.fill();

    return canvas.toDataURL(); // Convert the canvas to a data URL
}



function getColorSettings(featureName, feature) {
    // Base color mappings for different feature types
    const baseColorMapping = {
        'Councils': { stroke: 'darkblue', fill: 'rgba(139, 56, 200, 0.1)' },
        'Wards': { stroke: 'green', fill: 'rgba(0, 255, 0, 0.1)' },
        'Subdivisions': { stroke: 'red', fill: 'rgba(255, 0, 0, 0.1)' },
        'Regional Council': { stroke: 'purple', fill: 'rgba(128, 0, 128, 0.1)' },
        'General Constituency': { stroke: 'orange', fill: 'rgba(255, 165, 0, 0.1)' },
        'Maori Wards': { stroke: 'gray', fill: 'rgba(128, 128, 128, 0.1)' },
        'Maori Constituency': { stroke: 'yellow', fill: 'rgba(255, 255, 0, 0.1)' },
        'LT': { stroke: 'magenta', fill: 'rgba(255, 0, 255, 0.1)' },
        'Local Board': { stroke: 'cyan', fill: 'rgba(0, 255, 255, 0.1)' },
        'Community Board': { stroke: 'maroon', fill: 'rgba(128, 0, 0, 0.1)' },
        'Meshblock': { stroke: 'blue', fill: 'rgba(0, 0, 255, 0.1)' }
    };

    // Optionally adjust colors based on specific properties
    if (feature.get('specificProperty')) {
        // Example of customizing colors based on a property value
        return { stroke: 'black', fill: 'rgba(200, 200, 200, 0.5)' };
    }

    // Return the default colors from the base mapping if available
    return baseColorMapping[featureName] || { stroke: 'black', fill: 'rgba(200, 200, 200, 0.5)' };
}





function addPOILayerToMap(locations, category) {
    if (!category) {
        console.warn("Category is undefined in addPOILayerToMap. Using 'default'.");
        category = "default";
    }

    const vectorSource = new ol.source.Vector();
    const styleCache = {};

    locations.forEach(location => {
        const { easting, northing } = location.coordinates || {};
        if (!easting || !northing) {
            console.warn("Skipping location due to missing coordinates:", location);
            return;
        }

        const feature = new ol.Feature({
            geometry: new ol.geom.Point([easting, northing]),
            name: location.name,
            address: location.address,
            localBoard: location.local_board,
            color: location.color || "#0000FF",
        });

        vectorSource.addFeature(feature);
    });

    const styleFunction = function (feature) {
        const color = feature.get("color") || "#0000FF";
        if (!styleCache[color]) {
            const iconUrl = createMarkerCanvas(color);
            styleCache[color] = new ol.style.Style({
                image: new ol.style.Icon({
                    src: iconUrl,
                    scale: 1,
                    anchor: [0.5, 1],
                    anchorXUnits: "fraction",
                    anchorYUnits: "fraction",
                }),
            });
        }
        return styleCache[color];
    };

    const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: styleFunction,
    });

    map.addLayer(vectorLayer);
    mapLayers[category] = vectorLayer; // Use category as the key
    console.log("POI Layer Added:", category);

    // Add hover interaction for tooltips
    map.on('pointermove', function (event) {
        const pixel = map.getEventPixel(event.originalEvent);
        const feature = map.forEachFeatureAtPixel(pixel, function (feature) {
            return feature;
        });
    
        if (tooltipElement && feature && feature.get('name') && feature.get('address')) {
            tooltipElement.innerHTML = `<strong>${feature.get('name')}</strong><br><strong>${feature.get('localBoard')}</strong><br>${feature.get('address')}`;
            tooltipElement.style.display = 'block';
            tooltipOverlay.setPosition(event.coordinate);
        } else if (tooltipElement) {
            tooltipElement.style.display = 'none';
        }
    });
}






function removePOILayerFromMap(category) {
    if (!category) {
        console.warn("Category is undefined for layer removal.");
        return;
    }

    const vectorLayer = mapLayers[category];

    if (vectorLayer) {
        map.removeLayer(vectorLayer); // Remove the layer from the map
        delete mapLayers[category]; // Remove it from the dictionary
        console.log(`Removed layer: ${category}`);
    } else {
        console.warn(`Layer for '${category}' not found in mapLayers.`);
    }

    console.log("Current layers in mapLayers:", Object.keys(mapLayers));
}




function addLayerToMap(geojsonData, featureName) {
    try {
        // Create vector source and read features from GeoJSON data
        const vectorSource = new ol.source.Vector({
            features: new ol.format.GeoJSON().readFeatures(geojsonData, {
                dataProjection: 'EPSG:2193',
                featureProjection: 'EPSG:2193',
            }),
        });

        // Initialize all features as visible
        vectorSource.getFeatures().forEach((feature) => {
            feature.set('visible', true); // Add 'visible' property to features
        });

        // Create vector layer
        const vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            declutter: true, // Helps prevent overlapping labels
            style: function (feature) {
                // Skip rendering features that are marked as not visible
                if (feature.get('visible') === false) {
                    return null;
                }

                // Get color settings based on feature type or properties
                const { stroke, fill } = getColorSettings(featureName, feature);

                // Define dynamic styling, including labels
                const properties = feature.getProperties();
                let featureLabel = '';

                // Dynamically find the label key (_name_ascii or name)
                for (const key in properties) {
                    if (key.endsWith('_name_ascii') || key === 'name') {
                        featureLabel = properties[key];
                        break;
                    }
                }

                // Create the style for visible features
                const baseStyle = new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: stroke,
                        width: 2,
                    }),
                    fill: new ol.style.Fill({
                        color: fill,
                    }),
                });

                if (featureLabel) {
                    baseStyle.setText(
                        new ol.style.Text({
                            text: featureLabel,
                            font: 'bold 16px Calibri,sans-serif', // Increase font size and make it bold
                            fill: new ol.style.Fill({ color: stroke }), // Use the feature's border color for the text fill
                            stroke: new ol.style.Stroke({ color: 'white', width: 4 }), // Increase stroke width for better visibility
                            offsetY: -10, // Slightly offset the label above the feature for better visibility
                        })
                    );
                }

                return baseStyle;
            },
        });

        // Add the layer to the map
        map.addLayer(vectorLayer);

        // Save the layer to the global mapLayers object for future reference
        mapLayers[featureName] = vectorLayer;

        console.log(`Layer added for ${featureName}`);
    } catch (e) {
        console.error('Error adding layer to map:', e);
    }
}



function removeLayerFromMap(featureName, featureId = null) {
    if (featureId) {
        // Removing a specific feature layer
        const featureKey = `${featureName}_${featureId}`;
        const layer = mapLayers[featureKey];

        if (layer) {
            map.removeLayer(layer); // Remove the specific feature's layer
            delete mapLayers[featureKey]; // Delete from the mapLayers object
            console.log(`Layer removed for feature: ${featureKey}`);
        } else {
            console.log(`No layer found for feature: ${featureKey}`);
        }
    } else {
        // Removing the entire category layer
        const layer = mapLayers[featureName];

        if (layer) {
            map.removeLayer(layer); // Remove the layer from the map
            delete mapLayers[featureName]; // Delete from the mapLayers object
            console.log(`Layer removed for category: ${featureName}`);
        } else {
            console.log(`No layer found for category: ${featureName}`);
        }
    }

    // Log the current layers for debugging
    console.log("Remaining layers in mapLayers:", Object.keys(mapLayers));
}



File: ./app/static/scripts/calculator.js
---------------------------------
$(document).ready(function () {
    const ratepayerAddressInput = $("#ratepayerAddressInput");
    const residentialAddressInput = $("#residentialAddressInput");
    setupAutocomplete();


    
    function setupAutocomplete() {
        // Autocomplete for ratepayer address input
        ratepayerAddressInput.autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/addresses_suggestion/",
                    dataType: "json",
                    data: { query: request.term },
                    success: function (data) {
                        if (data.length === 0) {
                            response([{ label: "No address found", value: "", selectable: false }]);
                        } else {
                            response($.map(data, function (item) {
                                return { label: item.full_add_1, value: item.full_add_1, data: item, selectable: true };
                            }));
                        }
                    },
                    error: function () {
                        response([{ label: "Loading address...", value: "", selectable: false }]);
                    }
                });
            },
            select: function (event, ui) {
                if (ui.item.selectable) {
                    event.preventDefault();
                    addAddressToRatepayerDisplay(ui.item.data)
                    fetchAndStoreEntitlements(ui.item.data, null, 'Ratepayer');
                    ratepayerAddressInput.val('');
                } else {
                    ratepayerAddressInput.val('');
                    selectedAddressData = null;  // Clear stored data as the selection is invalid
                }
                return false;
            }
        });
        

        // Autocomplete for residential address input
        residentialAddressInput.autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/addresses_suggestion/",
                    dataType: "json",
                    data: { query: request.term },
                    success: function (data) {
                        if (data.length === 0) {
                            response([{ label: "No address found", value: "", selectable: false }]);
                        } else {
                            response($.map(data, function (item) {
                                // Modify the property name from full_add_1 to address
                                item.address = item.full_add_1;
                                return {
                                    label: item.address,
                                    value: item.address,
                                    data: item,  // Pass the entire modified item as part of the response
                                    selectable: true
                                };
                            }));
                        }
                    },
                    
                    error: function () {
                        // Similarly, do not use a selectable option for errors
                        response([{ label: "Loading address...", value: "", selectable: false }]);
                    }
                });
            },
            select: function (event, ui) {
                if (ui.item.selectable) {
                    event.preventDefault(); // Prevent the default action
                    residentialAddressInput.val(ui.item.value); // Set the input to the address string
                    displaySelectedAddress(ui.item.data, 'Residential');
                    fetchAndStoreEntitlements(ui.item.data, null, 'Residential');
                    residentialAddressInput.prop('disabled', true);
                } else {
                    residentialAddressInput.val('').focus();
                }
                return false; // Ensure no other default behavior happens
            }
        });
    }


    function displaySelectedAddress(property, propertyType) {
        // Display selected address based on propertyType
        if (propertyType === 'Residential') {
            $('.residentialCarddisplay').html(generateResidentialCard(property.address));
        } else {
            addAddressToRatepayerDisplay(address);
        }
    }
    function generateResidentialCard(address) {
        // Generate residential address card content
        const cardContent = `
            <div class="address-card" data-address="${address}">
                <p style="font-size: smaller;">RATEPAYER’S RESIDENTIAL ADDRESS:</p>
                ${address}
                <button class="remove-card-button">X</button>
            </div>
        `;
        return cardContent;
    }
    async function fetchAndStoreEntitlements(address, assessmentNumber, propertyType) {
        // Fetch and store entitlements
        const rollType = $('input[name="rollType"]:checked').val();
        const properties = {
            address: address.full_add_1,
            address_id: address.address_id,
            rollType: rollType,
            assessmentNumber: assessmentNumber || null,
            propertyType: propertyType,
            full_entitlements: null,
            isClient: null
        };
        try {
            const response = await fetch('/add_property', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(properties)
            });
            const data = await response.json();
        } catch (error) {
            console.error('Error sending data to server:', error);
        }
    }

    function addAddressToRatepayerDisplay(data) {
        const cardContent = generateRatepayerCardContent(data.full_add_1 || data.address);
        $('#selectedRatepayerAddresses').append(cardContent);
    }

    function generateRatepayerCardContent(address) {
        let cardContent = `<li class="address-card" data-address="${address}">
            <p style="font-size: smaller; margin-bottom: 5px">RATEPAYER’S NON-RESIDENT PROPERTY ADDRESS:</p>
            ${address}`;
        cardContent += ' <button class="remove-card-button">X</button></li>';
        return cardContent;
    }

    $(document).on('click', '.remove-card-button', function () {
        const addressCard = $(this).closest('.address-card');
        const address = addressCard.data('address');
        removeAddressFromSession(address, addressCard);
    });

    function removeAddressFromSession(address, addressCard) {
        // Remove address from session
        if (address) {
            $.ajax({
                url: '/remove_property',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({ address_to_remove: address }),
                success: function (data) {
                    addressCard.remove();
                    // Check if the removed address was the residential address
                    if ($('#residentialAddressInput').val() === address) {
                        // Reactivate and clear the residential input field
                        $('#residentialAddressInput').prop('disabled', false).val('');
                    }
                },
                error: function (error) {
                    console.error('Error:', error);
                }
            });
        } else {
            console.error('No address found for removal');
        }
    }

});


File: ./app/static/scripts/maps-google.js
---------------------------------
/******************************************************************************
 * CONSTANTS
 ******************************************************************************/
let map;
var mapLayers = {};
var featureCache = {}; // Client-side cache for features
var vectorSource; // Define vectorSource at a global scope
let tooltipElement = document.createElement('div');
tooltipElement.className = 'poi-tooltip'; // Style this in CSS
tooltipElement.style.position = 'absolute';
tooltipElement.style.backgroundColor = '#ffffff';
tooltipElement.style.padding = '10px'; // Increased padding for better spacing
tooltipElement.style.width = '200px'; // Set a fixed width for consistency
tooltipElement.style.border = '1px solid #ccc';
tooltipElement.style.borderRadius = '5px';
tooltipElement.style.boxShadow = '0px 2px 5px rgba(0,0,0,0.3)';
tooltipElement.style.pointerEvents = 'none';
tooltipElement.style.lineHeight = '1.5'; // Improve readability
tooltipElement.style.fontSize = '14px'; // Slightly larger font
tooltipElement.style.display = 'none'; // Initially hidden

// Add the tooltip overlay to the map
const tooltipOverlay = new ol.Overlay({
    element: tooltipElement,
    offset: [10, -10],
    positioning: 'bottom-left',
});

var noAddressFound = {
    label: "no address found", 
    value: undefined 
}
/*******************************************************************************
 * ADDRESS SEARCH BAR 
 ******************************************************************************/
$(function() {
    setupAutocomplete();
});

function debounce(func, wait) {
    let timeout;
    return function(...args) {
        const later = () => {
            clearTimeout(timeout);
            func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

async function setupAutocomplete() {
    const debounceSearch = debounce(async function(request, response) {
        var host = window.location.origin;

        // Show "Address Loading..." suggestion immediately
        response([{ label: "Address Loading...", value: "", selectable: false }]);

        try {
            const data = await $.ajax({
                url: `${host}/addresses_suggestion_coordinates/`,
                dataType: "json",
                data: { query: request.term }
            });

            if (data.length === 0) {
                response([{ label: "No addresses found", value: "", selectable: false }]);
            } else {
                // Limit the suggestions to 10 and map the data
                var limitedData = data.slice(0, 10);
                response($.map(limitedData, function(item) {
                    return {
                        label: item.full_add_1,
                        value: item.full_add_1,
                        limitedData: item,
                        selectable: true
                    };
                }));
            }
        } catch (error) {
            response([{ label: "Failed to fetch addresses", value: "", selectable: false }]);
        }
    }, 300);

    $("#search").on("input", function() {
        const term = $(this).val();
        if (term.length >= 3) {
            debounceSearch({ term: term }, function(suggestions) {
                const suggestionsList = suggestions.map(function(suggestion) {
                    if (suggestion.selectable) {
                        return `<a href="#" class="dropdown-item" data-address-id="${suggestion.limitedData.address_id}" data-full-address="${suggestion.label}" data-easting="${suggestion.limitedData.easting}" data-northing="${suggestion.limitedData.northing}">${suggestion.label}</a>`;
                    } else {
                        return `<span class="dropdown-item text-muted">${suggestion.label}</span>`;
                    }
                }).join("");
                $("#suggestions").html(suggestionsList).show();
            });
        } else {
            $("#suggestions").hide();
        }
    });

    $(document).on("click", "#suggestions .dropdown-item", function(e) {
        e.preventDefault();
        const fullAddress = $(this).data("full-address");
        const addressId = $(this).data("address-id");
        const easting = $(this).data("easting");
        const northing = $(this).data("northing");

        // Use sendCoordinatesToServer with the address
        sendCoordinatesToServer(easting, northing, fullAddress);

        // Show the point on the map and zoom to it
        showPointOnMap(easting, northing);

        // Clear the input field to allow for a new search
        $("#search").val("");
        $("#suggestions").hide();
    });

    // Hide suggestions when clicking outside
    $(document).on("click", function(e) {
        if (!$(e.target).closest(".dropdown").length) {
            $("#suggestions").hide();
        }
    });
}

async function fetchAndWriteEntitlements(properties) {
    const url = `${window.location.origin}/check_entitlement_no_roll/`;
    const property = {
        address: properties.full_add_1,
        address_id: String(properties.address_id) // Ensure address_id is a string
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(property)
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        const filteredEntries = Object.entries(data).filter(([key, value]) => value !== null && value !== 'null');
        const filteredData = Object.fromEntries(filteredEntries);
        addDataCard(properties.full_add_1, filteredData);

    } catch (error) {
        console.error("Error fetching entitlements:", error);
        addDataCard(properties.full_add_1, null);
    }
}

function addDataCard(address, data) {
    const container = document.getElementById("entitlements");
    const cardHtml = `
        <div class="address-card card">
            <div class="card-body">
                <div style="margin-bottom: 10px;">
                    <p><strong>Address: </strong><span>${address}</span></p>
                </div>
                ${data ? formatDataAsHTML(data) : "<p class='text-muted'>No entitlement data available</p>"}
            </div>
        </div>
    `;
    container.insertAdjacentHTML('afterbegin', cardHtml); // Insert at the top
}

function formatDataAsHTML(data) {
    return Object.entries(data).map(([key, value]) => {
        return `<p style="margin: 2px 0;"><strong>${key}:</strong> <span>${value}</span></p>`; // Value is within a <span> for separate styling
    }).join('');
}

function showPointOnMap(easting, northing) {
    // Clear previous point features
    vectorSource.clear();

    // Create a point feature at the given coordinates
    var pointFeature = new ol.Feature({
        geometry: new ol.geom.Point([easting, northing])
    });

    // Add the point feature to the vector source
    vectorSource.addFeature(pointFeature);

    // Zoom to the point
    map.getView().animate({
        center: [easting, northing],
        zoom: 12,
        duration: 1000
    });
}





/*******************************************************************************
 * MAP
 ******************************************************************************/
$(document).ready(async function () {
    $("#clear").click(function () {
        $("#entitlements").html("");
        vectorSource.clear(); // Clear the dots
        if (mapLayers['Meshblock']) {
            map.removeLayer(mapLayers['Meshblock']);
            delete mapLayers['Meshblock'];
        }
    });

    // Define the projection using Proj4js
    proj4.defs(
        'EPSG:2193',
        "+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
    );
    ol.proj.proj4.register(proj4);

    // Define the bounds for New Zealand in EPSG:2193 coordinates
    var bounds = [983515.7211, 4650500, 2120000.3527, 6300000];

    // Create an OpenLayers projection instance for EPSG:2193
    var projection = new ol.proj.Projection({
        code: 'EPSG:2193',
        units: 'm',
        extent: bounds
    });

    // Specify resolutions for the tile grid
    var resolutions = [8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5];

    // Create the map view with the custom projection and tile grid
    var view = new ol.View({
        projection: projection,
        center: ol.extent.getCenter(bounds), // Center the map on New Zealand
        zoom: 6, // Initial zoom
        minZoom: 1, // Allow zooming out beyond bounds
        maxZoom: 15,
        constrainResolution: false // Allow smoother zoom levels
    });




    // Your Google Maps API key
    const apiKey = await fetchApiKey();
    if (!apiKey) {
        console.error("Failed to fetch the API key.");
        return;
    }

    // Google Maps layer
    var googleMapsLayer = new ol.layer.Tile({
        source: new ol.source.XYZ({
            url: `https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&hl=en&gl=en&key=${apiKey}`
        })
    });

    // Blue background for areas outside New Zealand bounds
    var blueBackgroundLayer = new ol.layer.Vector({
        source: new ol.source.Vector({
            features: [
                new ol.Feature({
                    geometry: new ol.geom.Polygon([[
                        [bounds[0] - 2000000, bounds[1] - 2000000], // Larger bottom-left area
                        [bounds[2] + 2000000, bounds[1] - 2000000], // Larger bottom-right
                        [bounds[2] + 2000000, bounds[3] + 2000000], // Larger top-right
                        [bounds[0] - 2000000, bounds[3] + 2000000], // Larger top-left
                        [bounds[0] - 2000000, bounds[1] - 2000000]  // Close the polygon
                    ]])
                })
            ]
        }),
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: '#78D5E9' // Sky blue for the "ocean" background
            })
        }),
        zIndex: 0 // Ensure it stays below all other layers
    });

    // Initialize the OpenLayers map with the view and layers
    map = new ol.Map({
        target: 'map', // The id of your map container
        layers: [blueBackgroundLayer, googleMapsLayer],
        view: view
    });


    map.on('moveend', function () {
        const currentExtent = map.getView().calculateExtent(map.getSize());
        const expandedExtent = [
            currentExtent[0] - 500000, currentExtent[1] - 500000,
            currentExtent[2] + 500000, currentExtent[3] + 500000
        ];
    
        // Update the blue background layer geometry to always fill the visible area
        blueBackgroundLayer.getSource().clear();
        blueBackgroundLayer.getSource().addFeature(new ol.Feature({
            geometry: new ol.geom.Polygon([[
                [expandedExtent[0], expandedExtent[1]], // Bottom-left
                [expandedExtent[2], expandedExtent[1]], // Bottom-right
                [expandedExtent[2], expandedExtent[3]], // Top-right
                [expandedExtent[0], expandedExtent[3]], // Top-left
                [expandedExtent[0], expandedExtent[1]]  // Close the polygon
            ]])
        }));
    });

    // Automatically fit the map to the bounds with padding
    map.getView().fit(bounds, {
        size: map.getSize(), // Get the current size of the map
        padding: [10, 10, 10, 10] // Padding to ensure visibility
    });

    // Create a vector source to hold the point features
    vectorSource = new ol.source.Vector({
        features: []
    });

    // Create a vector layer to display the point features
    var vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: new ol.style.Style({
            image: new ol.style.Circle({
                radius: 10,
                fill: new ol.style.Fill({ color: 'red' }),
                stroke: new ol.style.Stroke({
                    color: 'red',
                    width: 2
                })
            })
        })
    });
    map.addLayer(vectorLayer);

    map.addOverlay(tooltipOverlay);


    // Function to handle map click events
    map.on('singleclick', function (event) {
        // Clear previous point features
        vectorSource.clear();

        // Get the coordinates directly from the event, already in EPSG:2193
        var coords = event.coordinate;
        var easting = coords[0];
        var northing = coords[1];

        // Create a point feature at the clicked location
        var pointFeature = new ol.Feature({
            geometry: new ol.geom.Point([easting, northing])
        });

        // Add the point feature to the vector source
        vectorSource.addFeature(pointFeature);

        // Zoom to the point
        map.getView().animate({
            center: [easting, northing],
            zoom: 15,
            duration: 500
        });
        // Call the server endpoint to send the coordinates
        sendCoordinatesToServer(easting, northing);
    });

    // Custom zoom controls
    document.querySelector('.ol-zoom-in').addEventListener('click', function () {
        var zoom = view.getZoom();
        view.setZoom(zoom + 1);
    });

    document.querySelector('.ol-zoom-out').addEventListener('click', function () {
        var zoom = view.getZoom();
        view.setZoom(zoom - 1);
    });

    document.querySelector('.ol-rotate-reset').addEventListener('click', function () {
        view.setZoom(view.getMinZoom()); // Reset to minimum zoom
    });
    
    hideLoadingModal();
});


/*******************************************************************************
 * LOADING MODAL
 ******************************************************************************/

function showLoadingModal() {
    document.getElementById('loadingModal').style.display = 'flex';
}

function hideLoadingModal() {
    document.getElementById('loadingModal').style.display = 'none';
}


/*******************************************************************************
 * GETTING INFO FROM THE MAP VIA MOUSE CLICKS
 ******************************************************************************/

async function sendCoordinatesToServer(easting, northing, fullAddress = null) {
    const url = `${window.location.origin}/get_entitlement_coordinates/`;
    const params = new URLSearchParams({
        easting: easting,
        northing: northing
    });

    try {
        const response = await fetch(`${url}?${params.toString()}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Network response was not ok: ${response.status} - ${errorText}`);
        }

        const data = await response.json();

        if (!data) {
            throw new Error("Response data is null or undefined");
        }

        const filteredEntries = Object.entries(data).filter(([key, value]) => value !== null && value !== 'null');
        const filteredData = Object.fromEntries(filteredEntries);

        const combinedData = combineNameAndCode(filteredData);

        // Call reverse geocode API to get the address
        let addressLabel = await getReverseGeocodedAddress(easting, northing, fullAddress);

        // If reverse geocode didn't return an address, fall back to easting and northing
        if (!addressLabel) {
            addressLabel = fullAddress ? fullAddress : `Easting: ${easting}, Northing: ${northing}`;
        }

        addDataCard(addressLabel, combinedData);

        // Remove existing Meshblock layer if it exists
        if (mapLayers['Meshblock']) {
            map.removeLayer(mapLayers['Meshblock']);
            delete mapLayers['Meshblock'];
        }

        // Display the geometry on the map if present
        if (data.geometry) {
            addLayerToMap(data.geometry, 'Meshblock');
        }

    } catch (error) {
        console.error("Error fetching entitlements:", error);
        addDataCard(fullAddress ? fullAddress : `Easting: ${easting}, Northing: ${northing}`, null);
    }
}


async function getReverseGeocodedAddress(easting, northing, fullAddress = null) {
    const reverseGeocodeUrl = `${window.location.origin}/reverse_geocode/`;
    const params = new URLSearchParams({
        easting: easting,
        northing: northing
    });

    try {
        const response = await fetch(`${reverseGeocodeUrl}?${params.toString()}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Reverse geocoding failed: ${response.status} - ${errorText}`);
        }

        const reverseGeocodeData = await response.json();
        if (reverseGeocodeData && reverseGeocodeData.full_address) {
            return reverseGeocodeData.full_address;  // Use the returned address
        } else {
            return null;  // Return null if no address is found
        }

    } catch (error) {
        console.error("Error reverse geocoding:", error);
        return null;  // Return null if there's an error
    }
}



function combineNameAndCode(data) {
    const combinedData = {};
    const mappings = {
        "District/City Council": "District/City Council Num Code",
        "General Ward": "General Ward Num Code",
        "Maori Ward": "Maori Ward Num Code",
        "Local Board Area": "Local Board Area Num Code",
        "Community Board": "Community Board Num Code",
        "Subdivision": "Subdivision Num Code",
        "Regional Council": "Regional Council Num Code",
        "General Constituency": "General Constituency Num Code",
        "Maori Constituency": "Maori Constituency Num Code",
        "Licensing Trust": "Licensing Trust Num Code"
    };

    for (const [nameKey, numKey] of Object.entries(mappings)) {
        if (data[nameKey] && data[numKey]) {
            const formattedNum = nameKey === "Licensing Trust" 
                ? data[numKey] // Skip formatting for "Licensing Trust"
                : formatNumberCode(data[numKey]);
            combinedData[nameKey] = `${data[nameKey]} (${formattedNum})`;
        } else if (data[nameKey]) {
            combinedData[nameKey] = data[nameKey];
        }
    }

    // Handle Meshblock separately
    if (data["Meshblock"]) {
        combinedData["Meshblock"] = data["Meshblock"];
    }


    if (data["General Form Code"]) {
        combinedData["General Form Code"] = data["General Form Code"];
    }
    if (data["Maori Form Code"]) {
        combinedData["Maori Form Code"] = data["Maori Form Code"];
    }
    
    // Check if both form codes are absent
    if (!data["General Form Code"] && !data["Maori Form Code"]) {
        combinedData["Form Code"] = "Non-IESL Client/No Combination";
    }


    return combinedData;
}

function formatNumberCode(numCode) {
    // Take the last two digits and retain leading zeros
    return numCode.slice(-2);
}



 // Ensure the map container has a height
 document.addEventListener("DOMContentLoaded", function() {
    var mapContainer = document.getElementById('map');
    if (mapContainer) {
        mapContainer.style.height = "calc(100vh - 150px)";
    }
});



/*******************************************************************************
 * LAYERS
 ******************************************************************************/

async function handleCheckboxChange(featureName, isChecked, category = null) {
    try {
        showLoadingModal(); // Show loading modal

        // Get the selected year from the dropdown
        const selectedYear = document.getElementById("yearSelect").value;

        // Ensure category is defined for POI
        if (featureName === "POI" && !category) {
            console.warn("Category is required for POI but not provided. Using 'default'.");
            category = "default";
        }

        const cacheKey = category
            ? `${featureName}_${category}_${selectedYear}`
            : `${featureName}_${selectedYear}`;

        if (isChecked) {
            // Logic for POI layers
            if (featureName === "POI") {
                if (featureCache[cacheKey]) {
                    addPOILayerToMap(featureCache[cacheKey], category);
                } else {
                    const url = `/POI/${selectedYear}/places_of_interest?category=${encodeURIComponent(category)}`;
                    console.log("Fetching POI data from:", url);

                    const response = await fetch(url);
                    const data = await response.json();

                    if (data && data.locations) {
                        featureCache[cacheKey] = data.locations; // Cache the POI data
                        addPOILayerToMap(data.locations, category);
                    } else {
                        console.error("No POI data available for:", category);
                    }
                }
            } else {
                // Logic for non-POI layers
                if (featureCache[cacheKey]) {
                    addLayerToMap(featureCache[cacheKey], featureName);
                } else {
                    const data = await fetchGeoJsonData(featureName, selectedYear);
                    if (data) {
                        featureCache[cacheKey] = data; // Cache the data
                        addLayerToMap(data, featureName);
                    } else {
                        console.error(`No data to add for ${featureName}`);
                    }
                }
            }
        } else {
            // Uncheck logic
            if (featureName === "POI") {
                removePOILayerFromMap(category);
            } else {
                removeLayerFromMap(featureName);
            }
        }
    } catch (error) {
        console.error("Error handling checkbox change:", error);
    } finally {
        hideLoadingModal(); // Hide loading modal
    }
}




async function fetchApiKey() {
    const response = await fetch('/Map/api-key', {
        headers: {
            'Authorization': `Bearer expected_token` // Replace with your actual token
        }
    });
    const data = await response.json();
    return data.api_key;
}


async function fetchGeoJsonData(featureName) {
    const selectedYear = document.getElementById("yearSelect").value;
    let url;
    if (featureName === "LT") {
        url = `${window.location.origin}/live/getgeojson/`;
    } else {
        url = `${window.location.origin}/${selectedYear}/get_geojson/`;
    }



    if (!featureName) {
        alert('Feature name is required but not provided.');
        return null;
    }

    if(featureName )

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ feature: featureName })
        });

        // Check if the response is not OK
        if (!response.ok) {
            try {
                const errorResponse = await response.json(); // Parse the response as JSON
                alert(errorResponse.message); // Show only the error message
            } catch (error) {
                // Fallback for non-JSON responses
                const fallbackMessage = await response.text();
                alert(`Failed to fetch GeoJSON data: ${response.status} - ${fallbackMessage}`);
            }
            // Uncheck the associated checkbox
            document.querySelector(`input[type="checkbox"][data-feature="${featureName}"]`).checked = false;
            return null;
        }

        const geoJsonData = await response.json();

        // Validate GeoJSON format
        if (
            geoJsonData &&
            geoJsonData.type === 'FeatureCollection' &&
            Array.isArray(geoJsonData.features)
        ) {
            return geoJsonData; // Return valid GeoJSON data
        } else {
            alert('Invalid GeoJSON data received');
            // Uncheck the associated checkbox
            document.querySelector(`input[type="checkbox"][data-feature="${featureName}"]`).checked = false;
            return null;
        }
    } catch (error) {
        alert(`Error fetching GeoJSON data: ${error.message}`);
        // Uncheck the associated checkbox
        document.querySelector(`input[type="checkbox"][data-feature="${featureName}"]`).checked = false;
        return null;
    }
}













function createMarkerCanvas(color) {
    const canvas = document.createElement('canvas');
    canvas.width = 32; // Pin width
    canvas.height = 48; // Pin height

    const ctx = canvas.getContext('2d');

    // Draw the map pin shape
    ctx.beginPath();
    ctx.moveTo(16, 44); // Bottom point of the pin
    ctx.bezierCurveTo(4, 28, 4, 8, 16, 8); // Left curve
    ctx.bezierCurveTo(28, 8, 28, 28, 16, 44); // Right curve
    ctx.closePath();
    ctx.fillStyle = color;
    ctx.fill();

    // Optional: Add a border
    ctx.lineWidth = 2;
    ctx.strokeStyle = '#ffffff'; // White border for visibility
    ctx.stroke();

    // Draw a highlight circle at the top for emphasis
    ctx.beginPath();
    ctx.arc(16, 16, 6, 0, 2 * Math.PI, false); // Circle at the top
    ctx.fillStyle = '#ffffff';
    ctx.fill();

    return canvas.toDataURL(); // Convert the canvas to a data URL
}






function addPOILayerToMap(locations, category) {
    if (!category) {
        console.warn("Category is undefined in addPOILayerToMap. Using 'default'.");
        category = "default";
    }

    const vectorSource = new ol.source.Vector();
    const styleCache = {};

    locations.forEach(location => {
        const { easting, northing } = location.coordinates || {};
        if (!easting || !northing) {
            console.warn("Skipping location due to missing coordinates:", location);
            return;
        }

        const feature = new ol.Feature({
            geometry: new ol.geom.Point([easting, northing]),
            name: location.name,
            address: location.address,
            localBoard: location.local_board,
            color: location.color || "#0000FF",
        });

        vectorSource.addFeature(feature);
    });

    const styleFunction = function (feature) {
        const color = feature.get("color") || "#0000FF";
        if (!styleCache[color]) {
            const iconUrl = createMarkerCanvas(color);
            styleCache[color] = new ol.style.Style({
                image: new ol.style.Icon({
                    src: iconUrl,
                    scale: 1,
                    anchor: [0.5, 1],
                    anchorXUnits: "fraction",
                    anchorYUnits: "fraction",
                }),
            });
        }
        return styleCache[color];
    };

    const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: styleFunction,
    });

    map.addLayer(vectorLayer);
    mapLayers[category] = vectorLayer; // Use category as the key
    console.log("POI Layer Added:", category);

    // Add hover interaction for tooltips
    map.on('pointermove', function (event) {
        const pixel = map.getEventPixel(event.originalEvent);
        const feature = map.forEachFeatureAtPixel(pixel, function (feature) {
            return feature;
        });
    
        if (tooltipElement && feature && feature.get('name') && feature.get('address')) {
            tooltipElement.innerHTML = `<strong>${feature.get('name')}</strong><br><strong>${feature.get('localBoard')}</strong><br>${feature.get('address')}`;
            tooltipElement.style.display = 'block';
            tooltipOverlay.setPosition(event.coordinate);
        } else if (tooltipElement) {
            tooltipElement.style.display = 'none';
        }
    });
}






function removePOILayerFromMap(category) {
    if (!category) {
        console.warn("Category is undefined for layer removal.");
        return;
    }

    const vectorLayer = mapLayers[category];

    if (vectorLayer) {
        map.removeLayer(vectorLayer); // Remove the layer from the map
        delete mapLayers[category]; // Remove it from the dictionary
        console.log(`Removed layer: ${category}`);
    } else {
        console.warn(`Layer for '${category}' not found in mapLayers.`);
    }

    console.log("Current layers in mapLayers:", Object.keys(mapLayers));
}


function addLayerToMap(geojsonData, featureName) {
    try {
        const baseColorMapping = {
            'Councils': { stroke: 'darkblue', fill: 'rgba(139, 56, 200, 0.1)' },
            'Wards': { stroke: 'green', fill: 'rgba(0, 255, 0, 0.1)' },
            'Subdivisions': { stroke: 'red', fill: 'rgba(255, 0, 0, 0.1)' },
            'Regional Council': { stroke: 'purple', fill: 'rgba(128, 0, 128, 0.1)' },
            'General Constituency': { stroke: 'orange', fill: 'rgba(255, 165, 0, 0.1)' },
            'Maori Wards': { stroke: 'gray', fill: 'rgba(128, 128, 128, 0.1)' },
            'Maori Constituency': { stroke: 'yellow', fill: 'rgba(255, 255, 0, 0.1)' },
            'LT': { /* Will handle LT separately for unique colors */ },
            'Local Board': { stroke: 'magenta', fill: 'rgba(255, 0, 255, 0.1)' },
            'Community Board': { stroke: 'maroon', fill: 'rgba(128, 0, 0, 0.1)' },
            'Meshblock': { stroke: 'blue', fill: 'rgba(0, 0, 255, 0.1)' }
        };

        // Predefined list of colors to cycle through for features needing unique colors
        const uniqueColors = [
            { stroke: '#e6194b', fill: 'rgba(230, 25, 75, 0.3)' }, // Red
            { stroke: '#3cb44b', fill: 'rgba(60, 180, 75, 0.3)' }, // Green
            { stroke: '#ffe119', fill: 'rgba(255, 225, 25, 0.3)' }, // Yellow
            { stroke: '#4363d8', fill: 'rgba(67, 99, 216, 0.3)' }, // Blue
            { stroke: '#f58231', fill: 'rgba(245, 130, 49, 0.3)' }, // Orange
            { stroke: '#911eb4', fill: 'rgba(145, 30, 180, 0.3)' }, // Purple
            { stroke: '#46f0f0', fill: 'rgba(70, 240, 240, 0.3)' }, // Cyan
            { stroke: '#f032e6', fill: 'rgba(240, 50, 230, 0.3)' }, // Magenta
            { stroke: '#9a6324', fill: 'rgba(154, 99, 36, 0.3)' }, // Brown
            { stroke: '#800000', fill: 'rgba(128, 0, 0, 0.3)' },   // Maroon
            { stroke: '#000075', fill: 'rgba(0, 0, 117, 0.3)' },   // Navy
            // Add more vibrant colors as needed
        ];
        

        // Function to generate a color based on a feature's unique property
        function getUniqueColor(feature) {
            const uniqueProperty = feature.get('id') || feature.get('name') || feature.get('unique_id'); // Adjust based on your data
            if (!uniqueProperty) {
                // Fallback color if no unique property is found
                return { stroke: 'gray', fill: 'rgba(128, 128, 128, 0.1)' };
            }

            // Simple hash function to generate a number based on the unique property
            let hash = 0;
            for (let i = 0; i < uniqueProperty.length; i++) {
                hash = uniqueProperty.charCodeAt(i) + ((hash << 5) - hash);
            }
            const index = Math.abs(hash) % uniqueColors.length;
            return uniqueColors[index];
        }

        const vectorSource = new ol.source.Vector({
            features: new ol.format.GeoJSON().readFeatures(geojsonData, {
                dataProjection: 'EPSG:2193',
                featureProjection: 'EPSG:2193'
            })
        });

        const vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            declutter: true, // Enable decluttering
            style: function(feature, resolution) {
                let colors;

                if (featureName === 'LT') {
                    // Assign unique colors for each LT feature
                    colors = getUniqueColor(feature);
                } else {
                    // Use base color mapping for other feature types
                    colors = baseColorMapping[featureName] || {
                        stroke: 'gray',
                        fill: 'rgba(128, 128, 128, 0.1)'
                    };
                }

                // Dynamically find the property with the suffix "_name_ascii"
                const properties = feature.getProperties();
                let featureLabel = '';

                for (const key in properties) {
                    if (key.endsWith('_name_ascii')) {
                        featureLabel = properties[key];
                        break;
                    } else if (key === 'name') { // Check if the key is exactly 'name'
                        featureLabel = properties[key];
                        break;
                    }
                }

                // Exclude labels that start with 'Area Outside'
                if (featureLabel.startsWith('Area Outside')) {
                    featureLabel = '';
                }

                // Remove ' Area' or ' Community' from the end of the label
                featureLabel = featureLabel.replace(/\s+(Area|Community)$/, '');

                // Style for the feature's geometry
                const featureStyle = new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: colors.stroke,
                        width: 2
                    }),
                    fill: new ol.style.Fill({
                        color: colors.fill
                    })
                });

                // If featureLabel is empty after processing, skip creating labelStyle
                let labelStyle = null;
                if (featureLabel) {
                    // Get centroid coordinates from properties
                    let centroidCoordinates = null;
                    if (properties.centroid && properties.centroid.type === 'Point') {
                        centroidCoordinates = properties.centroid.coordinates;
                    }

                    // Dynamic styling based on resolution
                    let fontSize;
                    let fontWeight = 'bold';
                    let strokeWidth;

                    if (resolution > 1000) {
                        fontSize = '8px';
                        strokeWidth = 2;
                    } else if (resolution <= 1000 && resolution > 500) {
                        fontSize = '10px';
                        strokeWidth = 3;
                    } else {
                        fontSize = '12px';
                        strokeWidth = 4;
                    }

                    // Style for the label
                    if (centroidCoordinates) {
                        const labelPoint = new ol.geom.Point(centroidCoordinates);

                        labelStyle = new ol.style.Style({
                            geometry: labelPoint,
                            text: new ol.style.Text({
                                text: featureLabel,
                                font: `${fontWeight} ${fontSize} Calibri,sans-serif`,
                                fill: new ol.style.Fill({ color: colors.stroke }),
                                stroke: new ol.style.Stroke({ color: '#fff', width: strokeWidth }),
                                overflow: true,
                            })
                        });
                    }
                }

                // Return the styles
                return labelStyle ? [featureStyle, labelStyle] : featureStyle;
            }
        });

        map.addLayer(vectorLayer);
        mapLayers[featureName] = vectorLayer;
        console.log(`Layer added for ${featureName}`);
    } catch (e) {
        console.error('Error adding layer to map:', e);
    }
}



function removeLayerFromMap(featureName) {
    var layer = mapLayers[featureName];
    if (layer) {
        map.removeLayer(layer);
        delete mapLayers[featureName];
       // console.log(`Layer removed for ${featureName}`);
    } else {
        console.log(`No layer found for ${featureName}`);
    }
}


File: ./app/static/scripts/entitlementBook.js
---------------------------------



File: ./app/static/scripts/color-palette.js
---------------------------------
document.addEventListener("DOMContentLoaded", function () {
    const colorInput = document.getElementById("color");
    const colorPalette = document.getElementById("color-palette");

    // Define your color palette
    const colors = [
        "#FF5733", "#33FF57", "#3357FF", "#F0E68C", "#800080",
        "#FFD700", "#008080", "#FF4500", "#1E90FF", "#32CD32",
        "#DC143C", "#8B4513", "#FF1493", "#20B2AA", "#808000",
        "#7CA295", "#BDD0CA", "#156570", "#E5ECEA", "#D6E342",
        "#ecf3ca", "#F7F9DB", "#D0E0E2", "#0e4249", "#9CDCD9",
        "#d5ecea", "#679BA2", "#4e4e4e", "#f1f3f3", "#0000FF",
        "#FF0000", "#008000"
    ];
    // Populate the color palette
    colors.forEach(color => {
        const colorWrapper = document.createElement("div");
        colorWrapper.className = "color-wrapper";
        colorWrapper.style.textAlign = "center";

        // Color circle
        const colorOption = document.createElement("div");
        colorOption.className = "color-option";
        colorOption.style.backgroundColor = color;
        colorOption.style.width = "30px";
        colorOption.style.height = "30px";
        colorOption.style.borderRadius = "50%";
        colorOption.style.margin = "0 auto";
        colorOption.style.cursor = "pointer";
        colorOption.title = color;

        // Label for the color
        const colorLabel = document.createElement("span");
        colorLabel.textContent = color;
        colorLabel.style.fontSize = "12px";
        colorLabel.style.display = "block";
        colorLabel.style.marginTop = "5px";

        // Append the circle and label to the wrapper
        colorWrapper.appendChild(colorOption);
        colorWrapper.appendChild(colorLabel);
        colorPalette.appendChild(colorWrapper);

        // Click event to set the selected color and hide the palette
        colorOption.addEventListener("click", function () {
            colorInput.value = color;
            colorPalette.classList.add("d-none");
        });
    });

    // Show/hide the palette when clicking the input field
    colorInput.addEventListener("click", function (e) {
        e.stopPropagation();
        colorPalette.classList.toggle("d-none");
    });

    // Hide the palette when clicking outside
    document.addEventListener("click", function (event) {
        if (!colorPalette.contains(event.target) && event.target !== colorInput) {
            colorPalette.classList.add("d-none");
        }
    });
});



File: ./app/static/styles/ies.css
---------------------------------
/* 
 * My attempt at having a nice IES styling across the webpage 
 *
 */

/* Import Roboto font family from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

:root {
    --ies-moss:          #7CA295;
    --ies-moss-light:    #BDD0CA;
    --ies-moss-dark:     #156570;
    --ies-moss-disabled: #E5ECEA;
    --ies-lime:          #D6E342;
    --ies-lime-light:    #ecf3ca;
    --ies-lime-mid:      #F7F9DB;
    --ies-aqua:          #156570;
    --ies-aqua-light:    #D0E0E2;
    --ies-aqua-hover:    #0e4249;
    --ies-mint:          #9CDCD9;
    --ies-mint-light:    #d5ecea;
    --ies-mint-dark:     #679BA2;
    --ies-grey:          #4e4e4e;
    --ies-grey-light:    #f1f3f3;

}

h1, h2, h3, h4, h5, h6 {
    font-family: "Roboto", sans-serif;
    color: var(--ies-aqua);
}

body {
    font-family: "Roboto", sans-serif;
    font-size: medium;
}

a:link       { color: var(--ies-blue); }
a:visited    { color: var(--ies-grey); }

html { 
    margin: 0;
    font-family: "Roboto", sans-serif;
}

.main-content {
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.top-section, .bottom-section {
    height: 50%;
}

.top-section {
    display: flex;
    flex-direction: row;
}

.left-section {
    width: 50%;
    margin: 5px;
    background-color: #ecf3ca;
    border-radius: 10px;
    padding: 20px;
}

.right-section {
    width: 50%;
    margin: 5px;
    background-color: #ecf3ca;
    padding: 20px;
    border-radius: 10px;
}

.header-container {
    background-color: var(--ies-aqua);
    display: flex;
    align-items: center;
    height: 100px;
    border-radius: 5px;
    flex-grow: 1;
}

.logo {
    height: 100px;
    width: auto;
    margin-left: 10px;
    padding: 5px;
}

.additional-image {
    width: 20%;
    margin-left: auto;
    height: 104%;
}

.container {
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 5px;
}

.header {
    display: flex;
    align-items: center;
    height: 100px;
    width: 100% !important;
}

h2 {
    margin-bottom: 1px; /* Adjust as needed */
}

li {
    margin: 5px;
}

.displaySelection {
    display: flex;
    flex-direction: row;
    align-items: center; /* Centers children vertically */
    margin: auto; /* Optional: Centers the .displaySelection in its parent container */
    width: 100%; /* Takes full width of its container */
    padding: 20px; /* Adds some space inside the container */
}

/* Styling for the dropdown */
#ta_name, .mesh {
    width: 50%;  /* Adjust width as needed */
    padding: 8px 10px;  /* Comfortable padding */
    font-size: 16px;  /* Legible text size */
    color: #333;  /* Dark grey text for better readability */
    background-color: #fff;  /* White background */
    border: 2px solid #ccc;  /* Subtle border */
    border-radius: 5px;  /* Rounded corners */
    outline: none;  /* Removes the outline, could be kept for accessibility */
    margin-right: 20px;
    margin-left: 20px;
}

/* Hover and focus effects */
#ta_name:hover, #ta_name:focus, .mesh:hover, .mesh:focus {
    border-color: #888;  /* Darker border on hover/focus */
    background-color: #f7f7f7;  /* Light grey background on hover/focus */
}

.addAddressButton {
    background-color: var(--ies-aqua);
    color: #000;
    border: none;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    width: 250px;
    height: 35px;
    font-weight: 700;
    filter: drop-shadow(4px 4px 4.899px rgba(0, 0, 0, 0.75));
    transition: all 0.3s ease;
}

.addAddressButton:hover, .addAddressButton:active {
    background-color: #a5bb00; /* Keeps the hover and active states consistent */
    box-shadow: none;
}

.addAddressButton:active {
    transform: translateY(2px);
}

#loadingSplash {
    position: fixed; /* Overlay the whole screen */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
    color: white;
    display: none;
    justify-content: center; /* Center horizontally */
    align-items: center; /* Center vertically */
    z-index: 1000; /* Make sure it is on top of other content */
    font-size: 24px;
}

.horizontal-divider-inner {
    border-top: 10px solid var(--ies-aqua);
    width: 100%;
    margin-bottom: 15px;
}


table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 10px;
    text-align: left;
}

th {
    background-color: var(--ies-aqua);
    color: white;
}

table tr:nth-child(odd) {
    background-color: #ffffff; 
}

table tr:nth-child(even) {
    background-color: var(--ies-moss-light) ;
}

.nested-table {
    width: 90%;
    margin-left: 5%;
}

/* Rotating loader styles */
.loader {
    border: 8px solid #f3f3f3; /* Light grey */
    border-top: 8px solid var(--ies-aqua); /* Green */
    border-radius: 50%;
    width: 45px;
    height: 45px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.content {
    display: flex;
    height: calc(100vh - 100px);
}

.sidebar-container {
    width: 30%;
    display: flex;
    flex-direction: column;
    pointer-events: auto;
}

.map-container {
    width: 100%;
    position: relative;
    padding-left: 5px !important;
    padding-right: 5px !important;
}

#map {
    width: 100%;
    height: 100%;
}

.sidebar-left, .sidebar-right {
    padding: 5px;
}

.sidebar-left {
    width: 100%;
}

.sidebar-right {
    width: 100%;
    overflow-y: auto;
    max-height: calc(100vh - 200px); /* Ensure the sidebar-right doesn't make the page scroll */
}


/* Style the scrollbar */
.sidebar-right::-webkit-scrollbar {
    width: 8px; /* Width of the scrollbar */
}

.sidebar-right::-webkit-scrollbar-track {
    background: #f1f1f1; /* Background of the scrollbar track */
    border-radius: 8px;
}

.sidebar-right::-webkit-scrollbar-thumb {
    background: #888; /* Color of the scrollbar thumb */
    border-radius: 8px; /* Rounded corners */
}

.sidebar-right::-webkit-scrollbar-thumb:hover {
    background: #555; /* Darker color on hover */
}



.dropdown-menu {
    position: absolute;
    z-index: 1000;
    display: none;
    background-color: #fff;
    border: 1px solid rgba(0,0,0,.15);
    border-radius: .25rem;
}

.address-card {
    margin-bottom: 15px;
    padding: 10px;
}

.address-card .card-body {
    padding: 5px;
    font-size: 0.8em; /* Reduce the text size in the address card */
}

.address-card strong {
    color: #333;
}

.ol-zoom {
    position: absolute;
    top: 10px; /* Adjust as needed */
    right: 10px; /* Position to the right */
    margin-left: 0; /* Remove left margin */
    display: flex;
    flex-direction: column;
}


.ol-zoom-in, .ol-zoom-out {
    background-color: var(--ies-aqua) !important;
    border: none !important;
    color: white !important;
    padding: 20px !important; /* Increased padding for bigger buttons */
    cursor: pointer !important;
    font-size: 24px !important; /* Increased font size for bigger buttons */
    margin-bottom: 5px !important; /* Spacing between buttons */
}

.ol-zoom-in:hover, .ol-zoom-out:hover {
    background-color: #b0c402 !important;
}

.ol-rotate-reset {
    position: absolute; /* Explicitly position the button */
    top: 200px; /* Adjust this value to place it below the zoom controls */
    right: 10px; /* Align with the right side */
    background-color: var(--ies-aqua) !important;
    border: none !important;
    color: white !important;
    cursor: pointer !important;
    font-size: 24px !important; /* Increased font size for bigger buttons */
    margin-bottom: 5px !important; /* Spacing between buttons */
    padding: 20px !important; /* Increased padding for bigger button */
}
.ol-rotate-reset:hover {
    background-color: #b0c402 !important;
}

/* Modal styles */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1000; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: hidden; /* Disable scroll */
    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
    display: flex; /* Use flexbox for centering */
    align-items: center; /* Center content vertically */
    justify-content: center; /* Center content horizontally */
}

.modal-content {
	display : flex;
	flex-direction : row;
	align-items: center; /* Center content vertically */
	justify-content: center; /* Center content horizontally */
	gap: 50px;
    background-color: #fefefe;
    padding: 20px;
    border: 1px solid #888;
    width: 50%; /* Could be more or less, depending on screen size */
    max-width: 600px; /* Optional: limits the max-width */
    text-align: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    border-radius: 8px;
}

.custom-card {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    background-color: #ffffff;
    padding: 16px;
    margin: 16px;
    color: var(--ies-aqua);

}

.custom-card-header {
    font-size: 2.2rem;
    margin-bottom: 8px;
    color: var(--ies-aqua);
}

.custom-list-group-item {
    padding: 0.2rem 0.5rem; /* Further reduce padding */
    font-size: 1 rem; /* Adjust font size to be smaller */
    background-color: #fff;
}

.btn-custom {
    background-color: var(--ies-aqua) !important; /* Static color */
    color: #ffffff !important;
    border: none !important;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1) !important;
    border-radius: 8px !important;
    cursor: pointer !important;
    font-size: 16px !important;
    max-width: 750px !important;
    height: 35px !important;
    font-weight: 700 !important;
    transition: all 0.3s ease !important;
    align-self: center;
}

.btn-custom:hover {
    background-color: var(--ies-moss) !important; /* Hover color */
}

.btn-custom:active {
    background-color: var(--ies-moss-light) !important; /* Pressed color */
    transform: translateY(2px) !important;
    color: #000000 !important;
}

.btn-custom:disabled {
    background-color: var(--ies-moss-disabled) !important; /* Disabled color */
    cursor: not-allowed !important;
    filter: none !important;
    box-shadow: none !important;
}



.registration-button {
    background-color: var(--ies-moss-dark);
    /* Same green color */
    color: white;
    /* Text color */
    padding: 10px 20px;
    /* Adjust padding as needed */
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-size: 16px;
    /* Adjust font size as needed */
    width: 200px;
    height: 40px;
    font-weight: 500;
    /* New drop shadow */
  }
  
  


  .color-option {
    display: inline-block;
    border: 1px solid #ccc;
    margin: 2px;
    transition: transform 0.2s ease-in-out;
}

.color-option:hover {
    transform: scale(1.2);
    border: 2px solid black;
}


#color-palette {
    position: absolute;
    background: #fff;
    z-index: 1000;
    border: 1px solid #ccc;
    padding: 10px;
    margin-top: 5px;
    display: grid;
    grid-template-columns: repeat(6, auto);
    grid-gap: 10px;
}




.collapse-button {
    background-color: #007bff;  /* Bootstrap primary color or choose your own */
    color: #fff;
    border: none;
    border-radius: 4px;
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .collapse-button:hover {
    background-color: #0069d9; /* Darker shade on hover */
  }
  


  .btn:hover i {
    color: #0056b3; /* Slightly darker shade on hover */
}

.btn i {
    transition: transform 0.3s ease;
  }
  
  .btn.collapsed i {
    transform: rotate(180deg);
  }
  



  #feature-container {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    background-color: #f9f9f9;
}

.checkbox-item {
    margin-bottom: 5px;
    display: flex;
    align-items: center;
}

#select-all-checkbox {
    margin-right: 5px;
}



File: ./app/static/styles/calculator.css
---------------------------------
/* 
 * My attempt at having a nice IES styling across the webpage 
 *
 */

 @font-face {
	font-family: "DINPro-Light";
	src: url("DINPro-Light.otf");
}

@font-face {
	font-family: "DINPro-Medium";
	src: url("DINPro-Medium.otf");
}

@font-face {
	font-family: "Vitesse-Light";
	src: url("Vitesse-Light.otf");
}

@font-face {
	font-family: "Vitesse-Medium";
	src: url("Vitesse-Light.otf");
}

:root {
	--ies-grey:		#83847A;
	--ies-green: 	#C9DD03;
	--ies-yellow: 	#FCD900;
	--ies-blue: 	#65CFE9;
}

h1, h2, h3, h4, h5, h6 {
	font-family: "Vitesse-Medium";
}

body {
	font-family: "DINPro-Light";
	font-size: medium;
}

a:link 		{ color: var(--ies-blue) 	}
a:visited 	{ color: var(--ies-grey) 	}




html, body { 
	margin: 0;
	padding: 10px;
	font-family: Arial, sans-serif;
}



.main-content {
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.top-section, .bottom-section {
    height: 50%;
}
.top-section{
    display: flex;
    flex-direction: row;
}
.left-section{
    width: 50%;
    margin: 5px;
    background-color: #ecf3ca;
    border-radius: 10px;
    padding: 20px;

}
.right-section{
    width: 50%;
    margin: 5px;
    background-color: #ecf3ca;
    padding: 20px;
    border-radius: 10px;

}


.header-container {
    background-color: #c9dd03;
    display: flex;
    align-items: center;
    height: 100px;
    border-radius: 5px;
    flex-grow: 1;
}
  
  .logo {
    height: 100px;
    width: 80px;
    margin-right: 10px;
  }
  
  .additional-image {
    width: 20%;
    margin-left: auto;
    height: 104%;
  }

  .container {
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 5px;
  }

  .header {
    display: flex;
    align-items: center;
    height: 100px;
    width: 100% !important;
  }








  


File: ./app/static/styles/entitlementBook.css
---------------------------------
/* 
 * My attempt at having a nice IES styling across the webpage 
 *
 */

 @font-face {
	font-family: "DINPro-Light";
	src: url("DINPro-Light.otf");
}

@font-face {
	font-family: "DINPro-Medium";
	src: url("DINPro-Medium.otf");
}

@font-face {
	font-family: "Vitesse-Light";
	src: url("Vitesse-Light.otf");
}

@font-face {
	font-family: "Vitesse-Medium";
	src: url("Vitesse-Light.otf");
}

:root {
	--ies-grey:		#83847A;
	--ies-green: 	#C9DD03;
	--ies-yellow: 	#FCD900;
	--ies-blue: 	#65CFE9;
}

h1, h2, h3, h4, h5, h6 {
	font-family: "Vitesse-Medium";
}

body {
	font-family: "DINPro-Light";
	font-size: medium;
}

a:link 		{ color: var(--ies-blue) 	}
a:visited 	{ color: var(--ies-grey) 	}




html, body { 
	margin: 0;
	font-family: Arial, sans-serif;
}





  
  .logo {
    height: 100px;
    width: 80px;
    margin-right: 10px;
  }
  
  .additional-image {
    width: 20%;
    margin-left: auto;
    height: 104%;
  }

  .container {
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 5px;
  }

  .header {
    display: flex;
    align-items: center;
    height: 100px;
    width: 100% !important;
  }
 


h2 {
  margin-bottom: 1px; /* Adjust as needed */
}



li{
  margin: 5px;
}

.displaySelection {
  display: flex;
  flex-direction: row;
  align-items: center; /* Centers children vertically */
  margin: auto; /* Optional: Centers the .displaySelection in its parent container */
  width: 100%; /* Takes full width of its container */
  padding: 20px; /* Adds some space inside the container */
}

/* Styling for the dropdown */
#ta_name {
  width: 50%;  /* Adjust width as needed */
  padding: 8px 10px;  /* Comfortable padding */
  font-size: 16px;  /* Legible text size */
  color: #333;  /* Dark grey text for better readability */
  background-color: #fff;  /* White background */
  border: 2px solid #ccc;  /* Subtle border */
  border-radius: 5px;  /* Rounded corners */
  cursor: pointer;  /* Indicates this is an interactive element */
  outline: none;  /* Removes the outline, could be kept for accessibility */
  margin-right: 20px;
  margin-left: 20px;
}

/* Hover and focus effects */
#ta_name:hover, #ta_name:focus {
  border-color: #888;  /* Darker border on hover/focus */
  background-color: #f7f7f7;  /* Light grey background on hover/focus */
}

/* Styles for options inside the dropdown */



.addAddressButton {
  background-color: #c9dd03;
  color: #000;
  border: none;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  width: 250px;
  height: 35px;
  font-weight: 700;
  filter: drop-shadow(4px 4px 4.899px rgba(0, 0, 0, 0.75));
  transition: all 0.3s ease;
}

.addAddressButton:hover, .addAddressButton:active {
  background-color: #a5bb00; /* Keeps the hover and active states consistent */
  box-shadow: none;
}

.addAddressButton:active {
  transform: translateY(2px);
}



#loadingSplash {
  position: fixed; /* Overlay the whole screen */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
  color: white;
  display: flex;
  justify-content: center; /* Center horizontally */
  align-items: center; /* Center vertically */
  z-index: 1000; /* Make sure it is on top of other content */
  font-size: 24px;
  display: flex;
}


table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}
th, td {
  padding: 10px;
  border: 1px solid #ccc;
  text-align: left;
}
th {
  background-color: #ecf3ca;
}
.nested-table {
  width: 90%;
  margin-left: 5%;
}



/* Rotating loader styles */
.loader {
  border: 8px solid #f3f3f3; /* Light grey */
  border-top: 8px solid #C9DD03; /* Blue */
  border-radius: 50%;
  width: 45px;
  height: 45px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}





  .mesh {
    width: 50%;  /* Adjust width as needed */
    padding: 8px 10px;  /* Comfortable padding */
    font-size: 16px;  /* Legible text size */
    color: #333;  /* Dark grey text for better readability */
    background-color: #fff;  /* White background */
    border: 2px solid #ccc;  /* Subtle border */
    border-radius: 5px;  /* Rounded corners */
    outline: none;  /* Removes the outline, could be kept for accessibility */
    margin-right: 20px;
    margin-left: 20px;
  }


File: ./app/static/styles/index.css
---------------------------------
.header-container {
    background-color: #c9dd03;
    display: flex;
    align-items: center;
    height: 100px;
    border-radius: 5px;
    flex-grow: 1;
}
  
  .logo {
    height: 100px;
    width: 80px;
    margin-right: 10px;
  }
  
  .additional-image {
    width: 15%;
    margin-left: auto;
    height: 104%;
  }

  .container {
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 5px;
    width: 100%;
  }

  .header {
    display: flex;
    align-items: center;
    height: 100px;
    width: 100% !important;
  }
.header h1 {
    padding: 20px;
}  

body {
    background-color: #ffffff;
    font-family: Arial, sans-serif;
}
.container-body{
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #ffffff;
    height: 80vh;

}
.button-container {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.select-button {
    padding: 20px;
    margin: 10px;
    border-radius: 10px;
    background-color: #c9dd03;
    border: none;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    transition: box-shadow 0.1s ease, transform 0.1s ease;
    cursor: pointer;
}

.select-button:hover {
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.3);
    transform: translateY(-2px);
}

.select-button:active {
    transform: translateY(2px);
    box-shadow: none;
}



File: ./app/services/by_TaID/get_subdivision_by_ta.py
---------------------------------
# services/get_subdivision_by_ta.py

from typing import List, Dict
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

# Import the Subdivision model factory function
from models.db_models import get_subdivision_model

async def get_community_subdivisions_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    """
    Retrieve the community subdivisions for a given TA.
    
    :param session: An instance of AsyncSession.
    :param ta_id: The ID of the Territorial Authority.
    :param year: The year schema to use.
    :return: A list of dictionaries containing the subdivision details.
    """
    # Get the Subdivision model for the given year
    SubdivisionModel = get_subdivision_model(year)
    
    # Build the query using SQLAlchemy
    query = (
        select(
            SubdivisionModel.tasub_v1_00.label('id'),
            SubdivisionModel.tasub_v1_00_name.label('name'),
            func.ST_AsText(SubdivisionModel.shape).label('geom'),
            SubdivisionModel.issue_type,
            SubdivisionModel.vacancies,
            SubdivisionModel.alpha_code.label('code')
        )
        .where(func.substr(SubdivisionModel.tasub_v1_00, 1, 3) == ta_id)
        .order_by(SubdivisionModel.tasub_v1_00)
    )
    
    # Execute the query asynchronously
    result = await session.execute(query)
    rows = result.fetchall()
    
    # Process the results into a list of dictionaries
    subdivisions = [
        {
            "id": row.id[3:].lstrip("0"),
            "name": row.name,
            "geom": row.geom,  # Geometry as WKT string
            "code": row.code,
            "issue_type": row.issue_type,
            "vacancies": row.vacancies
        }
        for row in rows
        if row.id[3:].lstrip("0") != "99"  # Exclude unwanted IDs
    ]
    
    return subdivisions



File: ./app/services/by_TaID/get_mconstit_by_ta.py
---------------------------------
async def get_maori_constituency_by_ta(database, ta_id):
    """
    Retrieve the Māori constituencies for a given TA.
    
    :param database: An instance of the database connection.
    :param ta_id: The ID of the Territorial Authority.
    :return: A list of dictionaries containing the Māori constituency ID, name, code, issue type, vacancies, and overlap percentage.
    """
    query = """
    SELECT 
        mcon.mcon2023_v, 
        mcon.mcon2023_1,
        mcon.alpha_code AS code,
        mcon.issue_type,
        mcon.vacancies,
        ST_Area(ST_Intersection(ta.geom, mcon.geom)) / ST_Area(ta.geom) AS overlap_percentage
    FROM 
        "2024"."territorial-authority-2023-generalised" ta,
        "2024"."maori-constituency-2023-generalised" mcon
    WHERE 
        ta.ta2023_v1_ = :ta_id
    AND 
        ST_Intersects(ta.geom, mcon.geom)
    """
    results = await database.fetch_all(query, values={"ta_id": ta_id})

    maori_constituencies = [
        {
            "id": result["mcon2023_v"].lstrip("0"), 
            "name": result["mcon2023_1"].rstrip(),
            "overlap_percentage": result["overlap_percentage"],
            "code": result.get("code", "not assigned"),  # Handle cases where code might be None
            "issue_type": result.get("issue_type", "A"),  # Default issue_type if None
            "vacancies": result.get("vacancies", "0"),  # Default vacancies if None
        }
        for result in results
        if result["mcon2023_v"].lstrip("0") != "99" and result["overlap_percentage"] > 0.001  # Arbitrary threshold for significant overlap
    ]

    return maori_constituencies



File: ./app/services/by_TaID/get_mwards_by_ta.py
---------------------------------
# services/get_wards_by_ta.py

async def get_maori_wards_by_ta(database, ta_id):
    query = """
    SELECT mward2023_, mward2023_1,vacancies
    FROM "2024"."maori-ward-2023-generalised"
    WHERE LEFT(mward2023_, 3) = :ta_id
    ORDER BY mward2023_
    """
    results = await database.fetch_all(query, values={"ta_id": ta_id})

    maori_wards = [
        {
            "id": result["mward2023_"][3:].lstrip("0"), 
            "name": result["mward2023_1"],
            "code": result["code"],
            "vacancies": result["vacancies"]
        }
        for result in results
        if result["mward2023_"][3:].lstrip("0") != "99"
    ]
    return maori_wards


File: ./app/services/by_TaID/get_regc_by_ta.py
---------------------------------
# services/get_regc_by_ta.py

async def get_regc_by_ta(database, ta_id):
    """
    Retrieve the regional councils for a given TA, including overlap percentages.
    
    :param database: An instance of the database connection.
    :param ta_id: The ID of the Territorial Authority.
    :return: A list of dictionaries containing the regional council ID, name, and overlap percentage.
    """
    query = """
    SELECT 
        regc.regc2023_v, 
        regc.regc2023_1,
        regc.code,
        regc.issue_type,
        regc.vacancies,
        ST_Area(ST_Intersection(ta.geom, regc.geom)) / ST_Area(ta.geom) AS overlap_percentage
    FROM 
        "2024"."territorial-authority-2023-generalised" ta,
        "2024"."regional-council-2023-generalised" regc
    WHERE 
        ta.ta2023_v1_ = :ta_id
    AND 
        ST_Intersects(ta.geom, regc.geom)
    """
    results = await database.fetch_all(query, values={"ta_id": ta_id})
    
    regional_councils = [
        {
            "id": result["regc2023_v"].lstrip("0"), 
            "name": result["regc2023_1"],
            "code": result["code"],
            "issue_type": result["issue_type"],
            "vacancies": result["vacancies"]
        }
        for result in results
        if result["regc2023_v"].lstrip("0") != "99" and result["overlap_percentage"] > 0.001
    ]
    
    return regional_councils




File: ./app/services/by_TaID/get_constituencies_with_rc_by_ta.py
---------------------------------
# services/get_constituency_by_ta.py

from typing import List, Dict
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import aliased
from geoalchemy2.functions import ST_Intersects, ST_Intersection, ST_Area
from geoalchemy2 import Geometry

# Import the models from db_models.py
from models.db_models import (
    get_territorial_organization_model,
    get_regional_organization_model,
    get_constituency_model,
    get_maori_constituency_model,
)

# Ensure models are cached to prevent redefinition warnings
# (Assuming caching is implemented in db_models.py)

async def get_regc_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    """
    Retrieve the regional councils for a given TA, including overlap percentages.
    """
    TerritorialAuthority = get_territorial_organization_model(year)
    RegionalCouncil = get_regional_organization_model(year)

    # Create aliases for the models
    ta_alias = aliased(TerritorialAuthority)
    regc_alias = aliased(RegionalCouncil)

    # Calculate overlap percentage
    overlap_percentage = (
        ST_Area(ST_Intersection(ta_alias.shape, regc_alias.shape)) / ST_Area(ta_alias.shape)
    ).label('overlap_percentage')

    # Build the query
    query = (
        select(
            regc_alias.regc_v1_00.label('id'),
            regc_alias.regc_v1_00_name.label('name'),
            regc_alias.alpha_code.label('code'),
            regc_alias.issue_type,
            regc_alias.vacancies,
            overlap_percentage
        )
        .select_from(ta_alias)
        .join(regc_alias, ST_Intersects(ta_alias.shape, regc_alias.shape))
        .where(ta_alias.ta_v1_00 == ta_id)
    )

    # Execute the query
    result = await session.execute(query)
    rows = result.fetchall()

    # Process the results
    regional_councils = [
        {
            "id": row.id,
            "name": row.name,
            "code": row.code,
            "issue_type": row.issue_type,
            "vacancies": row.vacancies,
            "overlap_percentage": row.overlap_percentage,
        }
        for row in rows
        if row.id.lstrip("0") != "99" and row.overlap_percentage > 0.001
    ]

    return regional_councils

async def get_general_constituency_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    """
    Retrieve the general constituencies for a given TA.
    """
    TerritorialAuthority = get_territorial_organization_model(year)
    Constituency = get_constituency_model(year)

    ta_alias = aliased(TerritorialAuthority)
    con_alias = aliased(Constituency)

    overlap_percentage = (
        ST_Area(ST_Intersection(ta_alias.shape, con_alias.shape)) / ST_Area(ta_alias.shape)
    ).label('overlap_percentage')

    query = (
        select(
            con_alias.con_v1_00.label('id'),
            con_alias.con_v1_00_name.label('name'),
            con_alias.alpha_code.label('code'),
            con_alias.issue_type,
            con_alias.vacancies,
            overlap_percentage
        )
        .select_from(ta_alias)
        .join(con_alias, ST_Intersects(ta_alias.shape, con_alias.shape))
        .where(ta_alias.ta_v1_00 == ta_id)
    )

    result = await session.execute(query)
    rows = result.fetchall()

    general_constituencies = [
        {
            "id": row.id,
            "name": row.name,
            "code": row.code,
            "overlap_percentage": row.overlap_percentage,
            "issue_type": row.issue_type,
            "vacancies": row.vacancies,
        }
        for row in rows
        if row.id[2:].lstrip("0") != "99" and row.overlap_percentage > 0.001
    ]

    return general_constituencies

async def get_maori_constituency_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    """
    Retrieve the Māori constituencies for a given TA.
    """
    TerritorialAuthority = get_territorial_organization_model(year)
    MaoriConstituency = get_maori_constituency_model(year)

    ta_alias = aliased(TerritorialAuthority)
    mcon_alias = aliased(MaoriConstituency)

    overlap_percentage = (
        ST_Area(ST_Intersection(ta_alias.shape, mcon_alias.shape)) / ST_Area(ta_alias.shape)
    ).label('overlap_percentage')

    query = (
        select(
            mcon_alias.mcon_v1_00.label('id'),
            mcon_alias.mcon_v1_00_name.label('name'),
            mcon_alias.alpha_code.label('code'),
            mcon_alias.issue_type,
            mcon_alias.vacancies,
            overlap_percentage
        )
        .select_from(ta_alias)
        .join(mcon_alias, ST_Intersects(ta_alias.shape, mcon_alias.shape))
        .where(ta_alias.ta_v1_00 == ta_id)
    )

    result = await session.execute(query)
    rows = result.fetchall()

    maori_constituencies = [
        {
            "id": row.id,
            "name": row.name,
            "code": row.code,
            "overlap_percentage": row.overlap_percentage,
            "issue_type": row.issue_type,
            "vacancies": row.vacancies,
        }
        for row in rows
        if row.id[2:].lstrip("0") != "99" and row.overlap_percentage > 0.001
    ]

    return maori_constituencies

async def associate_constituencies_with_regional_councils(session: AsyncSession, ta_id: str, year: str):
    """
    Associate constituencies with regional councils based on spatial overlap.
    """
    # Fetch regional councils and constituencies
    regional_councils = await get_regc_by_ta(session, ta_id, year)
    general_constituencies = await get_general_constituency_by_ta(session, ta_id, year)
    maori_constituencies = await get_maori_constituency_by_ta(session, ta_id, year)

    # Combine general and Māori constituencies for easier processing
    all_constituencies = general_constituencies + maori_constituencies

    # Initialize dictionary to organize data by regional council IDs
    council_to_constituencies = {}
    for rc in regional_councils:
        council_to_constituencies[rc['id']] = {
            'id': rc['id'],
            'name': rc['name'],
            'code': rc["code"],
            'constituencies': []
        }

    # Associate constituencies with regional councils based on the first two digits of constituency ID
    for con in all_constituencies:
        regc_id = con['id'][:2]  # Assuming the first two digits indicate the regional council ID
        if regc_id in council_to_constituencies:
            council_to_constituencies[regc_id]['constituencies'].append({
                'id': con['id'][2:].lstrip("0"),
                'name': con['name'],
                "code": con["code"],
                'overlap_percentage': con['overlap_percentage'],
                'issue_type': con['issue_type'],
                "vacancies": con["vacancies"],
            })

    # Convert dictionary to list for output to match the requested format
    regional_councils_list = list(council_to_constituencies.values())

    return regional_councils_list

async def get_ta_by_regc(session: AsyncSession, regc_id: str, year: str) -> List[Dict]:
    """
    Retrieve the Territorial Authorities (TAs) for a given Regional Council, including overlap percentages.
    """
    TerritorialAuthority = get_territorial_organization_model(year)
    RegionalCouncil = get_regional_organization_model(year)

    ta_alias = aliased(TerritorialAuthority)
    regc_alias = aliased(RegionalCouncil)

    overlap_percentage = (
        ST_Area(ST_Intersection(ta_alias.shape, regc_alias.shape)) / ST_Area(regc_alias.shape)
    ).label('overlap_percentage')

    query = (
        select(
            ta_alias.ta_v1_00.label('ta_id'),
            ta_alias.ta_v1_00_name.label('name'),
            ta_alias.alpha_code.label('code'),
            ta_alias.issue_type,
            ta_alias.vacancies,
            overlap_percentage
        )
        .select_from(regc_alias)
        .join(ta_alias, ST_Intersects(ta_alias.shape, regc_alias.shape))
        .where(regc_alias.regc_v1_00 == regc_id)
    )

    result = await session.execute(query)
    rows = result.fetchall()

    territorial_authorities = [
        {
            "id": row.ta_id,
            "name": row.name,
            "code": row.code,
            "issue_type": row.issue_type,
            "vacancies": row.vacancies,
            "overlap_percentage": row.overlap_percentage
        }
        for row in rows
        if row.ta_id.lstrip("0") != "999" and row.overlap_percentage > 0.001
    ]

    return territorial_authorities



File: ./app/services/by_TaID/get_constit_by_ta.py
---------------------------------
# services/get_constituency_by_ta.py

from typing import List, Dict
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import aliased
from geoalchemy2.functions import ST_Intersection, ST_Area, ST_Intersects

from models.db_models import (
    get_territorial_organization_model,
    get_constituency_model,
    get_maori_constituency_model,
)

async def get_general_constituency_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    TerritorialAuthority = get_territorial_organization_model(year)
    Constituency = get_constituency_model(year)

    ta_alias = aliased(TerritorialAuthority)
    con_alias = aliased(Constituency)

    overlap_percentage = (
        ST_Area(ST_Intersection(ta_alias.shape, con_alias.shape)) / ST_Area(ta_alias.shape)
    ).label('overlap_percentage')

    query = (
        select(
            con_alias.con_v1_00.label('id'),
            con_alias.con_v1_00_name.label('name'),
            con_alias.alpha_code,
            con_alias.issue_type,
            overlap_percentage
        )
        .join(con_alias, ST_Intersects(ta_alias.shape, con_alias.shape))
        .where(ta_alias.ta_v1_00 == ta_id)
    )

    result = await session.execute(query)
    rows = result.fetchall()

    general_constituencies = [
        {
            "id": row.id[2:].lstrip("0"),
            "name": row.name,
            "alpha_code": row.alpha_code,
            "overlap_percentage": row.overlap_percentage,
            "issue_type": row.issue_type
        }
        for row in rows
        if row.id[2:].lstrip("0") != "99" and row.overlap_percentage > 0.001
    ]

    return general_constituencies

async def get_maori_constituency_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    TerritorialAuthority = get_territorial_organization_model(year)
    MaoriConstituency = get_maori_constituency_model(year)

    ta_alias = aliased(TerritorialAuthority)
    mcon_alias = aliased(MaoriConstituency)

    overlap_percentage = (
        ST_Area(ST_Intersection(ta_alias.shape, mcon_alias.shape)) / ST_Area(ta_alias.shape)
    ).label('overlap_percentage')

    query = (
        select(
            mcon_alias.mcon_v1_00.label('id'),
            mcon_alias.mcon_v1_00_name.label('name'),
            mcon_alias.alpha_code,
            mcon_alias.issue_type,
            overlap_percentage
        )
        .join(mcon_alias, ST_Intersects(ta_alias.shape, mcon_alias.shape))
        .where(ta_alias.ta_v1_00 == ta_id)
    )

    result = await session.execute(query)
    rows = result.fetchall()

    maori_constituencies = [
        {
            "id": row.id[2:].lstrip("0"),
            "name": row.name,
            "alpha_code": row.alpha_code,
            "overlap_percentage": row.overlap_percentage,
            "issue_type": row.issue_type
        }
        for row in rows
        if row.id[2:].lstrip("0") != "99" and row.overlap_percentage > 0.001
    ]

    return maori_constituencies

async def get_all_constituencies_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Dict]:
    general_constituencies = await get_general_constituency_by_ta(session, ta_id, year)
    maori_constituencies = await get_maori_constituency_by_ta(session, ta_id, year)
    return general_constituencies + maori_constituencies




File: ./app/services/files_temp/TA_codes.csv
---------------------------------
gid,mcon2023_v,mcon2023_1,mcon2023_2,code
1,101,Te Raki Māori Constituency,Te Raki Maori Constituency,RM
2,299,Area Outside Māori Constituency,Area Outside Maori Constituency,
3,301,Nga Hau e Wha Māori Constituency,Nga Hau e Wha Maori Constituency,HW
4,302,Nga Tai ki Uta Māori Constituency,Nga Tai ki Uta Maori Constituency,TU
5,401,Mauao Māori Constituency,Mauao Maori Constituency,
6,402,Okurei Māori Constituency,Okurei Maori Constituency,
7,403,Kohi Māori Constituency,Kohi Maori Constituency,K
8,599,Area Outside Māori Constituency,Area Outside Maori Constituency,
9,601,Māui ki te Raki Māori Constituency,Maui ki te Raki Maori Constituency,MR
10,602,Māui ki te Tonga Māori Constituency,Maui ki te Tonga Maori Constituency,
11,701,Taranaki Māori Constituency,Taranaki Maori Constituency,TM
12,801,Raki Māori Constituency,Raki Maori Constituency,RM
13,802,Tonga Māori Constituency,Tonga Maori Constituency,TM
14,999,Area Outside Māori Constituency,Area Outside Maori Constituency,
15,1299,Area Outside Māori Constituency,Area Outside Maori Constituency,
16,1399,Area Outside Māori Constituency,Area Outside Maori Constituency,
17,1499,Area Outside Māori Constituency,Area Outside Maori Constituency,
18,1599,Area Outside Māori Constituency,Area Outside Maori Constituency,
19,1699,Area Outside Māori Constituency,Area Outside Maori Constituency,
20,1799,Area Outside Māori Constituency,Area Outside Maori Constituency,
21,1899,Area Outside Māori Constituency,Area Outside Maori Constituency,
22,9999,Area Outside Māori Constituency,Area Outside Maori Constituency,



File: ./app/services/files_temp/ta_code_data_clean.csv
---------------------------------
gid,mcon2023_v,mcon2023_1,mcon2023_2,code
1,101,Te Raki Māori Constituency,Te Raki Maori Constituency,RM
2,299,Area Outside Māori Constituency,Area Outside Maori Constituency,
3,301,Nga Hau e Wha Māori Constituency,Nga Hau e Wha Maori Constituency,HW
4,302,Nga Tai ki Uta Māori Constituency,Nga Tai ki Uta Maori Constituency,TU
5,401,Mauao Māori Constituency,Mauao Maori Constituency,
6,402,Okurei Māori Constituency,Okurei Maori Constituency,
7,403,Kohi Māori Constituency,Kohi Maori Constituency,K
8,599,Area Outside Māori Constituency,Area Outside Maori Constituency,
9,601,Māui ki te Raki Māori Constituency,Maui ki te Raki Maori Constituency,MR
10,602,Māui ki te Tonga Māori Constituency,Maui ki te Tonga Maori Constituency,
11,701,Taranaki Māori Constituency,Taranaki Maori Constituency,TM
12,801,Raki Māori Constituency,Raki Maori Constituency,RM
13,802,Tonga Māori Constituency,Tonga Maori Constituency,TM
14,999,Area Outside Māori Constituency,Area Outside Maori Constituency,
15,1299,Area Outside Māori Constituency,Area Outside Maori Constituency,
16,1399,Area Outside Māori Constituency,Area Outside Maori Constituency,
17,1499,Area Outside Māori Constituency,Area Outside Maori Constituency,
18,1599,Area Outside Māori Constituency,Area Outside Maori Constituency,
19,1699,Area Outside Māori Constituency,Area Outside Maori Constituency,
20,1799,Area Outside Māori Constituency,Area Outside Maori Constituency,
21,1899,Area Outside Māori Constituency,Area Outside Maori Constituency,
22,9999,Area Outside Māori Constituency,Area Outside Maori Constituency,



File: ./app/services/parse_TA_id.py
---------------------------------
#services/parse_TA_id.py

async def parse_ta_id(selected_ta: str):
    ta_id = selected_ta.zfill(3)  # Pads TA ID to 3 digits
    return ta_id


File: ./app/services/property_processing.py
---------------------------------
import logging
from services.get_entitlement.get_entitlement_noRoll import check_address_entitlement_no_roll
from services.database_internal import get_database

logger = logging.getLogger(__name__)

async def save_property_data(session, property_data):
    client_councils = [
        'Auckland', 'Waikato District', 'Palmerston North City', 'Far North District', 'Clutha District',
        'Gisborne District', 'Hamilton City', 'Hauraki District', 'Kaipara District', 'Kawerau District',
        'Kapiti Coast District', 'New Plymouth District', 'Porirua City', 'South Taranaki District',
        'Stratford District', 'Thames-Coromandel District', 'Wairoa District', 'Whakatane District',
        'Whangarei District', 'Opotiki District'
    ]

    if "properties" not in session:
        session["properties"] = []

    try:
        # Correct usage with async generator
        async for database in get_database():
            full_entitlements = await check_address_entitlement_no_roll(property_data, database)
            property_data.full_entitlements = full_entitlements or {"error": "Entitlement information not available"}

        district_or_council = property_data.full_entitlements.get('District/City Council', '')
        property_data.isClient = 'yes' if district_or_council in client_councils else 'no'

        session["properties"].append(property_data.dict())

    except Exception as e:
        logger.exception("Error saving property data: %s", e)
        raise

    for property in session["properties"]:
        print("Updated property in session:", property)
        print()  # This adds an empty line between each property for better readability

    return {"message": "Property saved successfully"}


File: ./app/services/by_orgID/get_organization.py
---------------------------------
# Standard Library Imports
from typing import List

# Third-Party Library Imports
from fastapi import HTTPException
from sqlalchemy.future import select 
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session
from sqlalchemy import text
from sqlalchemy import select


# Local Application Imports
from models.models import TerritorialOrganization as TerritorialOrgPydantic, RegionalOrganization as RegionalOrgPydantic, Organization
from models.db_models import get_territorial_organization_model, get_regional_organization_model
from models.models import LicensingTrustOrg 
from models.db_models import LicensingTrust as LicensingTrustModel
from collections import defaultdict

async def fetch_all_organizations(session: AsyncSession, year: str) -> List[Organization]:
    try:
        # Get the model definitions based on year
        TerritorialModel = get_territorial_organization_model(year)
        RegionalModel = get_regional_organization_model(year)

        # Setup the queries to fetch all necessary fields
        territorial_query = select(
            getattr(TerritorialModel, f"es_num_code").label("num_code"),
            getattr(TerritorialModel, f"ta_v1_00_name").label("name"),
            TerritorialModel.alpha_code
        ).where(getattr(TerritorialModel, f"es_num_code") != '999')

        regional_query = select(
            getattr(RegionalModel, f"es_num_code").label("num_code"),
            getattr(RegionalModel, f"regc_v1_00_name").label("name"),
            RegionalModel.alpha_code
        ).where(getattr(RegionalModel, f"es_num_code") != '99')

        licensing_query = select(
            LicensingTrustModel.es_num_code.label("num_code"),
            LicensingTrustModel.name,
            LicensingTrustModel.alpha_code
        )

        # Execute the queries
        territorial_result = await session.execute(territorial_query)
        territorial_data = territorial_result.scalars().all()
        print("Territorial Results:", territorial_data)  # Debug print

        regional_result = await session.execute(regional_query)
        regional_data = regional_result.scalars().all()
        print("Regional Results:", regional_data)  # Debug print

        licensing_result = await session.execute(licensing_query)
        licensing_data = licensing_result.scalars().all()
        print("Licensing Trust Results:", licensing_data)  # Debug print

        # Process the results into models
        territorial_organizations = [
            TerritorialOrgPydantic(num_code=row.num_code, name=row.name, alpha_code=row.alpha_code)
            for row in territorial_data
        ]

        regional_organizations = [
            RegionalOrgPydantic(num_code=row.num_code, name=row.name, alpha_code=row.alpha_code)
            for row in regional_data
        ]

        licensing_organizations = [
            LicensingTrustOrg(num_code=row.num_code, name=row.name, alpha_code=row.alpha_code)
            for row in licensing_data
        ]

        # Combine all results
        organizations = territorial_organizations + regional_organizations + licensing_organizations
        combined_data = [org.dict() for org in organizations]
        print("Combined Organizations Data:", combined_data)  # Debug print to show combined data

        return combined_data

    except Exception as e:
        print(f"Error fetching organizations: {e}")
        raise HTTPException(status_code=500, detail=str(e))



File: ./app/services/by_orgID/get_wards_by_orgID.py
---------------------------------
# services/get_wards_by_ta.py

from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import func
from geoalchemy2.shape import to_shape

from services.ta_details import get_taDetails
from models.models import Ward
from models.db_models import get_ward_model, get_maori_ward_model

async def fetch_regular_wards(session: AsyncSession, ta_id: str, year: str):
    WardModel = get_ward_model(year)
    query = (
        select(WardModel)
        .where(WardModel.ward_v1_00.startswith(ta_id))
        .order_by(WardModel.ward_v1_00)
    )
    result = await session.execute(query)
    return result.scalars().all()

async def fetch_maori_wards(session: AsyncSession, ta_id: str, year: str):
    MaoriWardModel = get_maori_ward_model(year)
    query = (
        select(MaoriWardModel)
        .where(MaoriWardModel.mward_v1_00.startswith(ta_id))
        .order_by(MaoriWardModel.mward_v1_00)
    )
    result = await session.execute(query)
    return result.scalars().all()

def create_regular_ward_from_result(result, ta_code: str) -> Ward:
    if result.shape is not None:
        geom_wkt = to_shape(result.shape).wkt
    else:
        geom_wkt = None

    return Ward(
        id=str(result.ward_v1_00)[3:].lstrip("0"),
        name=result.ward_v1_00_name,
        geom=geom_wkt,
        alpha_code=result.alpha_code,
        issue_type=result.issue_type,
        vacancies=result.vacancies,
        Issue_code=f"{ta_code}-{result.issue_type}-{result.alpha_code}"
    )

def create_maori_ward_from_result(result, ta_code: str) -> Ward:
    if result.shape is not None:
        geom_wkt = to_shape(result.shape).wkt
    else:
        geom_wkt = None

    return Ward(
        id=result.es_num_code,
        name=result.mward_v1_00_name,
        geom=geom_wkt,
        alpha_code=result.alpha_code,
        issue_type=result.issue_type,
        vacancies=result.vacancies,
        Issue_code=f"{ta_code}-{result.issue_type}-{result.alpha_code}"
    )

async def get_regular_wards(session: AsyncSession, ta_id: str, ta_code: str, year: str) -> List[Ward]:
    results = await fetch_regular_wards(session, ta_id, year)
    wards = []
    for result in results:
        ward_id = str(result.ward_v1_00)[3:].lstrip("0")
        if ward_id != "99":
            ward = create_regular_ward_from_result(result, ta_code)
            wards.append(ward)
    return wards

async def get_maori_wards_by_ta(session: AsyncSession, ta_id: str, ta_code: str, year: str) -> List[Ward]:
    results = await fetch_maori_wards(session, ta_id, year)
    wards = []
    for result in results:
        ward_id = str(result.mward_v1_00)[3:].lstrip("0")
        if ward_id != "99":
            ward = create_maori_ward_from_result(result, ta_code)
            wards.append(ward)
    return wards

async def get_wards_by_ta(session: AsyncSession, ta_id: str, year: str) -> List[Ward]:
    ta_details = await get_taDetails(session, ta_id, year)
    regular_wards = await get_regular_wards(session, ta_id, ta_details.alpha_code, year)
    maori_wards = await get_maori_wards_by_ta(session, ta_id, ta_details.alpha_code, year)
    return regular_wards + maori_wards



File: ./app/services/by_orgID/get_licensing_trust_orgID.py
---------------------------------
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import func
from typing import List
from models.db_models import LicensingTrust

async def get_licensing_trust_wards(db: AsyncSession) -> List[LicensingTrust]:
    """
    Fetch all wards/issues from the 'licensing_trust' table using an async database session.
    This function is for testing and debugging purposes to ensure database connectivity and ORM setup.
    
    :param db: The database session for executing queries asynchronously.
    :return: A list of all LicensingTrust instances in the database.
    """
    # Query to select all entries from the licensing_trust table
    query = select(LicensingTrust)
    result = await db.execute(query)

    # Extract all results
    all_licensing_trust_wards = result.scalars().all()
    return all_licensing_trust_wards



File: ./app/services/by_orgID/get_localBoard_by_orgID.py
---------------------------------
# get_lb_by_ta.py

# Standard Library Imports
from typing import List

# Third-Party Library Imports
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from geoalchemy2.shape import to_shape
from sqlalchemy.types import JSON


# Local Application Imports
from services.ta_details import get_taDetails
from models.models import Subdivision, LocalBoard
from models.db_models import get_local_board_model, get_subdivision_model


async def fetch_boards_with_subdivisions(session: AsyncSession, ta_id: str, year: str):
    LocalBoardModel = get_local_board_model(year)
    SubdivisionModel = get_subdivision_model(year)

    subdivision_json = func.json_build_object(
        'id', SubdivisionModel.tasub_v1_00,
        'name', SubdivisionModel.tasub_v1_00_name,
        'geom', func.ST_AsText(SubdivisionModel.shape),
        'alpha_code', SubdivisionModel.alpha_code,
        'issue_type', SubdivisionModel.issue_type,
        'vacancies', func.coalesce(SubdivisionModel.vacancies, '0')
    )

    query = (
        select(
            LocalBoardModel,
            func.coalesce(
                func.json_agg(subdivision_json),
                func.cast('[]', JSON)  # JSON fallback
            ).label('subdivisions')
        )
        .outerjoin(
            SubdivisionModel,
            func.ST_Within(SubdivisionModel.shape, LocalBoardModel.shape)
        )
        .where(
            LocalBoardModel.talb_v1_00.ilike(f"{ta_id}%"),
            LocalBoardModel.shape.isnot(None)
        )
        .group_by(
            LocalBoardModel.talb_v1_00,
            *LocalBoardModel.__table__.columns
        )
        .order_by(LocalBoardModel.talb_v1_00)
    )

    result = await session.execute(query)
    return result.fetchall()


async def get_local_boards(session: AsyncSession, ta_id: str, year: str) -> List[LocalBoard]:
    ta_details = await get_taDetails(session, ta_id, year)
    print("TA Details:", ta_details)

    boards_with_subdivisions = await fetch_boards_with_subdivisions(session, ta_id, year)
    print("Fetched Local Board IDs:", [lb_result.talb_v1_00 for lb_result, _ in boards_with_subdivisions])

    boards = []
    for lb_result, subdivisions_json in boards_with_subdivisions:
        subdivisions_data = subdivisions_json or []
        subdivisions = [
            Subdivision(
                id=str(sub['id'])[3:].lstrip("0"),
                name=sub['name'] or "Unknown",  # Handle None for name
                geom=sub['geom'],
                alpha_code=sub['alpha_code'],
                issue_type=sub['issue_type'],
                vacancies=sub['vacancies'],
                Issue_code=f"{ta_details.alpha_code}-{sub['issue_type']}-{sub['alpha_code']}"
            )
            for sub in subdivisions_data
        ]

        board = LocalBoard(
            id=str(lb_result.talb_v1_00)[3:].lstrip("0"),
            name=lb_result.talb_v1_00_name,
            geom=to_shape(lb_result.shape).wkt if lb_result.shape else None,
            alpha_code=lb_result.alpha_code,
            issue_type=lb_result.issue_type,
            Issue_code=f"{ta_details.alpha_code}-{lb_result.issue_type}-{lb_result.alpha_code}",
            vacancies=lb_result.vacancies,
            subdivisions=subdivisions
        )
        boards.append(board)

    return boards



File: ./app/services/by_orgID/get_regionalCouncil_constituencies_by_orgID.py
---------------------------------
# services/get_regional_council.py

# Standard Library Imports
from typing import List, Dict, Any

# Third-Party Library Imports
from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# Local Application Imports
from models.models import RegionalCouncil, Constituency
from models.db_models import (
    get_regional_organization_model,
    get_constituency_model,
    get_maori_constituency_model
)

async def fetch_regional_council(session: AsyncSession, org_id: str, year: str) -> Dict[str, Any]:
    RegionalOrganizationModel = get_regional_organization_model(year)

    query = (
        select(
            RegionalOrganizationModel.regc_v1_00.label('id'),
            RegionalOrganizationModel.regc_v1_00_name.label('name'),
            RegionalOrganizationModel.alpha_code
        )
        .where(RegionalOrganizationModel.regc_v1_00 == org_id)
    )
    result = await session.execute(query)
    row = result.first()
    if row:
        return dict(row._mapping)
    else:
        return None

async def fetch_constituencies(session: AsyncSession, model_getter, year: str, org_id: str) -> List[Dict[str, Any]]:
    Model = model_getter(year)

    if hasattr(Model, 'con_v1_00'):
        id_field = Model.con_v1_00
        name_field = Model.con_v1_00_name
    elif hasattr(Model, 'mcon_v1_00'):
        id_field = Model.mcon_v1_00
        name_field = Model.mcon_v1_00_name
    else:
        raise ValueError('Unknown model')

    query = (
        select(
            id_field.label('id'),
            name_field.label('name'),
            Model.alpha_code,
            Model.issue_type,
            Model.vacancies
        )
        .where(id_field.startswith(org_id))
    )
    result = await session.execute(query)
    rows = result.all()
    return [dict(row._mapping) for row in rows]

async def fetch_general_constituencies(session: AsyncSession, year: str, org_id: str) -> List[Dict[str, Any]]:
    return await fetch_constituencies(session, get_constituency_model, year, org_id)

async def fetch_maori_constituencies(session: AsyncSession, year: str, org_id: str) -> List[Dict[str, Any]]:
    return await fetch_constituencies(session, get_maori_constituency_model, year, org_id)

def create_constituency_from_result(result: Dict[str, Any], rc_alpha_code: str) -> Constituency:
    return Constituency(
        id=result["id"][-2:],  # Extract the last two digits
        name=result["name"],
        alpha_code=result["alpha_code"],
        issue_type=result["issue_type"],
        vacancies=result["vacancies"],
        Issue_code=f"{rc_alpha_code}-{result['alpha_code']}"
    )

def create_regional_council_from_result(result: Dict[str, Any], constituencies: List[Constituency]) -> RegionalCouncil:
    name_parts = result["name"].split()
    if name_parts[-1].lower() == "region":
        name_parts[-1] = "Regional Council"
    modified_name = " ".join(name_parts)

    return RegionalCouncil(
        id=result["id"],
        name=modified_name,
        alpha_code=result["alpha_code"],
        constituencies=constituencies,
    )

async def fetch_regional_council_with_constituencies(session: AsyncSession, org_id: str, year: str) -> RegionalCouncil:
    try:
        regional_result = await fetch_regional_council(session, org_id, year)
        if not regional_result:
            raise HTTPException(status_code=404, detail="Regional council not found")

        maori_results = await fetch_maori_constituencies(session, year, org_id)
        general_results = await fetch_general_constituencies(session, year, org_id)

        maori_constituencies = [
            create_constituency_from_result(row, regional_result['alpha_code']) for row in maori_results
        ]
        general_constituencies = [
            create_constituency_from_result(row, regional_result['alpha_code']) for row in general_results
        ]

        constituencies = maori_constituencies + general_constituencies

        regional_council = create_regional_council_from_result(regional_result, constituencies)

        return regional_council

    except Exception as e:
        print(f"Error fetching regional council and constituencies: {e}")
        raise HTTPException(
            status_code=500,
            detail="An error occurred while fetching regional council and constituencies"
        )



File: ./app/services/by_orgID/get_mayor_by_orgID.py
---------------------------------
# services/get_mayor_by_ta.py

# Third-Party Library Imports
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# Local Application Imports
from models.models import Mayor
from models.db_models import get_territorial_organization_model

async def get_mayor_by_ta(session: AsyncSession, org_id: str, year: str) -> Mayor:
    TerritorialOrganizationModel = get_territorial_organization_model(year)
    
    query = (
        select(
            TerritorialOrganizationModel.ta_v1_00.label('id'),
            TerritorialOrganizationModel.ta_v1_00_name.label('name'),
            TerritorialOrganizationModel.alpha_code,
            TerritorialOrganizationModel.issue_type,
            TerritorialOrganizationModel.vacancies
        )
        .where(TerritorialOrganizationModel.ta_v1_00 == org_id)
    )

    try:
        result = await session.execute(query)
        row = result.first()
        if not row:
            raise ValueError(f"No mayor found with ID {org_id}")
        
        result_dict = dict(row._mapping)
        return Mayor.from_record(result_dict)
    except Exception as e:
        # Log the exception or handle it according to your logging strategy
        print(f"An error occurred while fetching mayor data: {str(e)}")
        # Optionally, you can re-raise the exception if you want it to be handled further up the call stack
        raise



File: ./app/services/by_orgID/get_communityBoard_by_orgID.py
---------------------------------
# services/get_cb_by_ta.py

# Standard Library Imports
from typing import List, Dict, Any
import json

# Third-Party Library Imports
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import aliased
from sqlalchemy.dialects.postgresql import JSON
from geoalchemy2.functions import ST_Within
from geoalchemy2 import Geometry

# Local Application Imports
from services.ta_details import TaDetails, get_taDetails
from models.models import Subdivision, CommunityBoard
from models.db_models import (
    get_community_board_model,
    get_subdivision_model,
)

async def fetch_boards_with_subdivisions(session: AsyncSession, ta_id: str, year: str):
    """
    Fetch community boards along with their subdivisions using a spatial join.

    Args:
        session (AsyncSession): The database session.
        ta_id (str): The Territorial Authority ID.
        year (str): The year/schema.

    Returns:
        List of tuples containing community board data and their subdivisions as JSON.
    """
    CommunityBoardModel = get_community_board_model(year)
    SubdivisionModel = get_subdivision_model(year)

    # Aliases for clarity
    cb_alias = CommunityBoardModel
    sub_alias = SubdivisionModel

    # Build the JSON object for subdivisions
    subdivision_json = func.json_build_object(
        'id', sub_alias.tasub_v1_00,
        'name', sub_alias.tasub_v1_00_name,
        'geom', func.ST_AsText(sub_alias.shape),
        'alpha_code', sub_alias.alpha_code,
        'issue_type', sub_alias.issue_type,
        'vacancies', sub_alias.vacancies
    )

    # Perform the spatial join and aggregate subdivisions per community board
    query = (
        select(
            cb_alias.cb_v1_00.label('cb_id'),
            cb_alias.cb_v1_00_name.label('cb_name'),
            func.ST_AsText(cb_alias.shape).label('cb_geom'),
            cb_alias.alpha_code.label('cb_alpha_code'),
            cb_alias.issue_type.label('cb_issue_type'),
            cb_alias.vacancies.label('cb_vacancies'),
            func.coalesce(func.json_agg(subdivision_json), func.cast('[]', JSON)).label('subdivisions')
        )
        .outerjoin(
            sub_alias,
            ST_Within(sub_alias.shape, cb_alias.shape)
        )
        .where(func.substr(cb_alias.cb_v1_00, 1, 3) == ta_id)
        .group_by(
            cb_alias.cb_v1_00,
            cb_alias.cb_v1_00_name,
            cb_alias.shape,
            cb_alias.alpha_code,
            cb_alias.issue_type,
            cb_alias.vacancies
        )
        .order_by(cb_alias.cb_v1_00)
    )

    result = await session.execute(query)
    boards_with_subdivisions = result.fetchall()
    return boards_with_subdivisions





async def get_community_boards(session: AsyncSession, ta_id: str, year: str) -> List[CommunityBoard]:
    """
    Retrieve community boards along with their subdivisions for a given TA.

    Args:
        session (AsyncSession): The database session.
        ta_id (str): The Territorial Authority ID.
        year (str): The year/schema.

    Returns:
        List[CommunityBoard]: A list of CommunityBoard instances.
    """
    ta_details = await get_taDetails(session, ta_id, year)
    boards_with_subdivisions = await fetch_boards_with_subdivisions(session, ta_id, year)

    boards = []

    for row in boards_with_subdivisions:
        cb_id = row.cb_id
        if cb_id.endswith("99"):
            continue

        subdivisions_data = row.subdivisions or []

        # Ensure subdivisions_data is a list of dictionaries
        subdivisions_list = [
            Subdivision(
                id=sub['id'][3:].lstrip("0"),
                name=sub['name'],
                geom=sub['geom'],
                alpha_code=sub['alpha_code'],
                Issue_code=f"{ta_details.alpha_code}-{sub['issue_type']}-{sub['alpha_code']}",
                issue_type=sub['issue_type'],
                vacancies=sub['vacancies']
            )
            for sub in subdivisions_data
            if sub and sub.get('id') and not sub['id'].endswith('99')
        ]

        board = CommunityBoard(
            id=cb_id[3:].lstrip("0"),
            name=row.cb_name,
            geom=row.cb_geom,
            alpha_code=row.cb_alpha_code,
            Issue_code=f"{ta_details.alpha_code}-{row.cb_issue_type}-{row.cb_alpha_code}",
            issue_type=row.cb_issue_type,
            vacancies=row.cb_vacancies,
            subdivisions=[subdivision.model_dump() for subdivision in subdivisions_list]
        )

        # If there are no subdivisions, add issue_type and vacancies directly to the board
        if not board.subdivisions:
            board.issue_type = row.cb_issue_type
            board.vacancies = row.cb_vacancies
            board.Issue_code = f"{ta_details.alpha_code}-{row.cb_issue_type}-{row.cb_alpha_code}"

        boards.append(board)

    return boards




File: ./app/services/by_orgID/get_districtWideCouncilor_by_orgID.py
---------------------------------
# services/get_district_wide_vacancies.py

# Standard Library Imports
from typing import List

# Third-Party Library Imports
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

# Local Application Imports
from models.models import DistrictWide
from models.db_models import get_territorial_organization_model

async def fetch_ward_details(session: AsyncSession, org_id: str, year: str):
    TerritorialOrganizationModel = get_territorial_organization_model(year)

    query = (
        select(
            TerritorialOrganizationModel.alpha_code,
            TerritorialOrganizationModel.dw_vacancies
        )
        .where(
            TerritorialOrganizationModel.ta_v1_00 == org_id,
            TerritorialOrganizationModel.dw_flag == True
        )
    )

    result = await session.execute(query)
    return result.all()

async def get_ward_details_with_vacancies(session: AsyncSession, org_id: str, year: str) -> List[DistrictWide]:
    try:
        records = await fetch_ward_details(session, org_id, year)
        if not records:
            return []

        ward_details = [DistrictWide.from_record(dict(record._mapping)) for record in records]
        return ward_details

    except Exception as e:
        print(f"An error occurred while fetching ward details: {str(e)}")
        raise



File: ./app/services/auth/user_database.py
---------------------------------
#/user_database.py


# Standard Library Imports
import os

# Third-Party Library Imports
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.future import select 
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Column, Integer, String, Boolean

# Load environment variables for database URL
DATABASE_URL = os.getenv("DATABASE_URL")

# Create async engine for PostgreSQL using asyncpg
engine = create_async_engine(DATABASE_URL, echo=True)

# Create sessionmaker for AsyncSession
AsyncSessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession
)

# Base class for all models
Base = declarative_base()

# User model definition
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    full_name = Column(String)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    disabled = Column(Boolean, default=False)
    role = Column(String, default="user")

# Function to create the database tables asynchronously
async def create_db_and_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# Dependency to get the database session (async)
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

# Asynchronous function to get a user by username
async def get_user(db: AsyncSession, username: str):
    result = await db.execute(
        select(User).filter(User.username == username)
    )
    return result.scalars().first()

# Asynchronous function to get all users
async def get_all_users(db: AsyncSession):
    result = await db.execute(select(User))
    return result.scalars().all()

# Asynchronous function to add a user
async def add_user(db: AsyncSession, username: str, full_name: str, email: str, hashed_password: str, role: str = "user"):
    user = User(username=username, full_name=full_name, email=email, hashed_password=hashed_password, role=role)
    db.add(user)
    await db.commit()
    await db.refresh(user)
    return user

# Asynchronous function to delete a user
async def delete_user(db: AsyncSession, username: str):
    user = await get_user(db, username)
    if user:
        await db.delete(user)
        await db.commit()
        return True
    return False



File: ./app/services/auth/auth.py
---------------------------------
# Standard Library Imports
from datetime import datetime, timedelta
import os

# Third-Party Library Imports
from fastapi import Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession
from dotenv import load_dotenv

# Local Application Imports
from services.auth.user_database import get_db, User, get_user, add_user, delete_user

# Constants
SECRET_KEY = os.getenv('SECRET_KEY')
ALGORITHM = os.getenv('ALGORITHM')
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES', 600))

# Password hashing context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Utility functions
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

async def authenticate_user(db: AsyncSession, username: str, password: str):
    user = await get_user(db, username)  # Await the async get_user call
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = await get_user(db, username=username)  # Await the async get_user call
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

async def get_current_user_from_cookie(request: Request, db: AsyncSession = Depends(get_db)):
    token = request.cookies.get("access_token")
    if not token:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Not authenticated")
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Not authenticated")
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Not authenticated")
    
    user = await get_user(db, username=username)  # Await the async get_user call
    if user is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Not authenticated")
    return user

async def get_current_admin_user(current_user: User = Depends(get_current_user_from_cookie)):
    if current_user.role != "admin":
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Admin access only")
    return current_user



File: ./app/services/auth/cros.py
---------------------------------
# Third-Party Library Imports
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware


def setup_cors(app: FastAPI):
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["http://localhost:5173"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )



File: ./app/services/test.py
---------------------------------
import os
import googlemaps


# Load API key from .env file

api_key = 'AIzaSyCsvhHz6xMhry_y9PPjdwL3hFg4wwfBD9Y'

def fetch_coordinates(place_id):
    """Fetches coordinates for a given Google Maps place ID."""
    gmaps = googlemaps.Client(key=api_key)
    result = gmaps.geocode(place_id=place_id)

    if result:
        location = result[0]['geometry']['location']
        return location
    else:
        print("No results found.")
        return None

if __name__ == "__main__":
    # Example Place ID, replace with the one you want to check
    place_id = 'Eic1IFJpZ2J5IFN0cmVldCwgV2hha2FwaXJhdSwgTmV3IFplYWxhbmQiMBIuChQKEglHhpgvsF8MbREMWQfCNGzPhRAFKhQKEgmherwvsF8MbRGzCnVO6B5XYg'
    coordinates = fetch_coordinates(place_id)
    if coordinates:
        print(f"Coordinates: Latitude = {coordinates['lat']}, Longitude = {coordinates['lng']}")



File: ./app/services/database.py
---------------------------------
import logging
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import os

# Set logging level for SQLAlchemy
logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)
logging.getLogger('sqlalchemy.pool').setLevel(logging.WARNING)

# Load environment variables from .env file
load_dotenv()

# Database connection URL
DATABASE_URL = os.getenv("DATABASE_URL")

# Ensure the DATABASE_URL uses asyncpg
if "asyncpg" not in DATABASE_URL:
    raise ValueError("DATABASE_URL must use 'asyncpg' for async operations.")

# Create asynchronous engine for PostgreSQL with connection pooling configurations
engine = create_async_engine(
    DATABASE_URL,
    echo=False,
    pool_size=10,  # Set the size of the pool (based on expected load)
    max_overflow=20,  # Allow overflow connections when the pool is exhausted
    pool_timeout=30,  # Timeout if all connections are in use
    pool_recycle=1800  # Recycle connections after 30 minutes
)

# Create sessionmaker for AsyncSession
AsyncSessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession
)

# Dependency to get the database session
async def get_database():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception as e:
            logging.error(f"Error occurred during database session: {e}")
            raise
        finally:
            await session.close()




File: ./app/services/addressServices/address_service.py
---------------------------------
# Standard Library Imports
import asyncio
import logging
import math
import re
from typing import List, Optional

# Third-Party Library Imports
import googlemaps
from fuzzywuzzy import fuzz, process
from databases import Database
from pyproj import Transformer
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import func, cast, Integer
from sqlalchemy.future import select
from sqlalchemy.orm import aliased

# Local Application Imports
from models.models import Address
from models.db_models import AddressModel

# Initialize logging
logger = logging.getLogger(__name__)

# Initialize Google Maps client outside of the function if possible (reuse the client)

gmaps_client = googlemaps.Client(key='AIzaSyCsvhHz6xMhry_y9PPjdwL3hFg4wwfBD9Y')

transformer = Transformer.from_crs("EPSG:4167", "EPSG:2193", always_xy=True)




async def get_google_address_suggestions(query: str) -> List[Address]:
    try:
        # Fetch suggestions asynchronously
        suggestions = await asyncio.to_thread(gmaps_client.places_autocomplete, query, components={'country': 'NZ'})
        #print("suggestions:", suggestions)
        
        # Prepare async tasks for fetching additional details concurrently
        tasks = []
        for suggestion in suggestions:
            place_id = suggestion['place_id']
            description = suggestion['description'].replace(", New Zealand", "").strip()
            # Create async tasks to fetch details for each place_id
            tasks.append(fetch_address_details(place_id, description))
        
        # Gather all tasks (fetch details concurrently)
        address_suggestions = await asyncio.gather(*tasks)
        return address_suggestions
    
    except Exception as e:
        logger.error(f"Error fetching from Google Maps: {e}")
        return []



async def get_google_address_only_suggestions(query: str) -> List[Address]:
    try:
        # Fetch suggestions asynchronously (from Google Places API autocomplete)
        suggestions = await asyncio.to_thread(gmaps_client.places_autocomplete, query, components={'country': 'NZ'})
        
        # Prepare async tasks for fetching additional details concurrently
        tasks = []
        for suggestion in suggestions:
            place_id = suggestion['place_id']
            description = suggestion['description'].replace(", New Zealand", "").strip()
            # Create async tasks to fetch details for each place_id
            tasks.append(fetch_address_details_no_projection(place_id, description))
        
        # Gather all tasks (fetch details concurrently)
        address_suggestions = await asyncio.gather(*tasks)
        return address_suggestions

    except Exception as e:
        logger.error(f"Error fetching address suggestions from Google Maps: {e}")
        return []





# Helper function to fetch address details
async def fetch_address_details(place_id: str, description: str) -> Address:
    try:
        details = await asyncio.to_thread(gmaps_client.place, place_id=place_id)

        # Extract coordinates directly from the details response
        location = details['result']['geometry']['location']
        latitude = location['lat']
        longitude = location['lng']

        # Transform latitude/longitude to NZTM2000 (Easting/Northing)
        transformer = Transformer.from_crs("EPSG:4326", "EPSG:2193", always_xy=True)
        easting, northing = transformer.transform(longitude, latitude)

        full_add_1 = description
        street_number_match = re.match(r'(\d+(?:/\d+)?\w*)', full_add_1)
        street_number = street_number_match.group(0) if street_number_match else details['result']['address_components'][0]['long_name']

        # Extract other address components
        street_name = next((comp['long_name'] for comp in details['result']['address_components'] if "route" in comp['types']), None)
        suburb = next((comp['long_name'] for comp in details['result']['address_components'] if "sublocality" in comp['types']), None) or \
                 next((comp['long_name'] for comp in details['result']['address_components'] if "locality" in comp['types']), None)
        city = next((comp['long_name'] for comp in details['result']['address_components'] if "administrative_area_level_1" in comp['types']), None)
        postal_code = next((comp['long_name'] for comp in details['result']['address_components'] if "postal_code" in comp['types']), None)
        country = next((comp['long_name'] for comp in details['result']['address_components'] if "country" in comp['types']), None)

        # Return Address object
        return Address(
            address_id=place_id,
            full_add_1=description,
            easting=easting,
            northing=northing,
            latitude=latitude,
            longitude=longitude,
            street_number=street_number,
            street_name=street_name,
            suburb=suburb,
            city=city,
            postal_code=postal_code,
            country=country
        )
    
    except Exception as e:
        logger.error(f"Error fetching details for place_id {place_id}: {e}")
        return Address()  # Return empty Address object on error


# Helper function to fetch address details without projection conversion
async def fetch_address_details_no_projection(place_id: str, description: str) -> Address:
    try:
        # Fetch place details from Google Places API
        details = await asyncio.to_thread(gmaps_client.place, place_id=place_id)

        # Extract coordinates directly from the details response
        location = details['result']['geometry']['location']
        latitude = location['lat']
        longitude = location['lng']

        # Extract address components
        street_number_match = re.match(r'(\d+(?:/\d+)?\w*)', description)
        street_number = street_number_match.group(0) if street_number_match else details['result']['address_components'][0]['long_name']

        street_name = next((comp['long_name'] for comp in details['result']['address_components'] if "route" in comp['types']), None)
        suburb = next((comp['long_name'] for comp in details['result']['address_components'] if "sublocality" in comp['types']), None) or \
                 next((comp['long_name'] for comp in details['result']['address_components'] if "locality" in comp['types']), None)
        city = next((comp['long_name'] for comp in details['result']['address_components'] if "administrative_area_level_1" in comp['types']), None)
        postal_code = next((comp['long_name'] for comp in details['result']['address_components'] if "postal_code" in comp['types']), None)
        country = next((comp['long_name'] for comp in details['result']['address_components'] if "country" in comp['types']), None)

        # Return the Address object with all extracted details
        return Address(
            address_id=place_id,
            full_add_1=description,
            latitude=latitude,
            longitude=longitude,
            street_number=street_number,
            street_name=street_name,
            suburb=suburb,
            city=city,
            postal_code=postal_code,
            country=country
        )

    except Exception as e:
        logger.error(f"Error fetching details for place_id {place_id}: {e}")
        return Address()  # Return empty Address object on error


def format_query(query: str) -> str:
    # Split the query into terms
    terms = query.split()
    
    # Apply prefix matching only for alphabetic parts
    formatted_terms = [term + ':*' if term.isalpha() else term for term in terms]
    
    # Join terms with '&' to create the correct format for tsquery
    return ' & '.join(formatted_terms)

async def get_addresses_from_db(query: str, session: AsyncSession) -> List[Address]:
    """
    Fetch addresses from the database using SQLAlchemy's AsyncSession with optimizations,
    without requiring additional database columns.

    :param query: The search query string.
    :param session: An instance of AsyncSession.
    :return: A list of Address objects.
    """
    # Format the query for prefix matching
    formatted_query = format_query(query)

    # Use full-text search
    query_stmt = (
        select(
            AddressModel.address_id,
            AddressModel.full_address_ascii,
            AddressModel.full_address_number,
            AddressModel.full_road_name_ascii,
            AddressModel.suburb_locality_ascii,
            AddressModel.town_city_ascii,
            AddressModel.gd2000_xcoord,
            AddressModel.gd2000_ycoord
        )
        .where(
            AddressModel.full_address_tsv.op('@@')(func.plainto_tsquery('english', formatted_query))
        )
        .order_by(AddressModel.full_address_ascii)
        .limit(50)
    )

    # Execute the query asynchronously
    result = await session.execute(query_stmt)
    rows = result.fetchall()

    if not rows:
        return []

    # Collect coordinates into arrays for batch transformation
    x_coords = [row.gd2000_xcoord for row in rows]
    y_coords = [row.gd2000_ycoord for row in rows]

    # Perform batch coordinate transformation (assuming 'transformer' is defined)
    easting_array, northing_array = transformer.transform(x_coords, y_coords)

    addresses = []
    for idx, row in enumerate(rows):
        data = row._mapping  # Access columns by name
        easting = easting_array[idx]
        northing = northing_array[idx]

        # Create an Address object using the Pydantic model
        address = Address(
            address_id=str(data['address_id']),
            full_add_1=data['full_address_ascii'],
            street_number=data['full_address_number'],
            street_name=data['full_road_name_ascii'],
            suburb=data['suburb_locality_ascii'],
            city=data['town_city_ascii'],
            postal_code=None,  # Add postal_code if available
            country="New Zealand",
            easting=easting,
            northing=northing,
            latitude=data['gd2000_ycoord'],
            longitude=data['gd2000_xcoord']
        )
        addresses.append(address)

    return addresses

# Weights for different components
FIELD_WEIGHTS = {
    'street_number': 0.3,
    'street_name': 0.5,
    'suburb': 0.2,
    'city': 0.1,
}

def normalize_string(s: Optional[str]) -> str:
    """Normalize the string for consistent comparisons."""
    return s.lower().strip() if s else ""

def calculate_similarity_score(addr1: Address, addr2: Address) -> float:
    """Calculate a similarity score between two addresses based on weighted fields."""
    score = 0.0
    
    # Street number exact match (no fuzzy needed for numbers)
    if normalize_string(addr1.street_number) == normalize_string(addr2.street_number):
        score += FIELD_WEIGHTS['street_number']
    
    # Street name fuzzy match
    street_name_score = fuzz.token_sort_ratio(normalize_string(addr1.street_name), normalize_string(addr2.street_name)) / 100
    score += street_name_score * FIELD_WEIGHTS['street_name']
    
    # Suburb exact match
    if normalize_string(addr1.suburb) == normalize_string(addr2.suburb):
        score += FIELD_WEIGHTS['suburb']
    
    # City exact match
    if normalize_string(addr1.city) == normalize_string(addr2.city):
        score += FIELD_WEIGHTS['city']
    
    return score



def deduplicate_addresses(addresses: List[Address], threshold: float = 0.8) -> List[Address]:
    """Deduplicate addresses using a scoring mechanism with weighted fields."""
    if not addresses:
        return []
    
    unique_addresses = []
    
    for address in addresses:
        match_found = False
        
        for unique_address in unique_addresses:
            # Calculate similarity score between current address and unique address
            similarity_score = calculate_similarity_score(address, unique_address)
            
            # If the similarity score exceeds the threshold, treat as duplicate
            if similarity_score >= threshold:
                match_found = True
                break
        
        if not match_found:
            unique_addresses.append(address)
    
    return unique_addresses




async def get_addresses_by_meshblocks(meshblocks: List[str], database: Database):
    query = """
    SELECT 
        a.address_id::text AS address_id,
        m.mb2023_v1_00 AS meshblock,
        a.full_address_number || ' ' || a.full_road_name AS full_add_1,
        a.territorial_authority AS council
    FROM 
        address.addresses a
    JOIN 
        "2023".meshblock m
    ON 
        ST_Intersects(a.shape, m.shape)
    WHERE 
        m.mb2023_v1_00 = ANY(:meshblocks)
    ORDER BY 
        full_add_1;
    """
    return await database.fetch_all(query, values={"meshblocks": meshblocks})




'''def deduplicate_addresses(addresses: List[Address]) -> List[Address]:
    if not addresses:
        return []
    
    unique_addresses = []
    seen = set()
    
    for address in addresses:
        if not unique_addresses:
            unique_addresses.append(address)
            seen.add(address.full_add_1)
            continue
        
        match, score = process.extractOne(address.full_add_1, [addr.full_add_1 for addr in unique_addresses], scorer=fuzz.token_sort_ratio)
        
        if match is None:
            unique_addresses.append(address)
            seen.add(address.full_add_1)
            continue
        
        if score >= 85:  # Adjust the threshold as needed
            continue  # Skip similar address
        
        unique_addresses.append(address)
        seen.add(address.full_add_1)
    
    return unique_addresses'''




File: ./app/services/cros.py
---------------------------------
# Third-Party Library Imports
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware


def setup_cors(app: FastAPI):
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["http://localhost:5173"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )



File: ./app/services/GeoSpatialDataUpdate/utils.py
---------------------------------
# /services/GeoSpatialDataUpdate/utils.py


# Standard Library Imports
import os
import re
import xml.etree.ElementTree as ET
from datetime import datetime

# Third-Party Library Imports
import requests  # Note: We'll discuss async alternatives for this below
from fastapi import HTTPException
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy import text
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from sqlalchemy.ext.asyncio import async_sessionmaker
import geopandas as gpd
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Database connection details
DATABASE_URL = os.getenv("DATABASE_URL")

# Create async engine for PostgreSQL using asyncpg
engine = create_async_engine(DATABASE_URL, echo=True)

# Create sessionmaker for AsyncSession
SessionLocal = async_sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    class_=AsyncSession
)

namespace = {'wfs': 'http://www.opengis.net/wfs/2.0'}



def get_table_structure(dataset_name, year):
    return {
        "Constituency": {
            "table_name": "constituency",
            "columns": [
                f"CON{year}_V1_00", 
                f"CON{year}_V1_00_NAME", 
                f"CON{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Wards": {
            "table_name": "wards",
            "columns": [
                f"WARD{year}_V1_00", 
                f"WARD{year}_V1_00_NAME", 
                f"WARD{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Regional Council": {
            "table_name": "regional_council",
            "columns": [
                f"REGC{year}_V1_00", 
                f"REGC{year}_V1_00_NAME", 
                f"REGC{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Subdivision": {
            "table_name": "subdivision",
            "columns": [
                f"TASUB{year}_V1_00", 
                f"TASUB{year}_V1_00_NAME", 
                f"TASUB{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Community Board": {
            "table_name": "community_board",
            "columns": [
                f"CB{year}_V1_00", 
                f"CB{year}_V1_00_NAME", 
                f"CB{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Māori Ward": {
            "table_name": "maori_ward",
            "columns": [
                f"MWARD{year}_V1_00", 
                f"MWARD{year}_V1_00_NAME", 
                f"MWARD{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Māori Constituency": {
            "table_name": "maori_constituency",
            "columns": [
                f"MCON{year}_V1_00", 
                f"MCON{year}_V1_00_NAME", 
                f"MCON{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Territorial Authority": {
            "table_name": "territorial_authority",
            "columns": [
                f"TA{year}_V1_00", 
                f"TA{year}_V1_00_NAME", 
                f"TA{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "dw_flag",
                "dw_vacancies",
                "Shape"
            ]
        },
        "Territorial Authority Local Board": {
            "table_name": "territorial_authority_local_board",
            "columns": [
                f"TALB{year}_V1_00", 
                f"TALB{year}_V1_00_NAME", 
                f"TALB{year}_V1_00_NAME_ASCII", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area",
                "ES_num_code",
                "alpha_code",
                "Vacancies",
                "Issue_type",
                "Shape"
            ]
        },
        "Meshblock": {
            "table_name": "meshblock",
            "columns": [
                "Shape", 
                f"MB{year}_V1_00", 
                "LANDWATER", 
                "LANDWATER_NAME", 
                "LAND_AREA_SQ_KM", 
                "AREA_SQ_KM", 
                "Shape_Length", 
                "Shape_Area"
            ]
        }

    }.get(dataset_name)


# Function to fetch and parse the GetCapabilities document
def fetch_layers(url):
    response = requests.get(url)
    xml_content = response.content
    root = ET.fromstring(xml_content)
    return root.findall('.//wfs:FeatureType', namespace)

# Function to extract the year from the layer title
def extract_year(title):
    match = re.search(r'\b(19|20)\d{2}\b', title)
    return int(match.group()) if match else None

# Function to find the latest layer for a given list of layer names
def find_latest_layer(layers, keyword, exact=False):
    latest_layer = None
    latest_year = -1
    for layer in layers:
        name = layer.find('wfs:Name', namespace).text
        title = layer.find('wfs:Title', namespace).text.strip()  # Strip leading/trailing spaces
        year = extract_year(title)

        # Log the title being processed
        print(f"Processing layer title: '{title}'")

        # Normalize the title and keyword to lowercase for comparison
        normalized_title = re.sub(r'\s+', ' ', title.lower())  # Replace multiple spaces with a single space
        normalized_keyword = keyword.lower()

        # Check for exact match if required, otherwise check for general match
        if exact:
            if normalized_keyword == normalized_title and "generalised" in normalized_title and year:
                print(f"Useful Layer Found (Exact): Name: {name}, Title: {title}, Year: {year}")
                if year > latest_year:
                    latest_layer = (name, title, year)
                    latest_year = year
        else:
            # General match with normalized keyword and title
            if normalized_keyword in normalized_title and "generalised" in normalized_title and year:
                print(f"Useful Layer Found (General): Name: {name}, Title: {title}, Year: {year}")
                if year > latest_year:
                    latest_layer = (name, title, year)
                    latest_year = year
    
    # Print the selected layer or indicate no useful layer found
    if latest_layer:
        print(f"Selected Layer: {latest_layer}")
    else:
        print(f"No useful layer found for keyword: {keyword}")
    
    return latest_layer



# Function to get current data versions from the database
async def get_current_data_versions():
    async with engine.connect() as conn:
        result = await conn.execute(text("SELECT * FROM versioning.data_versions"))
        return [dict(row) for row in result.mappings()]  # Use result.mappings() to access rows as dictionaries




# Function to insert or update data versions in the database
async def insert_data_version(dataset_name, year, schema_name):
    async with SessionLocal() as session:
        try:
            # Insert the record, and only update if the combination of dataset_name, year, and schema_name already exists
            query = text("""
                INSERT INTO versioning.data_versions (dataset_name, year, schema_name, updated_at)
                VALUES (:dataset_name, :year, :schema_name, :updated_at)
                ON CONFLICT (dataset_name, year, schema_name) 
                DO NOTHING
            """)
            await session.execute(query, {
                "dataset_name": dataset_name,
                "year": year,
                "schema_name": schema_name,
                "updated_at": datetime.utcnow()
            })
            await session.commit()
            print(f"Successfully inserted version for {dataset_name} with schema {schema_name} and year {year}.")
        except IntegrityError as e:
            await session.rollback()
            print(f"Integrity error during insert: {e}")
            raise
        except Exception as e:
            await session.rollback()
            print(f"Error during insert: {e}")
            raise

      
        
async def create_table_if_not_exists(schema_name, dataset_name, year):
    # Enclose schema name in double quotes if it starts with a number
    if schema_name[0].isdigit():
        schema_name = f'"{schema_name}"'

    # Get the table structure for the given dataset and year
    table_info = get_table_structure(dataset_name, year)
    
    if not table_info:
        raise ValueError(f"Unknown dataset name: {dataset_name}")

    table_name = table_info["table_name"]
    columns = table_info["columns"]

    # Generate the columns part of the CREATE TABLE statement with no default values
    columns_definition = ",\n".join(
        [f"{col} TEXT" if col in ["alpha_code", "Issue_type"]
         else f"{col} TEXT" if col in ["ES_num_code", "Vacancies"] 
         else (f"{col} GEOMETRY" if col == "Shape" 
               else f"{col} FLOAT" if col in ["LAND_AREA_SQ_KM", "AREA_SQ_KM", "Shape_Length", "Shape_Area"] 
               else f"{col} BOOLEAN" if col == "dw_flag"  # Set dw_flag to BOOLEAN
               else f"{col} TEXT") 
         for col in columns]
    )

    # Construct the final CREATE TABLE query
    table_creation_query = f"""
    CREATE TABLE IF NOT EXISTS {schema_name}.{table_name} (
        id SERIAL PRIMARY KEY,
        {columns_definition}
    );
    """

    async with SessionLocal() as session:
        try:
            # Check if schema exists, if not create it
            await session.execute(text(f"CREATE SCHEMA IF NOT EXISTS {schema_name};"))
            print(f"Executing schema creation query: CREATE SCHEMA IF NOT EXISTS {schema_name};")

            # Execute the table creation query
            await session.execute(text(table_creation_query))
            print(f"Executing table creation query:\n{table_creation_query}")

            # Commit the transaction
            await session.commit()
            print("Transaction committed successfully.")
        except Exception as e:
            # Rollback the transaction if an error occurs
            await session.rollback()
            print(f"Exception occurred: {e}")
            raise e



        
async def download_and_insert_data(dataset_name, layer_id, schema_name, year):
    # Enclose schema name in double quotes if it starts with a number
    if schema_name[0].isdigit():
        schema_name = f'"{schema_name}"'
    
    # Get the table structure for the given dataset name and year
    table_info = get_table_structure(dataset_name, year)
    
    if not table_info:
        raise HTTPException(status_code=400, detail=f"Unknown dataset: {dataset_name}")
    
    table_name = table_info["table_name"]
    columns = table_info["columns"]
    
    # Build the WFS GetFeature URL for the specific layer
    wfs_url = f"https://datafinder.stats.govt.nz/services;key=afaf73bb99e449b5a156b22c31be7112/wfs/?service=WFS&version=2.0.0&request=GetFeature&typeName={layer_id}&outputFormat=json"
    
    # Fetch the data
    response = requests.get(wfs_url)
    if response.status_code != 200:
        raise HTTPException(status_code=500, detail=f"Failed to fetch data from WFS: {response.status_code}")
    
    # Load the data into a GeoDataFrame
    gdf = gpd.read_file(response.text)

    # Filter out rows with None geometries
    gdf = gdf[gdf['geometry'].notnull()]

    # Convert the GeoDataFrame to WKT (Well-Known Text) for insertion into PostGIS
    gdf['geometry'] = gdf['geometry'].apply(lambda x: x.wkt)

    # Generate the column names for the insert query
    column_names = ", ".join(columns)
    placeholders = ", ".join([f":{col}" for col in columns])

    # Construct the insert query dynamically
    insert_query = f"""
    INSERT INTO {schema_name}.{table_name} ({column_names})
    VALUES ({placeholders})
    """

    async with SessionLocal() as session:
        try:
            # Start a transaction
            async with session.begin():
                for _, row in gdf.iterrows():
                    # Prepare the row data as a dictionary
                    row_data = {col: row.get(col) for col in columns}
                    row_data["Shape"] = row['geometry']

                    # Check if the record already exists before inserting
                    # Assuming the table has a primary key or unique field (e.g., `id` or `CONyear_V1_00`)
                    select_query = f"""
                    SELECT 1 FROM {schema_name}.{table_name}
                    WHERE {columns[0]} = :{columns[0]}  -- Assuming the first column is the unique identifier
                    """
                    existing_record = await session.execute(text(select_query), row_data)

                    # Insert the record only if it doesn't exist
                    if not existing_record.fetchone():
                        await session.execute(text(insert_query), row_data)
                    else:
                        print(f"Record for {row_data[columns[0]]} already exists, skipping insertion.")
            print(f"Data inserted successfully into {schema_name}.{table_name}.")
        except Exception as e:
            await session.rollback()
            print(f"Failed to insert data into {schema_name}.{table_name}: {e}")
            raise e



File: ./app/services/get_entitlement/get_entitlement_noRoll.py
---------------------------------
# Standard Library Imports
import asyncio
import math

# Third-Party Library Imports
from fastapi import HTTPException
from databases import Database
import googlemaps
from pyproj import Proj, Transformer

# Local Application Imports
from models.models import AddressQueryNoRoll




def fetch_coordinates_from_google_maps(place_id):
    """Fetches coordinates for a given Google Maps place ID and converts them to NZTM2000."""
    api_key = 'AIzaSyCsvhHz6xMhry_y9PPjdwL3hFg4wwfBD9Y'  # Replace with your actual API key
    gmaps = googlemaps.Client(key=api_key)
    transformer = Transformer.from_crs("EPSG:4326", "EPSG:2193", always_xy=True)
    try:
        result = gmaps.geocode(place_id=place_id)
        if result:
            location = result[0]['geometry']['location']
            x, y = transformer.transform(location['lng'], location['lat'])
            if math.isinf(x) or math.isinf(y):
                raise ValueError("Transformed coordinates are infinite.")
            return {'coordinates': {'x': x, 'y': y}}
        else:
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None


def process_entitlement_data(data, year: str):
    # Filter out 'Area Outside' before renaming the columns
    entitlement_result_filtered = {
        key: ("null" if str(value).startswith("Area Outside") else value)
        for key, value in data.items()
    }

    # Specific condition to remove the 'Regional Council' if 'General Constituency' is null
    if entitlement_result_filtered.get('cons_id') == "null":
        entitlement_result_filtered['rc_name'] = "null"

    # Define a mapping of column aliases to real-world names
    column_name_mapping = {
        "ta_name": "District/City Council",
        "ta_id": "District/City Council Num Code",
        "ward_name": "General Ward",
        "ward_id": "General Ward Num Code",
        "mward_name": "Maori Ward",
        "mward_id": "Maori Ward Num Code",
        "talb_name": "Local Board Area",
        "talb_id": "Local Board Area Num Code",
        "cb_name": "Community Board",
        "cb_id": "Community Board Num Code",
        "tasub_name": "Subdivision",
        "tasub_id": "Subdivision Num Code",
        "rc_name": "Regional Council",
        "rc_id": "Regional Council Num Code",
        "cons_name": "General Constituency",
        "cons_id": "General Constituency Num Code",
        "mcon_name": "Maori Constituency",
        "mcon_id": "Maori Constituency Num Code",
        "mesh_id": "Meshblock"
    }

    # Apply column name mapping while maintaining the order specified in column_name_mapping
    real_world_entitlement_result = {
        column_name_mapping[key]: entitlement_result_filtered.get(key, "null")
        for key in column_name_mapping
    }

    # Specific conditional filtering for local board areas before general filtering
    local_board_key = 'Local Board Area'
    if real_world_entitlement_result.get(local_board_key, "") == "null" or not real_world_entitlement_result.get(local_board_key, "").endswith("Local Board Area"):
        real_world_entitlement_result[local_board_key] = "null"
        real_world_entitlement_result[local_board_key + " Num Code"] = "null"

    # Specific conditional filtering for community boards
    community_board_key = 'Community Board'
    if real_world_entitlement_result.get(community_board_key, "").endswith("Local Board Area"):
        real_world_entitlement_result[community_board_key] = "null"
        real_world_entitlement_result[community_board_key + " Num Code"] = "null"

    # Filter out entries where the name is 'null'
    filtered_result = {
        key: value
        for key, value in real_world_entitlement_result.items()
        if not (value == "null" and "Num Code" not in key)
    }

    # Filter out num codes where their corresponding name is 'null'
    final_result = {
        key: value
        for key, value in filtered_result.items()
        if not (key.endswith(" Num Code") and filtered_result.get(key.replace(" Num Code", ""), "null") == "null")
    }

    # Remove specific words from the values
    final_result = {
        key: remove_words(value, key)
        for key, value in final_result.items()
    }

    # Include geometry if present and format as GeoJSON FeatureCollection
    if 'shape' in data:
        geometry = data['shape']
        final_result['geometry'] = {
            "type": "FeatureCollection",
            "features": [
                {
                    "type": "Feature",
                    "geometry": geometry,
                    "properties": {}
                }
            ]
        }

    return final_result


def remove_words(value, key):
    """Removes specific words from the value based on the key."""
    word_removal_mapping = {
        "District/City Council": ["District"],
        "General Ward": ["General", "Ward"],
        "Maori Ward": ["Maori", "Māori", "Ward"],
        "Local Board Area": ["Local", "Board", "Area"],
        "Community Board": ["Community"],
        "Subdivision": ["Subdivision"],
        "Regional Council": ["Region"],
        "General Constituency": ["Constituency"],
        "Maori Constituency": ["Maori", "Māori", "Constituency"]
    }
    if key in word_removal_mapping and value != "null":
        #print(f"Original value for {key}: {value}")  # Debug statement
        for word in word_removal_mapping[key]:
            value = value.replace(word, "").strip()
        #print(f"Processed value for {key}: {value}")  # Debug statement
    return value




File: ./app/services/get_entitlement/get_entitlement_roll.py
---------------------------------
# Third-Party Library Imports
from fastapi import HTTPException
from databases import Database

# Local Application Imports
from models.models import AddressQuery 


async def check_address_entitlement(query: AddressQuery, database: Database):
    if query.roll not in ("General", "Maori"):
        raise HTTPException(status_code=400, detail="Invalid roll selection.")

    columns_maori = (
        "ta2023_v_1, mward2023_1,  talb2023_1, "
        "tasub2023_1, regc2023_1, mcon2023_1, "
        "cb2023_v_1"
    )
    columns_general = (
        "ta2023_v_1, ward2023_1,  talb2023_1, "
        "tasub2023_1, regc2023_1, con2023__1, "
        "cb2023_v_1"
    )

    columns_to_select = columns_maori if query.roll == "Maori" else columns_general

    sql_query = f"""
    SELECT {columns_to_select}
    FROM "2024"."address_entitlement_linz_stats"
    WHERE full_add_1 = :address
    LIMIT 1
    """
    entitlement_result = await database.fetch_one(sql_query, values={"address": query.address})

    if not entitlement_result:
        return {}
      # Handle 'Area Outside' for Maori wards or constituencies
    outside_ward = outside_constituency = False
    if query.roll == "Maori":
        outside_ward = entitlement_result["mward2023_1"].startswith("Area Outside Māori Ward") if "mward2023_1" in entitlement_result and entitlement_result["mward2023_1"] else False
        outside_constituency = entitlement_result["mcon2023_1"].startswith("Area Outside Māori Constituency") if "mcon2023_1" in entitlement_result and entitlement_result["mcon2023_1"] else False

        if outside_ward or outside_constituency:
            entitlement_result = await database.fetch_one(
                f"SELECT {columns_general} FROM \"2024\".\"address_entitlement_linz_stats\" WHERE full_add_1 = :address LIMIT 1",
                values={"address": query.address}
            )



    # Filtering 'Area Outside' before renaming the columns
    entitlement_result_filtered = {key: value for key, value in dict(entitlement_result).items() if not str(value).startswith("Area Outside")}
    # Define a mapping of database column names to real-world names
    column_name_mapping = {
        "mb2023_v1_": "Meshblock","ta2023_v_1": "District/City Council", "ward2023_1": "General Ward", "ward2023_v": "General Ward Code", "ta2023_v1_": "District/City Council Code", "talb2023_1": "Local Board Area",
        "talb2023_v": "Local Board Code", "tasub2023_1": "Subdivision", "tasub2023_": "Sub Division Code", "regc2023_1": "Region Council", "regc2023_v": "Regional Council Code",
        "con2023__1": "General Constituency", "con2023_v1": "Regional Constituency Code", "cb2023_v_1": "Community Board", "cb2023_v1_": "Community Board Code", "mward2023_1": "Maori Ward",
        "mward2023_": "Maori Ward Code", "mcon2023_1": "Maori Constituency", "mcon2023_v": "Maori Constituency Code",
        # ... Add any other mappings here
    }
    # Apply column name mapping
    real_world_entitlement_result = {column_name_mapping.get(key, key): value for key, value in entitlement_result_filtered.items()}
    
    # Additional logic for filtering based on district/city value
    district_city_value = real_world_entitlement_result.get("District/City Council", "")
    if district_city_value == "Auckland":
        # Remove "Community Board" entry from entitlement
        real_world_entitlement_result.pop("Community Board", None)
    else:
        # Remove "Local Board Area" entry for other district/city values
        real_world_entitlement_result.pop("Local Board Area", None)

    return real_world_entitlement_result



File: ./app/services/get_entitlement/get_entitlements_byCoordinates_noRoll.py
---------------------------------
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession
import json
from sqlalchemy.exc import SQLAlchemyError
from fastapi import HTTPException

# Local Application Imports
from models.models import Coordinates



async def process_coordinates(coordinates: Coordinates, session: AsyncSession, year: str):
    """
    Process coordinates to retrieve entitlement data using SQLAlchemy's AsyncSession.
    Also retrieve the appropriate form_name from combination_table based on the entitlements.
    """
    try:
        # Ensure 'year' is a safe value (e.g., numeric string), to prevent SQL injection
        if not year.isdigit():
            raise ValueError("Invalid year parameter.")

        # Define the columns to select for entitlements
        # Define the columns to select for entitlements, adding licensing trust columns
        # Define the columns to select for entitlements, selecting only es_num_code and name from licensing_trust
        columns = (
            f"w.es_num_code as ward_id, w.ward{year}_v1_00_name as ward_name, "
            f"ta.ta{year}_v1_00 as ta_id, ta.ta{year}_v1_00_name as ta_name, "
            f"talb.talb{year}_v1_00 as talb_id, talb.talb{year}_v1_00_name as talb_name, "
            f"tasub.tasub{year}_v1_00 as tasub_id, tasub.tasub{year}_v1_00_name as tasub_name, "
            f"rc.regc{year}_v1_00 as rc_id, rc.regc{year}_v1_00_name as rc_name, "
            f"mw.es_num_code as mward_id, mw.mward{year}_v1_00_name as mward_name, "
            f"mc.es_num_code as mcon_id, mc.mcon{year}_v1_00_name as mcon_name, "
            f"cons.es_num_code as cons_id, cons.con{year}_v1_00_name as cons_name, "
            f"cb.cb{year}_v1_00 as cb_id, cb.cb{year}_v1_00_name as cb_name, "
            f"mesh.mb{year}_v1_00 as mesh_id, "
            f"lt.es_num_code as lt_id, lt.name as lt_name, "
            f"ST_AsGeoJSON(ST_Transform(mesh.shape, 2193)) as shape"
        )

        # Construct the SQL query to retrieve the entitlement data, including only es_num_code and name from licensing_trust
        sql_query = f"""
            SELECT {columns}
            FROM "{year}"."meshblock" mesh
            LEFT JOIN "{year}"."territorial_authority" ta 
                ON ST_Intersects(mesh.shape, ta.shape) 
                AND ST_Intersects(ta.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."wards" w 
                ON ST_Intersects(mesh.shape, w.shape) 
                AND ST_Intersects(w.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."maori_ward" mw 
                ON ST_Intersects(mesh.shape, mw.shape) 
                AND ST_Intersects(mw.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."territorial_authority_local_board" talb 
                ON ST_Intersects(mesh.shape, talb.shape) 
                AND ST_Intersects(talb.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."community_board" cb 
                ON ST_Intersects(mesh.shape, cb.shape) 
                AND ST_Intersects(cb.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."subdivision" tasub 
                ON ST_Intersects(mesh.shape, tasub.shape) 
                AND ST_Intersects(tasub.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."regional_council" rc 
                ON ST_Intersects(mesh.shape, rc.shape) 
                AND ST_Intersects(rc.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."constituency" cons 
                ON ST_Intersects(mesh.shape, cons.shape) 
                AND ST_Intersects(cons.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "{year}"."maori_constituency" mc 
                ON ST_Intersects(mesh.shape, mc.shape) 
                AND ST_Intersects(mc.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            LEFT JOIN "live"."licensing_trust" lt
                ON ST_Intersects(mesh.shape, lt.shape)
                AND ST_Intersects(lt.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
            WHERE ST_Intersects(mesh.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        """

        # Execute the entitlement query asynchronously
        query = text(sql_query)
        params = {"x": coordinates.easting, "y": coordinates.northing}
        result = await session.execute(query, params)
        entitlement_result = result.fetchone()

        if not entitlement_result or all(value is None for value in entitlement_result):
            return {"status": "error", "message": "No entitlement data found for these coordinates."}

        # Convert the result to a dictionary
        entitlement_dict = dict(entitlement_result._mapping)

        # Print entitlement dictionary
        print(f"Entitlement Data: {entitlement_dict}")
        
        # Convert the shape from JSON string to a dictionary
        if 'shape' in entitlement_dict:
            entitlement_dict['shape'] = json.loads(entitlement_dict['shape'])

        # Process the entitlement data
        processed_data = process_entitlement_data(entitlement_dict, year)

        # Print processed data
        print(f"Processed Data: {processed_data}")

        ta_id = processed_data.get('District/City Council Num Code')
        rc_id = processed_data.get('Regional Council Num Code')

        def clean_id(field_value):
            if field_value and str(field_value).startswith(str(ta_id)):
                return int(str(field_value)[len(str(ta_id)):].lstrip('0') or 0)
            return None

        def clean_rc_id(field_value):
            if field_value and str(field_value).startswith(str(rc_id)):
                return int(str(field_value)[len(str(rc_id)):].lstrip('0') or 0)
            return None
        
        # Safely retrieve and handle nullable values
        def safe_int(value):
            try:
                return int(value) if value is not None else None
            except ValueError:
                return None
    

        # Query for General form_name
        params_general = {
            'ta_id': safe_int(ta_id),
            'ward_id': safe_int(processed_data.get('General Ward Num Code')),
            'cb_id': clean_id(processed_data.get('Local Board Area Num Code')) or clean_id(processed_data.get('Community Board Num Code')),
            'tasub_id': clean_id(processed_data.get('Subdivision Num Code')),
            'rc_id': safe_int(rc_id),
            'cons_id': clean_rc_id(processed_data.get('General Constituency Num Code')),
            'lt_id': safe_int(processed_data.get('Licensing Trust Num Code')),
        }


        # Print parameters for the General form query
        print(f"General Query Params: {params_general}")

        general_query = f"""
            SELECT form_name 
            FROM "{year}".combination_table 
            WHERE 
                local_authority_id = :ta_id 
                AND (ward_id = :ward_id OR :ward_id IS NULL)
                AND (community_board_id = :cb_id OR :cb_id IS NULL)
                AND (subdivision_id = :tasub_id OR :tasub_id IS NULL)
                AND (regional_council_id = :rc_id OR :rc_id IS NULL)
                AND (regional_constituency_id = :cons_id OR :cons_id IS NULL)
                AND (licensing_trust_id = :lt_id OR :lt_id IS NULL)
        """
        general_result = await session.execute(text(general_query), params_general)
        general_form_name = general_result.fetchone()

        # Print the General form code result
        print(f"General Form Code: {general_form_name}")

        # Only run the Māori form query if the Māori fields exist
        maori_form_name = None
        if processed_data.get('Maori Ward Num Code') or processed_data.get('Maori Constituency Num Code'):
            # Query for Māori form_name
            params_maori = {
                'ta_id': safe_int(ta_id),
                'ward_id': safe_int(processed_data.get('Maori Ward Num Code')),
                'cb_id': clean_id(processed_data.get('Local Board Area Num Code')) or clean_id(processed_data.get('Community Board Num Code')),
                'tasub_id': clean_id(processed_data.get('Subdivision Num Code')),
                'rc_id': safe_int(rc_id),
                'mcon_id': safe_int(processed_data.get('Maori Constituency Num Code')),
                'lt_id': safe_int(processed_data.get('Licensing Trust Num Code')),
            }
            # Print parameters for the Māori form query
            print(f"Māori Query Params: {params_maori}")

            maori_query = f"""
                SELECT form_name 
                FROM "{year}".combination_table 
                WHERE 
                    local_authority_id = :ta_id 
                    AND (ward_id = :ward_id OR :ward_id IS NULL)
                    AND (community_board_id = :cb_id OR :cb_id IS NULL)
                    AND (subdivision_id = :tasub_id OR :tasub_id IS NULL)
                    AND (regional_council_id = :rc_id OR :rc_id IS NULL)
                    AND (regional_constituency_id = :mcon_id OR :mcon_id IS NULL)
                    AND (licensing_trust_id = :lt_id OR :lt_id IS NULL)
            """
            maori_result = await session.execute(text(maori_query), params_maori)
            maori_form_name = maori_result.fetchone()

            # Print the Māori form code result
            print(f"Māori Form Code: {maori_form_name}")

        # Add form names to the processed_data
        processed_data['General Form Code'] = general_form_name[0] if general_form_name else None
        processed_data['Maori Form Code'] = maori_form_name[0] if maori_form_name else None

        # Return "Not an IEL Council" if both form codes are missing
        if not processed_data['General Form Code'] and not processed_data['Maori Form Code']:
            processed_data['message'] = "Non-IESL Client/No Combination"

        return {"status": "success", "data": processed_data}
    
    except SQLAlchemyError as e:
        # Handle SQLAlchemy errors
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

    except Exception as e:
        # Handle other unexpected errors
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")





def process_entitlement_data(data, year: str):
    # Filter out 'Area Outside' before renaming the columns
    entitlement_result_filtered = {
        key: ("null" if str(value).startswith("Area Outside") else value)
        for key, value in data.items()
    }
    
       
  

    # Specific condition to remove the 'Regional Council' if 'General Constituency' is null
    if entitlement_result_filtered.get('cons_id') == "null":
        entitlement_result_filtered['rc_name'] = "null"

    # Define a mapping of column aliases to real-world names
    column_name_mapping = {
        "ta_name": "District/City Council",
        "ta_id": "District/City Council Num Code",
        "ward_name": "General Ward",
        "ward_id": "General Ward Num Code",
        "mward_name": "Maori Ward",
        "mward_id": "Maori Ward Num Code",
        "talb_name": "Local Board Area",
        "talb_id": "Local Board Area Num Code",
        "cb_name": "Community Board",
        "cb_id": "Community Board Num Code",
        "tasub_name": "Subdivision",
        "tasub_id": "Subdivision Num Code",
        "rc_name": "Regional Council",
        "rc_id": "Regional Council Num Code",
        "cons_name": "General Constituency",
        "cons_id": "General Constituency Num Code",
        "mcon_name": "Maori Constituency",
        "mcon_id": "Maori Constituency Num Code",
        "mesh_id": "Meshblock",
        "lt_id": "Licensing Trust Num Code",
        "lt_name": "Licensing Trust"
    }

    # Apply column name mapping while maintaining the order specified in column_name_mapping
    real_world_entitlement_result = {
        column_name_mapping[key]: entitlement_result_filtered.get(key, "null")
        for key in column_name_mapping
    }

    # Specific conditional filtering for local board areas before general filtering
    local_board_key = 'Local Board Area'
    if real_world_entitlement_result.get(local_board_key, "") == "null" or not real_world_entitlement_result.get(local_board_key, "").endswith("Local Board Area"):
        real_world_entitlement_result[local_board_key] = "null"
        real_world_entitlement_result[local_board_key + " Num Code"] = "null"

    # Specific conditional filtering for community boards
    community_board_key = 'Community Board'
    if real_world_entitlement_result.get(community_board_key, "").endswith("Local Board Area"):
        real_world_entitlement_result[community_board_key] = "null"
        real_world_entitlement_result[community_board_key + " Num Code"] = "null"

    # Filter out entries where the name is 'null'
    filtered_result = {
        key: value
        for key, value in real_world_entitlement_result.items()
        if not (value == "null" and "Num Code" not in key)
    }

    # Filter out num codes where their corresponding name is 'null'
    final_result = {
        key: value
        for key, value in filtered_result.items()
        if not (key.endswith(" Num Code") and filtered_result.get(key.replace(" Num Code", ""), "null") == "null")
    }

    # Remove specific words from the values
    final_result = {
        key: remove_words(value, key)
        for key, value in final_result.items()
    }
    

    # Include geometry if present and format as GeoJSON FeatureCollection
    if 'shape' in data:
        geometry = data['shape']
        final_result['geometry'] = {
            "type": "FeatureCollection",
            "features": [
                {
                    "type": "Feature",
                    "geometry": geometry,
                    "properties": {}
                }
            ]
        }

    return final_result



def remove_words(value, key):
    """Removes specific words from the value based on the key."""
    word_removal_mapping = {
        "District/City Council": ["District"],
        "General Ward": ["General", "Ward"],
        "Maori Ward": ["Maori", "Māori", "Ward"],
        "Local Board Area": ["Local", "Board", "Area"],
        "Community Board": ["Community"],
        "Subdivision": ["Subdivision"],
        "Regional Council": ["Region"],
        "General Constituency": ["Constituency"],
        "Maori Constituency": ["Maori", "Māori", "Constituency"]
    }
    if key in word_removal_mapping and value != "null":
        #print(f"Original value for {key}: {value}")  # Debug statement
        for word in word_removal_mapping[key]:
            value = value.replace(word, "").strip()
        #print(f"Processed value for {key}: {value}")  # Debug statement
    return value




'''
async def process_coordinates(coordinates: Coordinates, session: AsyncSession, year: str):
    """
    Process coordinates to retrieve entitlement data using SQLAlchemy's AsyncSession.

    :param coordinates: Coordinates object containing easting and northing.
    :param session: An instance of AsyncSession.
    :param year: The year/schema to query.
    :return: Processed entitlement data.
    """
    # Ensure 'year' is a safe value (e.g., numeric string), to prevent SQL injection
    if not year.isdigit():
        raise ValueError("Invalid year parameter.")

    # Define the columns to select
    columns = (
        f"w.ward{year}_v1_00 as ward_id, w.ward{year}_v1_00_name as ward_name, "
        f"ta.ta{year}_v1_00 as ta_id, ta.ta{year}_v1_00_name as ta_name, "
        f"talb.talb{year}_v1_00 as talb_id, talb.talb{year}_v1_00_name as talb_name, "
        f"tasub.tasub{year}_v1_00 as tasub_id, tasub.tasub{year}_v1_00_name as tasub_name, "
        f"rc.regc{year}_v1_00 as rc_id, rc.regc{year}_v1_00_name as rc_name, "
        f"mw.mward{year}_v1_00 as mward_id, mw.mward{year}_v1_00_name as mward_name, "
        f"mc.mcon{year}_v1_00 as mcon_id, mc.mcon{year}_v1_00_name as mcon_name, "
        f"cons.con{year}_v1_00 as cons_id, cons.con{year}_v1_00_name as cons_name, "
        f"cb.cb{year}_v1_00 as cb_id, cb.cb{year}_v1_00_name as cb_name, "
        f"mesh.mb{year}_v1_00 as mesh_id, ST_AsGeoJSON(ST_Transform(mesh.shape, 2193)) as shape"
    )

    # Construct the SQL query
    sql_query = f"""
        SELECT {columns}
        FROM "{year}"."meshblock" mesh
        LEFT JOIN "{year}"."territorial_authority" ta 
            ON ST_Intersects(mesh.shape, ta.shape) 
            AND ST_Intersects(ta.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."wards" w 
            ON ST_Intersects(mesh.shape, w.shape) 
            AND ST_Intersects(w.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."maori_ward" mw 
            ON ST_Intersects(mesh.shape, mw.shape) 
            AND ST_Intersects(mw.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."territorial_authority_local_board" talb 
            ON ST_Intersects(mesh.shape, talb.shape) 
            AND ST_Intersects(talb.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."community_board" cb 
            ON ST_Intersects(mesh.shape, cb.shape) 
            AND ST_Intersects(cb.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."subdivision" tasub 
            ON ST_Intersects(mesh.shape, tasub.shape) 
            AND ST_Intersects(tasub.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."regional_council" rc 
            ON ST_Intersects(mesh.shape, rc.shape) 
            AND ST_Intersects(rc.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."constituency" cons 
            ON ST_Intersects(mesh.shape, cons.shape) 
            AND ST_Intersects(cons.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."maori_constituency" mc 
            ON ST_Intersects(mesh.shape, mc.shape) 
            AND ST_Intersects(mc.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        WHERE ST_Intersects(mesh.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
    """

    try:
        # Use SQLAlchemy's text construct and execute the query asynchronously
        query = text(sql_query)
        params = {"x": coordinates.easting, "y": coordinates.northing}
        result = await session.execute(query, params)
        entitlement_result = result.fetchone()

        if not entitlement_result or all(value is None for value in entitlement_result):
            return {"status": "error", "message": "No entitlement data found for these coordinates."}

        # Convert the result to a dictionary
        entitlement_dict = dict(entitlement_result._mapping)

        # Convert the shape from JSON string to a dictionary
        if 'shape' in entitlement_dict:
            entitlement_dict['shape'] = json.loads(entitlement_dict['shape'])

        return {"status": "success", "data": process_entitlement_data(entitlement_dict, year)}

    except SQLAlchemyError as e:
        # Log the error and raise an HTTPException or return an error message
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")
'''


File: ./app/services/get_entitlement/get_entitlement_noRoll_ratepayer.py
---------------------------------
# Standard Library Imports
import asyncio
import math
import json

# Third-Party Library Imports
from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
import googlemaps
from pyproj import Proj, Transformer

# Local Application Imports
from models.models import AddressQueryRatepayer, Coordinates

async def check_address_entitlement_no_roll(query: AddressQueryRatepayer, session: AsyncSession):
    """
    Check address entitlement without roll using the provided easting and northing coordinates.

    :param query: An instance of AddressQueryRatepayer containing the coordinates.
    :param session: An instance of AsyncSession.
    :return: Entitlement data processed from the coordinates.
    """
    coordinates = Coordinates(easting=query.easting, northing=query.northing)
    return await process_coordinates(coordinates, session, '2023')

async def process_coordinates(coordinates: Coordinates, session: AsyncSession, year: str):
    """
    Process the coordinates to retrieve entitlement data from the database.

    :param coordinates: An instance of Coordinates with easting and northing.
    :param session: An instance of AsyncSession.
    :param year: The year to use for the database schema.
    :return: Processed entitlement data.
    """
    # Ensure 'year' is a valid numeric string to prevent SQL injection
    if not year.isdigit():
        raise ValueError("Invalid year parameter")

    columns = (
        f"w.ward{year}_v1_00 as ward_id, w.ward{year}_v1_00_name as ward_name, "
        f"ta.ta{year}_v1_00 as ta_id, ta.ta{year}_v1_00_name as ta_name, "
        f"talb.talb{year}_v1_00 as talb_id, talb.talb{year}_v1_00_name as talb_name, "
        f"tasub.tasub{year}_v1_00 as tasub_id, tasub.tasub{year}_v1_00_name as tasub_name, "
        f"rc.regc{year}_v1_00 as rc_id, rc.regc{year}_v1_00_name as rc_name, "
        f"mw.mward{year}_v1_00 as mward_id, mw.mward{year}_v1_00_name as mward_name, "
        f"mc.mcon{year}_v1_00 as mcon_id, mc.mcon{year}_v1_00_name as mcon_name, "
        f"cons.con{year}_v1_00 as cons_id, cons.con{year}_v1_00_name as cons_name, "
        f"cb.cb{year}_v1_00 as cb_id, cb.cb{year}_v1_00_name as cb_name, "
        f"mesh.mb{year}_v1_00 as mesh_id"
    )

    sql_query = f"""
        SELECT {columns}
        FROM "{year}"."meshblock" mesh
        LEFT JOIN "{year}"."territorial_authority" ta 
            ON ST_Intersects(mesh.shape, ta.shape) 
            AND ST_Intersects(ta.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."wards" w 
            ON ST_Intersects(mesh.shape, w.shape) 
            AND ST_Intersects(w.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."maori_ward" mw 
            ON ST_Intersects(mesh.shape, mw.shape) 
            AND ST_Intersects(mw.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."territorial_authority_local_board" talb 
            ON ST_Intersects(mesh.shape, talb.shape) 
            AND ST_Intersects(talb.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."community_board" cb 
            ON ST_Intersects(mesh.shape, cb.shape) 
            AND ST_Intersects(cb.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."subdivision" tasub 
            ON ST_Intersects(mesh.shape, tasub.shape) 
            AND ST_Intersects(tasub.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."regional_council" rc 
            ON ST_Intersects(mesh.shape, rc.shape) 
            AND ST_Intersects(rc.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."constituency" cons 
            ON ST_Intersects(mesh.shape, cons.shape) 
            AND ST_Intersects(cons.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        LEFT JOIN "{year}"."maori_constituency" mc 
            ON ST_Intersects(mesh.shape, mc.shape) 
            AND ST_Intersects(mc.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
        WHERE ST_Intersects(mesh.shape, ST_SetSRID(ST_MakePoint(:x, :y), 2193))
    """

    try:
        # Use SQLAlchemy's text construct and execute the query asynchronously
        query_text = text(sql_query)
        params = {"x": coordinates.easting, "y": coordinates.northing}
        result = await session.execute(query_text, params)
        entitlement_result = result.fetchone()

        # If entitlement_result is not None, convert it to a dictionary for easier inspection
        if entitlement_result:
            entitlement_dict = dict(entitlement_result._mapping)
            # Uncomment the following line for debugging purposes
            # print(f"Entitlement Result: {json.dumps(entitlement_dict, indent=2)}")
        else:
            print("No data retrieved.")
            return {"status": "error", "message": "No entitlement data found for these coordinates."}

        if all(value is None for value in entitlement_result):
            return {"status": "error", "message": "No entitlement data found for these coordinates."}

        return process_entitlement_data(entitlement_dict)
    except Exception as e:
        print(f"Error processing coordinates: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

def process_entitlement_data(data):
    """
    Process the entitlement data by renaming columns, filtering out unnecessary data, and applying specific conditions.

    :param data: A dictionary containing the raw entitlement data.
    :return: A dictionary with the processed entitlement data.
    """
    # Filter out 'Area Outside' before renaming the columns
    entitlement_result_filtered = {
        key: ("null" if str(value).startswith("Area Outside") else value)
        for key, value in data.items()
    }

    # Specific condition to remove the 'Regional Council' if 'General Constituency' is null
    if entitlement_result_filtered.get('cons_name') == "null":
        entitlement_result_filtered['rc_name'] = "null"

    # Define a static mapping based on your actual query result
    column_name_mapping = {
        "ta_id": "District/City Council Num Code",
        "ta_name": "District/City Council",
        "ward_id": "General Ward Num Code",
        "ward_name": "General Ward",
        "mward_id": "Maori Ward Num Code",
        "mward_name": "Maori Ward",
        "talb_id": "Local Board Area Num Code",
        "talb_name": "Local Board Area",
        "cb_id": "Community Board Num Code",
        "cb_name": "Community Board",
        "tasub_id": "Subdivision Num Code",
        "tasub_name": "Subdivision",
        "rc_id": "Regional Council Num Code",
        "rc_name": "Regional Council",
        "cons_id": "General Constituency Num Code",
        "cons_name": "General Constituency",
        "mcon_id": "Maori Constituency Num Code",
        "mcon_name": "Maori Constituency",
        "mesh_id": "Meshblock Num Code"
    }

    # Apply the mapping based on the actual query result keys
    real_world_entitlement_result = {
        column_name_mapping.get(key, key): value
        for key, value in entitlement_result_filtered.items()
    }

    # Specific conditional filtering for local board areas before general filtering
    local_board_key = 'Local Board Area'
    if real_world_entitlement_result.get(local_board_key, "") == "null" or not real_world_entitlement_result.get(local_board_key, "").endswith("Local Board Area"):
        real_world_entitlement_result[local_board_key] = "null"
        real_world_entitlement_result[local_board_key + " Num Code"] = "null"

    # Specific conditional filtering for community boards
    community_board_key = 'Community Board'
    if real_world_entitlement_result.get(community_board_key, "").endswith("Local Board Area"):
        real_world_entitlement_result[community_board_key] = "null"
        real_world_entitlement_result[community_board_key + " Num Code"] = "null"

    # Filter out entries where the name is 'null'
    filtered_result = {
        key: value
        for key, value in real_world_entitlement_result.items()
        if not (value == "null" and "Num Code" not in key)
    }

    # Filter out num codes where their corresponding name is 'null'
    final_result = {
        key: value
        for key, value in filtered_result.items()
        if not (key.endswith(" Num Code") and filtered_result.get(key.replace(" Num Code", ""), "null") == "null")
    }

    return final_result



File: ./app/services/constituency_service.py
---------------------------------
# services/constituency_service.py

# Standard Library Imports
from typing import List, Dict, Any


async def fetch_regional_councils_with_constituencies(database, year: str) -> List[Dict[str, Any]]:
    try:
        # Fetch regional councils
        regc_query = f"""
        SELECT regc{year}_V1_00 AS id, regc{year}_V1_00_NAME AS name, alpha_code, issue_type 
        FROM "{year}".regional_council
        """
        regional_councils = await database.fetch_all(regc_query)

        response = []
        for regc in regional_councils:
            regc_id = regc['id'].lstrip('0')  # Remove leading zeros from the regional council ID
            regc_issue_type = regc['issue_type']
            
            # Fetch general constituencies associated with the regional council
            gen_const_query = f"""
            SELECT con{year}_V1_00 AS id, con{year}_V1_00_NAME AS name, alpha_code, issue_type, vacancies 
            FROM "{year}".constituency
            WHERE LEFT(con{year}_V1_00, 2) = :regc_id
            """
            general_constituencies = await database.fetch_all(gen_const_query, values={"regc_id": regc_id})

            # Adjust general constituency IDs to remove the regional council number prefix
            general_constituencies = [
                {"id": const['id'][2:], "name": const['name'], "alpha_code": const['alpha_code'], "issue_type": const['issue_type'], "vacancies": const["vacancies"]}
                for const in general_constituencies if const['id'][2:] != '99'
            ]

            # Fetch Māori constituencies associated with the regional council
            maori_const_query = f"""
            SELECT mcon{year}_V1_00 AS id, mcon{year}_V1_00_NAME AS name, alpha_code, issue_type, vacancies 
            FROM "{year}".maori_constituency
            WHERE LEFT(mcon{year}_V1_00, 2) = :regc_id
            """
            maori_constituencies = await database.fetch_all(maori_const_query, values={"regc_id": regc_id})

            # Adjust Māori constituency IDs to remove the regional council number prefix
            maori_constituencies = [
                {"id": const['id'][2:], "name": const['name'], "alpha_code": const['alpha_code'], "issue_type": const['issue_type'], "vacancies": const["vacancies"]}
                for const in maori_constituencies if const['id'][2:] != '99'
            ]

            # Combine both constituency lists
            constituencies = general_constituencies + maori_constituencies

            # Structure the response
            regional_council_detail = {
                "id": regc_id,
                "name": regc['name'].strip().replace(" Region", ""),
                "alpha_code": regc['alpha_code'],
                "constituencies": constituencies
            }

            # Check if the 'constituencies' list is empty
            if not regional_council_detail["constituencies"]:
                regional_council_detail["issue_type"] = regc_issue_type  # Add 'issue_type' if there are no constituencies

            response.append(regional_council_detail)

        return response
    except Exception as e:
        print(f"Error fetching regional councils with constituencies: {e}")
        return []  # Return an empty list or raise an exception depending on your error handling policy



File: ./app/services/geojson.py
---------------------------------
import json
import gzip
import os
from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from tenacity import retry, stop_after_attempt, wait_fixed
import orjson
from sqlalchemy.exc import ProgrammingError
import orjson
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
import time


# Map feature names to table names
feature_to_table = {
    "Meshblock": "meshblock",
    "Councils": "territorial_authority",
    "Wards": "wards",
    "Subdivisions": "subdivision",
    "Regional Council": "regional_council",
    "General Constituency": "constituency",
    "Maori Constituency": "maori_constituency",
    "Maori Wards": "maori_ward",
    "LT": "licensing_trust",
    "Land Parcels": "nz-primary-parcels",
    "Local Board": "territorial_authority_local_board",
    "Community Board": "community_board"
    # Add more mappings as needed
}




# Benchmark the decompression function
@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
def decompress_data(data):
    start_time = time.time()
    result = json.loads(gzip.decompress(data).decode('utf-8'))
    print(f"Decompression took {time.time() - start_time:.4f} seconds")
    return result






async def fetch_geojson_data(
    feature: str,
    session: AsyncSession,
    year: str,
    redis_client,
    limit=1000,
    offset=0,
    simplify_tolerance=0.1
):
    """
    Fetch GeoJSON data for a specific feature and year.
    """
    if feature not in feature_to_table:
        # Feature validation error
        raise HTTPException(status_code=400, detail=f"Invalid feature name: {feature}")

    table_name = feature_to_table[feature]
    schema_name = str(year)  # Use year as schema name
    cache_key = f"geojson:{feature}:{year}:limit:{limit}:offset:{offset}:simplify:{simplify_tolerance}"

    # Step 1: Check cache
    try:
        cached_data = await redis_client.get(cache_key)
        if cached_data:
            print("Cache hit: Returning cached data")
            return orjson.loads(cached_data)
    except Exception as e:
        print(f"Failed to retrieve from cache: {e}")

    # Step 2: Query the database
    query = f"""
    SELECT jsonb_build_object(
        'type', 'FeatureCollection',
        'features', jsonb_agg(feature)
    ) AS geojson
    FROM (
        SELECT jsonb_build_object(
            'type', 'Feature',
            'id', "{table_name}".id,
            'geometry', ST_AsGeoJSON(ST_Simplify("{table_name}".shape, {simplify_tolerance}))::jsonb,
            'properties', to_jsonb(
                jsonb_set(
                    to_jsonb("{table_name}") - 'shape',
                    '{{centroid}}',
                    ST_AsGeoJSON(ST_Centroid("{table_name}".shape))::jsonb
                )
            )
        ) AS feature
        FROM "{schema_name}"."{table_name}"
        LIMIT {limit} OFFSET {offset}
    ) AS features;
    """

    try:
        result = await session.execute(text(query))
        row = result.fetchone()
        if row is None or row[0] is None:
            # No data found
            raise HTTPException(status_code=204, detail=f"No data found for feature {feature} in year {year}")

        geojson_data = row[0]

        # Step 3: Cache the result
        try:
            await redis_client.setex(cache_key, 3600 * 24 * 365 * 3, orjson.dumps(geojson_data))
            print("Data cached successfully")
        except Exception as e:
            print(f"Failed to save to cache: {e}")

        return geojson_data

    except ProgrammingError as e:
        # Handle missing tables
        if "UndefinedTableError" in str(e.orig):
            error_message = f"The table '{schema_name}.{table_name}' does not exist for the year {year}."
            print(error_message)
            raise HTTPException(status_code=422, detail=error_message)  # Use 422 for schema/table errors
        else:
            print(f"SQL Programming Error: {e}")
            raise HTTPException(status_code=500, detail="An error occurred during the query.")

    except Exception as e:
        print(f"Error fetching GeoJSON for feature {feature} from table {schema_name}.{table_name}: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while fetching GeoJSON data.")





async def fetch_geojson_data_LT(
    feature: str,
    session: AsyncSession,
    year: str,
    redis_client,
    limit=1000,
    offset=0,
    simplify_tolerance=0.1
):
    """
    Fetch GeoJSON data for a specific feature and year.
    """
    if feature not in feature_to_table:
        # Feature validation error
        raise HTTPException(status_code=400, detail=f"Invalid feature name: {feature}")

    table_name = feature_to_table[feature]
    schema_name = str(year)  # Use year as schema name
    cache_key = f"geojson:{feature}:{year}:limit:{limit}:offset:{offset}:simplify:{simplify_tolerance}"

    # Step 1: Check cache
    try:
        cached_data = await redis_client.get(cache_key)
        if cached_data:
            print("Cache hit: Returning cached data")
            return orjson.loads(cached_data)
    except Exception as e:
        print(f"Failed to retrieve from cache: {e}")

    # Step 2: Query the database
    query = f"""
        SELECT jsonb_build_object(
            'type', 'FeatureCollection',
            'features', jsonb_agg(feature)
        ) AS geojson
        FROM (
            SELECT jsonb_build_object(
                'type', 'Feature',
                'id', "{table_name}".gid,  -- Use gid instead of id
                'geometry', ST_AsGeoJSON(ST_Simplify("{table_name}".shape, {simplify_tolerance}))::jsonb,
                'properties', to_jsonb(
                    jsonb_set(
                        to_jsonb("{table_name}") - 'shape',
                        '{{centroid}}',
                        ST_AsGeoJSON(ST_Centroid("{table_name}".shape))::jsonb
                    )
                )
            ) AS feature
            FROM "{schema_name}"."{table_name}"
            LIMIT {limit} OFFSET {offset}
        ) AS features;
        """


    try:
        result = await session.execute(text(query))
        row = result.fetchone()
        if row is None or row[0] is None:
            # No data found
            raise HTTPException(status_code=204, detail=f"No data found for feature {feature} in year {year}")

        geojson_data = row[0]

        # Step 3: Cache the result
        try:
            await redis_client.setex(cache_key, 3600 * 24 * 365 * 3, orjson.dumps(geojson_data))
            print("Data cached successfully")
        except Exception as e:
            print(f"Failed to save to cache: {e}")

        return geojson_data

    except ProgrammingError as e:
        # Handle missing tables
        if "UndefinedTableError" in str(e.orig):
            error_message = f"The table '{schema_name}.{table_name}' does not exist for the year {year}."
            print(error_message)
            raise HTTPException(status_code=422, detail=error_message)  # Use 422 for schema/table errors
        else:
            print(f"SQL Programming Error: {e}")
            raise HTTPException(status_code=500, detail="An error occurred during the query.")

    except Exception as e:
        print(f"Error fetching GeoJSON for feature {feature} from table {schema_name}.{table_name}: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while fetching GeoJSON data.")



File: ./app/services/maps_cache_loader.py
---------------------------------
import asyncio
import json
import logging
import gzip
from redis import Redis
from databases import Database
import os
from dotenv import load_dotenv
from tenacity import retry, stop_after_attempt, wait_fixed

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Custom JSON Encoder to handle non-serializable types
class CustomEncoder(json.JSONEncoder):
    def default(self, obj):
        if hasattr(obj, 'isoformat'):  # For datetime objects or similar
            return obj.isoformat()
        elif isinstance(obj, bytes):  # For bytes, typically from binary data in databases
            return obj.decode('utf-8')
        return json.JSONEncoder.default(self, obj)

# Configure Redis client
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT"))
redis_client = Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)

# Map feature names to table names
feature_to_table = {
    "Meshblock": "meshblock",
    "Councils": "territorial_authority",
    "Wards": "wards",
    "Subdivisions": "subdivision",
    "Regional Council": "regional_council",
    "General Constituency": "constituency",
    "Maori Constituency": "maori_constituency",
    "Maori Wards": "maori_ward",
    "Local Board": "territorial_authority_local_board",
    "Community Board": "community_board",
    # Add more mappings as needed
}

def compress_data(data):
    return gzip.compress(json.dumps(data, cls=CustomEncoder).encode('utf-8'))

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))  # Retry up to 3 times with a 2-second wait
async def fetch_and_cache_geojson_data(database, feature, table_name, schema_name="2023"):
    cache_key = f"geojson:{feature}"  # No pagination, simplified cache key
    features = []

    offset = 0
    page_size = 10000  # We'll still fetch in batches to avoid memory issues

    while True:
        query = f"""
        SELECT jsonb_build_object(
            'type', 'Feature',
            'id', "{table_name}".id,
            'geometry', ST_AsGeoJSON("{table_name}".shape)::jsonb,
            'properties', to_jsonb("{table_name}") - 'id' - 'shape'
        ) AS feature
        FROM "{schema_name}"."{table_name}"
        OFFSET {offset} LIMIT {page_size};
        """

        try:
            result = await database.fetch_all(query)
            logger.info(f"Fetching batch starting from offset {offset}")
            if not result:
                logger.info(f"No more data to fetch after offset {offset}")
                break
            features.extend([json.dumps(dict(r)['feature']) for r in result])
            offset += page_size
        except Exception as e:
            logger.error(f"Error fetching GeoJSON for feature {feature}: {e}")
            raise  # Trigger retry

    feature_collection = {
        "type": "FeatureCollection",
        "features": features
    }

    try:
        compressed_data = compress_data(feature_collection)
        redis_client.setex(cache_key, 3600 * 24 * 365 * 3, compressed_data)  # Cache for 3 years
        logger.info(f"Successfully cached GeoJSON data for feature {feature}")
        return True
    except TypeError as e:
        logger.error(f"Serialization error: {e}")
        return False

async def preload_cache(database_url):
    database = Database(database_url)
    await database.connect()

    tasks = []
    for feature, table_name in feature_to_table.items():
        tasks.append(fetch_and_cache_geojson_data(database, feature, table_name))

    results = await asyncio.gather(*tasks)
    await database.disconnect()
    return results



File: ./app/services/get_ta_list.py
---------------------------------
# services/get_ta_list.py

# Standard Library Imports
from typing import List, Dict

# Third-Party Library Imports
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import func
from sqlalchemy.sql import text


# Local Application Imports
from models.db_models import get_territorial_organization_model

async def get_tas(session: AsyncSession, year: str) -> List[Dict]:
    TerritorialAuthorityModel = get_territorial_organization_model(year)

    query = (
        select(
            func.distinct(TerritorialAuthorityModel.ta_v1_00).label('id'),
            TerritorialAuthorityModel.ta_v1_00_name.label('name'),
            TerritorialAuthorityModel.alpha_code,
            TerritorialAuthorityModel.issue_type,
            TerritorialAuthorityModel.vacancies
        )
        .where(TerritorialAuthorityModel.ta_v1_00 != '999')
        .order_by(TerritorialAuthorityModel.ta_v1_00_name)
    )

    result = await session.execute(query)
    rows = result.all()

    filtered_results = [
        {
            "id": row.id,
            "name": row.name,
            "alpha_code": row.alpha_code,
            "issue_type": row.issue_type,
            "vacancies": row.vacancies
        }
        for row in rows
    ]

    return filtered_results



async def get_schemas(session: AsyncSession) -> List[str]:
    query = text("""
    SELECT schema_name
    FROM information_schema.schemata
    WHERE schema_name ~ :pattern
    ORDER BY schema_name DESC
    """)
    result = await session.execute(query, {"pattern": r'^\d{4}$'})
    rows = result.fetchall()
    return [row[0] for row in rows]


File: ./app/services/ta_details.py
---------------------------------
# services/ta_details.py

from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from typing import Optional
from models.db_models import get_territorial_organization_model

class TaDetails(BaseModel):
    id: str
    name: str
    alpha_code: Optional[str]

# Updated function to use SQLAlchemy and AsyncSession
async def get_taDetails(db: AsyncSession, org_id: str, year: str) -> TaDetails:
    # Get the correct model for the given year
    TerritorialOrganization = get_territorial_organization_model(year)

    # Create the query using SQLAlchemy ORM
    query = select(
        TerritorialOrganization.ta_v1_00.label("id"),
        TerritorialOrganization.ta_v1_00_name.label("name"),
        TerritorialOrganization.alpha_code.label("alpha_code")
    ).where(TerritorialOrganization.ta_v1_00 == org_id)

    try:
        # Execute the query
        result = await db.execute(query)
        row = result.fetchone()

        if not row:
            raise ValueError(f"No TA details found with ID {org_id}")

        # Convert the result into a Pydantic model
        return TaDetails(id=row.id, name=row.name, alpha_code=row.alpha_code)
    
    except Exception as e:
        print(f"An error occurred while fetching TA details: {str(e)}")
        raise



File: ./app/services/database_internal.py
---------------------------------
from databases import Database
import os
# Database connection details
DATABASE_URL = os.getenv("DATABASE_URL")

# Function to initialize the database connection
async def get_database():
    database = Database(DATABASE_URL)
    try:
        await database.connect()
        yield database
    except Exception as e:
        # Handle database connection errors
        raise RuntimeError(f"Error connecting to the database: {e}")
    finally:
        await database.disconnect()



File: ./app/services/Ratepayer_calculator.py
---------------------------------
import json

def convert_to_json(data):
    return json.dumps(data, indent=4)

def map_keys(data):
    key_mappings = [
        ("District/City Council", "Mayor"),
        ("General Ward", "Ward"),
        ("Maori Ward", "Ward"),
        ("Local Board Area", "Local Board Area"),
        ("Community Board", "Community Board"),
        ("Subdivision", "Sub-Division"),
        ("Regional Council", "Regional Council"),
        ("General Constituency", "Constituency"),
        ("Maori Constituency", "Constituency")
    ] #Change mapping Keys as needed and in the needed order

    reordered_data = {}
    for prop, details in data.items():
        reordered_details = {}
        for original_key, new_key in key_mappings:
            if original_key in details:
                reordered_details[new_key] = details[original_key]
        for key, value in details.items():
            if key not in [k[0] for k in key_mappings]:
                reordered_details[key] = value
        reordered_data[prop] = reordered_details
    
    # After mapping, check if Mayor is Auckland and remove Regional Council if present
    for prop in reordered_data:
        if "Mayor" in reordered_data[prop] and reordered_data[prop]["Mayor"] == "Auckland":
            reordered_data[prop].pop("Regional Council", None) # Use pop to avoid KeyError if the key is not present
        
    return reordered_data

def process_properties_based_on_roll(properties, entitlements, roll_value):
    if roll_value == "Maori":
        # Process Maori roll-specific entitlements
        for prop, ent_details in entitlements.items():
            prop_data = properties.get(prop, {})
            prop_entitlements = prop_data.get("entitlements", {})
            
            # Check and update for Maori Ward
            if "Maori Ward" in prop_entitlements and prop_entitlements["Maori Ward"] not in [None, "null"]:
                if "General Ward" in ent_details:
                    ent_details["Maori Ward"] = prop_entitlements["Maori Ward"]
                    ent_details.pop("General Ward", None)
            else:
                ent_details.pop("Maori Ward", None)
                
            # Check and update for Maori Constituency
            if "Maori Constituency" in prop_entitlements and prop_entitlements["Maori Constituency"] not in [None, "null"]:
                if "General Constituency" in ent_details:
                    ent_details["Maori Constituency"] = prop_entitlements["Maori Constituency"]
                    ent_details.pop("General Constituency", None)
            else:
                ent_details.pop("Maori Constituency", None)
                
    elif roll_value == "General":
        # Process General roll-specific entitlements to ensure no Maori-specific entries
        for prop, ent_details in entitlements.items():
            prop_data = properties.get(prop, {})
            prop_entitlements = prop_data.get("entitlements", {})

            # Replace Maori Ward with General Ward if applicable
            if "Maori Ward" in ent_details:
                if "General Ward" in prop_entitlements and prop_entitlements["General Ward"] not in [None, "null"]:
                    ent_details["General Ward"] = prop_entitlements["General Ward"]
                ent_details.pop("Maori Ward", None)

            # Replace Maori Constituency with General Constituency if applicable
            if "Maori Constituency" in ent_details:
                if "General Constituency" in prop_entitlements and prop_entitlements["General Constituency"] not in [None, "null"]:
                    ent_details["General Constituency"] = prop_entitlements["General Constituency"]
                ent_details.pop("Maori Constituency", None)

    return entitlements



def calculate_entitlements_func(unsorted_properties):
    # Data cleaning and sorting logic
    for prop, details in unsorted_properties.items():
        if details is not None:
            for key, value in details.items():
                if value == "null":
                    details[key] = None

    properties = sorted(unsorted_properties.items(), key=lambda x: x[1]['Flags'].get('Priority_to_vote', '0'))

    # Initialize tracking sets
    voted_wards_district_council = set()
    voted_constituencies_region_council = set()
    voted_district_city_councils = set()
    voted_region_councils = set()
    voted_local_board_areas = set()
    voted_subdivisions = set()
    voted_community_boards = set()
    allocated_subdivisions_local_boards = set()
    allocated_subdivisions_community_boards = set()
    entitlements = {}
    roll=''
    for prop, details in properties:
        if details is None:
            continue

        flags = details.get("Flags", {})
        prop_type = flags.get("Type", "Resident")
        prop_entitlements = details.get("entitlements", {})
        roll = flags.get("Roll", "")
        entitlements[prop] = {}

        for category, value in prop_entitlements.items():
            if value is None or value == "null":
                continue

            # Exclusive voting for wards
            if category in ["General Ward", "Maori Ward"]:
                district_council = prop_entitlements.get("District/City Council")
                if district_council and (district_council not in voted_wards_district_council or prop_type == "Resident"):
                    voted_wards_district_council.add(district_council)
                    entitlements[prop][category] = value


            elif category == "Regional Council" and (prop_entitlements["Regional Council"] not in voted_region_councils or prop_type == "Resident"):
                voted_region_councils.add(prop_entitlements["Regional Council"])
                entitlements[prop][category] = value
                
            # Exclusive voting for constituencies
            elif category in ["General Constituency", "Maori Constituency"]:
                region_council = prop_entitlements.get("Regional Council")
                if region_council and (region_council not in voted_constituencies_region_council or prop_type == "Resident"):
                    voted_constituencies_region_council.add(region_council)
                    entitlements[prop][category] = value

            # Exclusive voting for District/City Council and Regional Council
            elif category == "District/City Council" and (prop_entitlements["District/City Council"] not in voted_district_city_councils or prop_type == "Resident"):
                voted_district_city_councils.add(prop_entitlements["District/City Council"])
                entitlements[prop][category] = value

            

            # Local Board Area, Subdivision, and Community Board logic
            elif category == "Local Board Area" and (value not in voted_local_board_areas or prop_type == "Resident"):
                voted_local_board_areas.add(value)
                entitlements[prop][category] = value

            if category == "Subdivision":
                local_board_area = prop_entitlements.get("Local Board Area")
                community_board = prop_entitlements.get("Community Board")

                if prop_type == "Resident" or (prop_type == "Ratepayer" and 
                    (local_board_area not in allocated_subdivisions_local_boards and 
                     community_board not in allocated_subdivisions_community_boards)):

                    if local_board_area:
                        allocated_subdivisions_local_boards.add(local_board_area)
                    if community_board:
                        allocated_subdivisions_community_boards.add(community_board)
                    voted_subdivisions.add(value)
                    entitlements[prop][category] = value

            elif category == "Community Board" and (value not in voted_community_boards or prop_type == "Resident"):
                voted_community_boards.add(value)
                entitlements[prop][category] = value 
                  
    roll_processed_entitlements = process_properties_based_on_roll(unsorted_properties, entitlements, roll)
    mapped_entitlements = map_keys(roll_processed_entitlements)
    mapped_entitlements_json = convert_to_json(mapped_entitlements)
    
    #print(mapped_entitlements_json)
    return mapped_entitlements_json




File: ./app/routes/maps.py
---------------------------------
# routes/maps.py


# Standard Library Imports
import os

# Third-Party Library Imports
from fastapi import APIRouter, Depends, HTTPException, Form, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse

# Local Application Imports
from config.config import templates
from services.maps_cache_loader import preload_cache
from services.auth.auth import (
    ACCESS_TOKEN_EXPIRE_MINUTES, 
    authenticate_user, 
    create_access_token, 
    get_password_hash, 
    get_current_active_user, 
    get_db, 
    get_current_user_from_cookie, 
    get_current_admin_user
)


router = APIRouter()



API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")
  
  
@router.get("/", response_class=HTMLResponse)
def home(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    """
    Render a landing page with buttons for navigating to different map pages.
    """
    if current_user.role == "admin":
        parent_template = "admin_base.html"
    else:
        parent_template = "base.html"
    return templates.TemplateResponse(
        "map-home.html",
        {"request": request, "parent_template": parent_template, "user_name": current_user.username.capitalize()},
    )

  
    
@router.get("/Map-google", response_class=HTMLResponse)
def map(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    if current_user.role == "admin":
        parent_template = "admin_base.html"
    else:
        parent_template = "base.html"
    return templates.TemplateResponse("maps-google.html", {"request": request,"parent_template": parent_template, "user_name": current_user.username.capitalize()})


@router.get("/Map-Screenshot", response_class=HTMLResponse)
def map(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    
    return templates.TemplateResponse("map-screenshot.html", {"request": request})



@router.get("/preload-cache")
async def preload_cache_endpoint(current_user: dict = Depends(get_current_user_from_cookie)):
    database_url = os.getenv("DATABASE_URL")
    results = await preload_cache(database_url)
    return JSONResponse(content={"results": results})



@router.get("/api-key")
async def get_api_key(current_user: dict = Depends(get_current_user_from_cookie)):
    return {"api_key": API_KEY}



'''
@router.get("/Map-google-api", response_class=HTMLResponse)
def map(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    return templates.TemplateResponse("maps-google-api.html", {"request": request})

@router.get("/Map", response_class=HTMLResponse)
def map(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    return templates.TemplateResponse("maps.html", {"request": request})
'''



File: ./app/routes/admin.py
---------------------------------
# Standard Library Imports
from contextlib import asynccontextmanager
from datetime import timedelta
import os

# Third-Party Library Imports
from fastapi import FastAPI, Request, Depends, HTTPException, status, Form, APIRouter
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession  # Updated import

# Local Application Imports
from config.config import templates
from services.auth import cros as cros
from models.models import LoginRequest, AddUserRequest, DeleteUserRequest
from services.auth.auth import (
    ACCESS_TOKEN_EXPIRE_MINUTES, authenticate_user, create_access_token, get_password_hash, get_db, get_current_admin_user
)
from services.auth.user_database import add_user, delete_user, get_all_users, AsyncSessionLocal

router = APIRouter()

def lstrip_zeros(value):
    return value.lstrip("0")

# Register the custom filter
templates.env.filters["lstrip_zeros"] = lstrip_zeros

@router.get("/admin", response_class=HTMLResponse)
async def admin_panel(
    request: Request,
    current_user: dict = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db),  # Updated type
):
    users = await get_all_users(db)  # Added 'await' since get_all_users is async
    return templates.TemplateResponse(
        "admin.html", {"request": request, "user_name": current_user.username.capitalize()}
    )

@router.get("/admin-login", response_class=HTMLResponse)
def admin_login_page(request: Request):
    return templates.TemplateResponse("admin_login.html", {"request": request})

@router.post("/admin/login")
async def admin_login(
    request: Request,
    login_data: LoginRequest,
    db: AsyncSession = Depends(get_db),  # Updated type
):
    user = await authenticate_user(db, login_data.username, login_data.password)  # Added 'await'
    if not user or user.role != "admin":
        return JSONResponse(status_code=400, content={"message": "Incorrect username or password"})
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    response = JSONResponse(status_code=200, content={"message": "Login successful"})
    response.set_cookie(key="access_token", value=f"{access_token}", httponly=True)
    return response

@router.post("/admin/add_user")
async def admin_add_user(
    request: Request,
    user_data: AddUserRequest,
    db: AsyncSession = Depends(get_db),  # Updated type
):
    hashed_password = get_password_hash(user_data.password)
    await add_user(
        db,
        user_data.username,
        user_data.full_name,
        user_data.email,
        hashed_password,
    )  # Added 'await'
    return RedirectResponse(url="/admin/add-remove-users", status_code=status.HTTP_303_SEE_OTHER)

@router.post("/admin/delete_user")
async def admin_delete_user(
    request: Request,
    user_data: DeleteUserRequest,
    db: AsyncSession = Depends(get_db),  # Updated type
):
    await delete_user(db, user_data.username)  # Added 'await'
    return RedirectResponse(url="/admin/add-remove-users", status_code=status.HTTP_303_SEE_OTHER)

@router.get("/admin/preload-cache", response_class=HTMLResponse)
async def admin_preload_cache(
    request: Request,
    current_user: dict = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db),  # Updated type
):
    return templates.TemplateResponse(
        "admin_preload_cache.html",
        {"request": request, "user_name": current_user.username.capitalize()},
    )

@router.get("/admin/add-remove-users", response_class=HTMLResponse)
async def admin_add_remove_users(
    request: Request,
    current_user: dict = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db),  # Updated type
):
    users = await get_all_users(db)  # Added 'await'
    return templates.TemplateResponse(
        "admin_add_remove_users.html",
        {"request": request, "users": users, "user_name": current_user.username.capitalize()},
    )



File: ./app/routes/GeoSpatialDataUpdate.py
---------------------------------
# Standard Library Imports
import json
import os
import re
from pathlib import Path
import xml.etree.ElementTree as ET

# Third-Party Library Imports
import requests
from fastapi.responses import RedirectResponse
from fastapi import APIRouter, Query, Request, HTTPException, Form, Depends, BackgroundTasks
from fastapi.templating import Jinja2Templates
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import text
from sqlalchemy.orm import Session
from sqlalchemy.ext.asyncio import AsyncSession


# Local Application Imports
from config.config import templates
from services.GeoSpatialDataUpdate.utils import (
    SessionLocal,
    download_and_insert_data,
    fetch_layers,
    find_latest_layer,
    get_current_data_versions,
    get_table_structure,
    insert_data_version,
    create_table_if_not_exists,
    namespace
)
from services.auth.auth import (
    ACCESS_TOKEN_EXPIRE_MINUTES, 
    authenticate_user, 
    create_access_token, 
    get_password_hash, 
    get_current_active_user, 
    get_db, 
    get_current_user_from_cookie, 
    get_current_admin_user
)

router = APIRouter()



@router.get("/currentdata")
async def update_route(request: Request):
     # Get current data versions from the database
    current_versions = await get_current_data_versions()

    return templates.TemplateResponse("current_data.html", {
            "request": request,
            "current_data": current_versions,
        })





@router.get("/updateroute")
async def update_route(request: Request):
    try:
        # URLs and keywords to match with layers, ordered as requested
        layers_of_interest = {
            "Subdivision": "Subdivision",
            "Territorial Authority Local Board": "Territorial Authority Local Board",
            "Community Board": "Community Board",
            "Wards": "Ward",
            "Māori Ward": "Māori Ward",  # Explicitly handle Māori Ward here
            "Territorial Authority": "Territorial Authority",
            "Constituency": "Constituency",
            "Māori Constituency": "Māori Constituency",
            "Regional Council": "Regional Council",
            "Meshblock": "Meshblock"
        }

        # Fetch layers from the GetCapabilities document
        url = "https://datafinder.stats.govt.nz/services;key=afaf73bb99e449b5a156b22c31be7112/wfs/?service=WFS&request=GetCapabilities"
        layers = fetch_layers(url)

        # Initialize a dictionary to store layers by year
        layers_by_year = {}

        # Iterate over the layers and find all relevant versions
        for layer in layers:
            name = layer.find('wfs:Name', namespace).text
            title = layer.find('wfs:Title', namespace).text

            # Extract year from the title and continue only if the year is 2020 or later
            match = re.search(r'\b(20[0-9]{2})\b', title)
            if match:
                year = int(match.group(1))
                if year < 2020:
                    continue  # Skip if the year is before 2020

                # Initialize the year in the dictionary if not already present
                if year not in layers_by_year:
                    layers_by_year[year] = []

                # Determine if we should require "generalised" or not
                require_generalised = (year < 2025)  # True for years before 2025

                # Check if the title contains any of the layers of interest
                for layer_category, search_term in layers_of_interest.items():
                    t_lower = title.lower()

                    # Helper functions to check conditions
                    def matches_condition(include_generalised):
                        # Base condition for all layers
                        base_cond = (search_term.lower() in t_lower and 
                                     "māori" not in t_lower and
                                     "clipped" not in t_lower)
                        if include_generalised:
                            return base_cond and ("generalised" in t_lower)
                        else:
                            # For 2025 and beyond, we drop the generalised requirement
                            return base_cond

                    # Handle Māori Ward
                    if layer_category == "Māori Ward":
                        # Māori Ward still needs generalised in previous years
                        if "māori ward" in t_lower and "clipped" not in t_lower:
                            if require_generalised and "generalised" in t_lower:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})
                            elif not require_generalised:
                                # If no longer requiring generalised (year >= 2025)
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})

                    # Handle Wards (exclude Māori)
                    elif layer_category == "Wards":
                        if "ward" in t_lower and "māori ward" not in t_lower and "clipped" not in t_lower:
                            if require_generalised and "generalised" in t_lower:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})
                            elif not require_generalised:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})

                    # Handle Māori Constituency separately
                    elif layer_category == "Māori Constituency":
                        if "māori constituency" in t_lower and "clipped" not in t_lower:
                            if require_generalised and "generalised" in t_lower:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})
                            elif not require_generalised:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})

                    # Handle Territorial Authority (exclude local board)
                    elif layer_category == "Territorial Authority":
                        if search_term.lower() in t_lower and "local board" not in t_lower and "clipped" not in t_lower:
                            if require_generalised and "generalised" in t_lower:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})
                            elif not require_generalised:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})

                    # Handle Constituency (exclude Māori)
                    elif layer_category == "Constituency":
                        if search_term.lower() in t_lower and "māori" not in t_lower and "clipped" not in t_lower:
                            if require_generalised and "generalised" in t_lower:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})
                            elif not require_generalised:
                                layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})

                    # Handle other layers of interest
                    else:
                        # For other categories, we rely on matches_condition
                        if matches_condition(require_generalised):
                            layers_by_year[year].append({'name': name, 'title': title, 'category': layer_category})

        # Sort the layers within each year by the predefined order
        for year, layers_in_year in layers_by_year.items():
            layers_in_year.sort(key=lambda x: list(layers_of_interest.keys()).index(x['category']))

        # Sort the years in descending order
        sorted_years = sorted(layers_by_year.keys(), reverse=True)

        # Get current data versions from the database
        current_versions = await get_current_data_versions()

        return templates.TemplateResponse("update.html", {
            "request": request,
            "current_data": current_versions,
            "layers_by_year": layers_by_year,
            "sorted_years": sorted_years
        })
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

  
  
  
  
  
   

@router.post("/update_data")
async def update_data(dataset_name: str = Form(...), layer_id: str = Form(...), year: str = Form(...)):
    try:
        print(f"Received dataset_name: {dataset_name}, layer_id: {layer_id}, and year: {year}")

        # Use dataset_name directly (without lowercasing) to match the dictionary keys
        schema_name = year  # Use the year as the schema name
        year_int = int(year)  # Convert year to integer for processing

        # Create schema if it doesn't exist and create table with the dynamic year
        await create_table_if_not_exists(schema_name, dataset_name, year_int)  # Await this function

        # Fetch and insert data into the table with the dynamic year
        await download_and_insert_data(dataset_name, layer_id, schema_name, year_int)  # Await this function

        # Update the data_versions table
        await insert_data_version(dataset_name, year_int, schema_name)  # Await this function

        # Redirect to the update route after a successful update
        return RedirectResponse(url="/Geo/updateroute", status_code=303)

    except Exception as e:
        print(f"Exception occurred: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))







@router.get("/select_schema")
async def select_schema(request: Request, db: AsyncSession = Depends(get_db)):
    try:
        # Fetch schemas that are either numeric or named 'versioning'
        result = await db.execute(text("""
            SELECT DISTINCT table_schema
            FROM information_schema.tables
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
            AND (table_schema ~ '^\d+$' OR table_schema = 'versioning')
            ORDER BY table_schema;
        """))

        # Extract schema names from the result
        schemas = [row[0] for row in result.fetchall()]

        return templates.TemplateResponse("select_schema.html", {
            "request": request,
            "schemas": schemas
        })

    except Exception as e:
        # Handle exceptions and log errors
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))





@router.get("/get_tables/{schema_name}")
async def get_tables(schema_name: str, db: AsyncSession = Depends(get_db)):
    try:
        # Fetch tables from the selected schema
        result = await db.execute(text("""
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = :schema_name
            ORDER BY table_name;
        """), {"schema_name": schema_name})

        tables = [row[0] for row in result.fetchall()]  # No need to await on fetchall()

        return {"tables": tables}  # Return as JSON for JavaScript to handle

    except Exception as e:
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")




@router.get("/view_data")
async def view_data(request: Request, schema_name: str, dataset_name: str, db: AsyncSession = Depends(get_db)):
    # Properly quote schema and table names to avoid syntax errors
    table_name = f'"{schema_name}"."{dataset_name}"'

    try:
        # Log the table name being queried
        print(f"Querying table: {table_name}")

        # Get column names excluding the ones you want to hide
        result = await db.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_schema = :schema_name 
            AND table_name = :dataset_name 
            AND column_name NOT IN ('land_area_sq_km', 'area_sq_km', 'shape_length', 'shape_area', 'shape');
        """), {"schema_name": schema_name, "dataset_name": dataset_name})
        
        # Fetch the results without awaiting
        columns = [row[0] for row in result.fetchall()]  # No await needed here
        if not columns:
            raise HTTPException(status_code=404, detail="No columns found for the specified table.")

        # Build the SELECT query with the remaining columns and order by id
        query = f'SELECT {", ".join(columns)} FROM {table_name} ORDER BY id;'
        print(f"Executing query: {query}")  # Log the SQL query being executed
        
        # Execute the data query and fetch results
        data_result = await db.execute(text(query))
        data = [row._mapping for row in data_result.fetchall()]  # No await needed here

        # Filter out rows where `es_num_code` is 99
        filtered_data = [row for row in data if row.get('es_num_code') != '99']  # Adjust type if necessary

        # Log the filtered data
        print(f"Filtered Data retrieved: {filtered_data}")

        # Return the filtered data within the template
        return templates.TemplateResponse("view_data.html", {
            "request": request, 
            "data": filtered_data, 
            "table_name": table_name, 
            "year": schema_name
        })
    
    except HTTPException as e:
        # If the issue is with finding columns or other HTTP errors
        print(f"HTTP Error: {e.detail}")
        raise e
    
    except Exception as e:
        # Log the general error and raise HTTP 500 error
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")





@router.post("/update_table_data")
async def update_table_data(
    request: Request, 
    year: str = Form(...), 
    dataset_name: str = Form(...), 
    db: AsyncSession = Depends(get_db)  # Use AsyncSession instead of Session
):
    form_data = await request.form()

    # Properly format the table name by removing extra quotes
    dataset_name = dataset_name.split(".")[-1].replace('"', '')
    table_name = f'"{year}"."{dataset_name}"'
    
    try:
        print(f"Updating table: {table_name}")
        print(f"Form data: {form_data}")

        # Iterate over the form data to update records
        row_data = {}
        for key, value in form_data.items():
            if key.startswith("row_"):
                row_id = key.split('_')[1]
                column_name = key.split('_', 2)[2]

                if row_id not in row_data:
                    row_data[row_id] = {}
                
                # Check if the value is "NULL" and convert it to None
                row_data[row_id][column_name] = None if value == "NULL" else value

        for row_id, columns in row_data.items():
            for column_name, value in columns.items():
                if column_name != 'id':
                    # Cast the row_id to an integer
                    try:
                        row_id_int = int(row_id)  # Ensure row_id is an integer
                    except ValueError:
                        raise HTTPException(status_code=400, detail=f"Invalid row_id: {row_id}")
                    
                    query = text(f"UPDATE {table_name} SET {column_name} = :value WHERE id = :id")
                    print(f"Executing query: {query} with value: {value} and id: {row_id_int}")
                    await db.execute(query, {"value": value, "id": row_id_int})  # Await the execute method

        # Commit the transaction asynchronously
        await db.commit()  # Await the commit method
        print("Data committed successfully.")
    
    except Exception as e:
        # Rollback the transaction in case of error
        await db.rollback()  # Await the rollback method
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    
    # Redirect to the view data page after updating
    return RedirectResponse(url=f"/Geo/view_data?schema_name={year}&dataset_name={dataset_name}", status_code=303)






File: ./app/routes/gisServices.py
---------------------------------
# routes/gisServices.py

# Standard Library Imports
import asyncio
import time
import json
import tracemalloc
from typing import List, Dict
from sqlalchemy import text
import gzip
import orjson
from io import BytesIO


# Third-Party Library Imports
import googlemaps
from fastapi import APIRouter, Depends, HTTPException, Form, Response, Path, Query
from fastapi.responses import JSONResponse
from fastapi.responses import StreamingResponse
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession
from asyncpg.exceptions import UndefinedTableError  # Import the specific exception
from starlette.status import HTTP_500_INTERNAL_SERVER_ERROR
import logging

# Local Application Imports
from services.database import get_database
from services.addressServices import address_service as aserv
from config.dependencies import get_redis_client
from services.get_entitlement import (
    get_entitlement_roll as entserv,
    get_entitlement_noRoll as norollentserv,
    get_entitlement_noRoll_ratepayer as norillentservratepayer,
    get_entitlements_byCoordinates_noRoll as pc
)
from services import Ratepayer_calculator as rc
from services import geojson as gj
from models.models import (
    Address,
    AddressQuery,
    AddressQueryNoRoll,
    Coordinates,
    FeatureModel,
    AddressMeshblock,
    AddressQueryRatepayer,
    AddressResponse
)

# Initialize the router
router = APIRouter()

# Initialize the logger
logger = logging.getLogger(__name__)

# Start tracing memory allocations
tracemalloc.start()

# Initialize Google Maps client
gmaps_client = googlemaps.Client(key='AIzaSyCsvhHz6xMhry_y9PPjdwL3hFg4wwfBD9Y')



# Endpoint for getting addresses LINZ + Google with coordinates
@router.get("/addresses_suggestion_coordinates/", response_model=List[Address])
async def get_addresses(query: str = "", session: AsyncSession = Depends(get_database)):
    try:
        # Log the start time for LINZ query
        linz_start_time = time.time()
        linz_task = aserv.get_addresses_from_db(query, session)
        
        # Log the start time for Google Places API request
        google_start_time = time.time()
        google_task = aserv.get_google_address_suggestions(query)

        linz_addresses, google_addresses = await asyncio.gather(linz_task, google_task)

        # Log the time taken for each task
        linz_end_time = time.time()
        google_end_time = time.time()
        print(f"LINZ task took {linz_end_time - linz_start_time:.2f} seconds")
        print(f"Google task took {google_end_time - google_start_time:.2f} seconds")

        # Combine and deduplicate results
        combined_addresses = linz_addresses + google_addresses
        unique_addresses = aserv.deduplicate_addresses(combined_addresses)

        # Sort addresses after deduplication
        sorted_addresses = sorted(unique_addresses, key=lambda x: x.full_add_1)

        return sorted_addresses

    except Exception as e:
        logger.error(f"Error fetching addresses: {e}")
        raise HTTPException(status_code=500, detail=str(e))




# Endpoint for getting addresses LINZ + Google with out with coordinates
@router.get("/addresses_suggestion/", response_model=List[Address])
async def get_addresses(query: str = "", session: AsyncSession = Depends(get_database)):
    try:
        linz_task = aserv.get_addresses_from_db(query, session)
        
        google_task = aserv.get_google_address_only_suggestions(query)

        linz_addresses, google_addresses = await asyncio.gather(linz_task, google_task)

     

        # Combine and deduplicate results
        combined_addresses = linz_addresses + google_addresses
        unique_addresses = aserv.deduplicate_addresses(combined_addresses)

        # Sort addresses after deduplication
        sorted_addresses = sorted(unique_addresses, key=lambda x: x.full_add_1)

        return sorted_addresses

    except Exception as e:
        logger.error(f"Error fetching addresses: {e}")
        raise HTTPException(status_code=500, detail=str(e))



# Endpoint for getting addresses from LINZ dataset
@router.get("/addresses_suggestion_linz/", response_model=List[Address])
async def get_addresses_linz(query: str = "", session: AsyncSession = Depends(get_database)):
    try:
        # Log the start time for LINZ query
        linz_start_time = time.time()

        # Fetch addresses from LINZ
        linz_addresses = await aserv.get_addresses_from_db(query, session)

        # Log the time taken for LINZ task
        linz_end_time = time.time()
        print(f"LINZ task took {linz_end_time - linz_start_time:.2f} seconds")

        # Sort addresses directly after fetching
        sorted_addresses = sorted(linz_addresses, key=lambda x: x.full_add_1)

        return sorted_addresses

    except Exception as e:
        logger.error(f"Error fetching addresses from LINZ: {e}")
        raise HTTPException(status_code=500, detail=str(e))





# Endpoint for getting addresses from Google dataset
@router.get("/addresses_suggestion_google/", response_model=List[Address])
async def get_addresses_google(query: str = ""):
    try:
        # Fetch addresses from Google Places API
        google_addresses = await aserv.get_google_address_suggestions(query)

        # Sort addresses after fetching
        sorted_addresses = sorted(google_addresses, key=lambda x: x.full_add_1)

        return sorted_addresses

    except Exception as e:
        logger.error(f"Error fetching addresses from Google: {e}")
        raise HTTPException(status_code=500, detail=str(e))




# Endpoint for getting entitlement by coordinates
@router.get("/get_entitlement_coordinates/")
async def receive_coordinates(
    easting: float = Query(..., description="Easting coordinate"),
    northing: float = Query(..., description="Northing coordinate"),
    session: AsyncSession = Depends(get_database)
):
    coordinates = Coordinates(easting=easting, northing=northing)
    
    try:
        result = await pc.process_coordinates(coordinates, session, '2023')
        
        if result['status'] == 'error':
            return JSONResponse(status_code=200, content={"message": result["message"]})
        
        content = json.dumps(result['data'])
        return Response(content=content, media_type="application/json")
    except SQLAlchemyError as e:
        error_message = f"Database error: {e}"
        print(error_message)
        return JSONResponse(status_code=500, content={"detail": error_message})
    except Exception as e:
        error_message = f"Error processing coordinates: {e}"
        print(error_message)
        return JSONResponse(status_code=500, content={"detail": error_message})






@router.get("/reverse_geocode", response_model=AddressResponse)
async def reverse_geocode(easting: float, northing: float, session: AsyncSession = Depends(get_database)) -> List[dict]:
    radius = 250 # Adjust the search radius in meters as needed
    
    query = text("""
        WITH transformed_point AS (
            -- Create a point from the provided easting and northing in SRID 2193
            SELECT ST_SetSRID(ST_MakePoint(:easting, :northing), 2193) AS geom
        )
        SELECT 
            address_id, 
            full_address_ascii, 
            full_address_number, 
            full_road_name_ascii, 
            suburb_locality_ascii, 
            town_city_ascii, 
            ST_Distance(a.shape, t.geom) AS distance
        FROM address.addresses a, transformed_point t
        WHERE ST_DWithin(a.shape, t.geom, :radius)  -- :radius is the search radius in meters
        ORDER BY ST_Distance(a.shape, t.geom)
        LIMIT 1;
    """)
    
    result = await session.execute(query, {'easting': easting, 'northing': northing, 'radius': radius})
    address = result.fetchone()
    
    if address:
        return {
            "address_id": address.address_id,
            "full_address": address.full_address_ascii,
            "number": address.full_address_number,
            "street": address.full_road_name_ascii,
            "suburb": address.suburb_locality_ascii,
            "city": address.town_city_ascii
        }
    return {"message": "Address not found"}





@router.post("/{year}/get_geojson/")
async def get_geojson(
    feature_data: FeatureModel,
    year: str = Path(..., description="Year for filtering or categorization"),
    redis_client=Depends(get_redis_client),
    session: AsyncSession = Depends(get_database)
):
    feature = feature_data.feature
    try:
        async with session.begin():  # Ensure session is properly managed
            data = await gj.fetch_geojson_data(feature, session, year, redis_client)
            if data is None:
                # Unlikely to reach here due to fetch_geojson_data's explicit handling
                raise HTTPException(status_code=204, detail="No GeoJSON data found.")
        return JSONResponse(content=data, media_type="application/json")

    except HTTPException as e:
        # Pass through any handled HTTPExceptions
        raise e

    except Exception as e:
        print(f"Unexpected error fetching GeoJSON for feature {feature}: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred while fetching the GeoJSON data.")



@router.post("/live/getgeojson/")
async def get_geojson(
    feature_data: FeatureModel,
    redis_client=Depends(get_redis_client),
    session: AsyncSession = Depends(get_database)
):
    feature = feature_data.feature
    try:
        async with session.begin():  # Ensure session is properly managed
            data = await gj.fetch_geojson_data_LT(feature, session, 'live', redis_client)
            if data is None:
                # Unlikely to reach here due to fetch_geojson_data's explicit handling
                raise HTTPException(status_code=204, detail="No GeoJSON data found.")
        return JSONResponse(content=data, media_type="application/json")

    except HTTPException as e:
        # Pass through any handled HTTPExceptions
        raise e

    except Exception as e:
        print(f"Unexpected error fetching GeoJSON for feature {feature}: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred while fetching the GeoJSON data.")




# Endpoint for getting addresses by meshblocks
@router.post("/addresses_by_meshblocks/", response_model=List[AddressMeshblock])
async def get_addresses_by_meshblocks(meshblock_ids: List[str], session: AsyncSession = Depends(get_database)):
    try:
        addresses = await aserv.get_addresses_by_meshblocks(meshblock_ids, session)
        return addresses
    except Exception as e:
        logger.error(f"Error fetching addresses for mesh blocks {meshblock_ids}: {e}")
        raise HTTPException(status_code=500, detail=str(e))






'''# Endpoint for checking entitlement with no roll check
@router.post("/check_entitlement_no_roll/")
async def check_entitlement(query: AddressQueryNoRoll, session: AsyncSession = Depends(get_database)):
    print("query :", query)
    try:
        return await norollentserv.check_address_entitlement_no_roll(query, session)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
'''




# Endpoint for checking entitlement for ratepayer with no roll check
@router.post("/check_entitlement_no_roll_ratepayer/")
async def check_entitlement(query: AddressQueryRatepayer, session: AsyncSession = Depends(get_database)):
    print("query :", query)
    try:
        return await norillentservratepayer.check_address_entitlement_no_roll(query, session)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    





File: ./app/routes/SVD.py
---------------------------------
from fastapi import APIRouter, Depends, Depends,HTTPException
from fastapi.responses import JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi import Query
from typing import List,Dict








File: ./app/routes/entitlementsBook.py
---------------------------------
# Standard Library Imports
from typing import Any, List, Dict, Optional
import os

# Third-Party Library Imports
from fastapi import APIRouter, Depends, HTTPException, Form, Request, Query
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.requests import Request


# Local Application Imports
from config.config import templates
from services import database as dbconnserv
from services.addressServices import address_service as aserv
from services.auth.auth import get_current_admin_user, get_current_user_from_cookie
from services.auth.user_database import User
from services.get_ta_list import get_tas, get_schemas
from services.parse_TA_id import parse_ta_id
from services.by_orgID.get_wards_by_orgID import get_wards_by_ta
from services.by_orgID.get_localBoard_by_orgID import get_local_boards
from services.by_orgID.get_communityBoard_by_orgID import get_community_boards
from services.by_TaID.get_subdivision_by_ta import get_community_subdivisions_by_ta
from services.by_TaID.get_constit_by_ta import get_all_constituencies_by_ta
from services.constituency_service import fetch_regional_councils_with_constituencies
from services.by_TaID.get_constituencies_with_rc_by_ta import (
    associate_constituencies_with_regional_councils, 
    get_ta_by_regc
)




router = APIRouter()
 


def lstrip_zeros(value):
    return value.lstrip("0")


# Register the custom filter
templates.env.filters["lstrip_zeros"] = lstrip_zeros


@router.get("/SelectCouncil", response_class=HTMLResponse, summary="HTML page to select Council/TA")
async def select_ta(request: Request, database=Depends(dbconnserv.get_database), current_user: dict = Depends(get_current_user_from_cookie)):
    try:
        # Get available schemas
        schemas = await get_schemas(database)
        
        # Default to the most recent schema if none selected
        selected_schema = request.query_params.get("selected_schema", schemas[-1])
        
        tas = await get_tas(database, selected_schema)
    except RuntimeError as e:
        print(e)
        return HTMLResponse(content="Error fetching TAs", status_code=500)
    
    if current_user.username == "admin":
        parent_template = "admin_base.html"
    else:
        parent_template = "base.html"
        
    return templates.TemplateResponse("selectCouncil.html", {
        "request": request,
        "parent_template": parent_template,
        "tas": tas,
        "schemas": schemas,
        "selected_schema": selected_schema,
        "user_name": current_user.username.capitalize()
    })

    
@router.get("/EntitlementBook", response_class=HTMLResponse, summary="HTML page to display divisions in selected Council/TA")
async def entitlement_book(
    request: Request,
    selected_ta: str,
    year: str,  # Accept the year parameter
    database=Depends(dbconnserv.get_database),
    current_user: dict = Depends(get_current_user_from_cookie)
):
    ta_id = selected_ta
    
    # Variation due to Auckland (076) having differences from other councils
    if ta_id == "076":
        local_board = await get_local_boards(database, ta_id, year)  # Pass the year to database functions
        community_board = local_board
        regional_council = []
    else:
        community_board = await get_community_boards(database, ta_id, year)
        regional_council = await associate_constituencies_with_regional_councils(database, ta_id, year)
    
    regional_constituency = await associate_constituencies_with_regional_councils(database, ta_id, year)
    community_subdivision = await get_community_subdivisions_by_ta(database, ta_id, year)
    wards = await get_wards_by_ta(database, ta_id, year)
    
    if current_user.username == "admin":
        parent_template = "admin_base.html"
    else:
        parent_template = "base.html"
    
        
    return templates.TemplateResponse("entitlementBook.html", {
        "request": request,
        "parent_template": parent_template,
        "ta_id": ta_id.lstrip("0"),
        "wards": wards,
        "community_board": community_board,
        "community_subdivision": community_subdivision,
        "regional_council": regional_council,
        "regional_constituency": regional_constituency,
        "user_name": current_user.username.capitalize(),
        "year": year  # Pass the year to the template
    })






@router.get("/EntitlementBook/tas", response_model=List[Dict[str, Optional[str]]], summary="List all Territorial Authority(TA) in the country")
async def list_tas(year: str, database=Depends(dbconnserv.get_database)) -> List[Dict[str, Optional[str]]]:
    tas = await get_tas(database, year)
    for ta in tas:
        ta["id"] = ta["id"].lstrip("0") if ta["id"] else None
    return tas





@router.get("/EntitlementBook/wards_TA", summary="List all wards in the TA_id passed to it")
async def wards(selected_ta: str, year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    ta_id = await parse_ta_id(selected_ta)
    wards = await get_wards_by_ta(database, ta_id, year)
    return {"wards": wards}


@router.get("/EntitlementBook/community_board_TA", summary="List all Community boards along with each subdivision if any in the TA_id passed to it")
async def community_board(selected_ta: str, year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    ta_id = await parse_ta_id(selected_ta)
    
    if ta_id == "076":
        community_board = await get_local_boards(database, ta_id, year)
    else:
        community_board = await get_community_boards(database, ta_id, year)

    def remove_geom(data: Any) -> Dict:
        """Removes 'geom' key from a dictionary if present and from its subdivisions."""
        data_dict = data if isinstance(data, dict) else data.dict()
        data_filtered = {k: v for k, v in data_dict.items() if k != "geom"}
        if "subdivisions" in data_filtered and isinstance(data_filtered["subdivisions"], list):
            data_filtered["subdivisions"] = [
                {k: v for k, v in sub.items() if k != "geom"} for sub in data_filtered["subdivisions"]
            ]
        return data_filtered

    community_board_filtered = [remove_geom(item) for item in community_board]

    return {"community_board": community_board_filtered}



@router.get("/EntitlementBook/community_subdivision_TA", summary="List all Subdivisions in the TA_id passed to it")
async def community_subdivision(selected_ta: str, year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    ta_id = await parse_ta_id(selected_ta)
    community_subdivision = await get_community_subdivisions_by_ta(database, ta_id, year)
    community_subdivision_filtered = [{k: v for k, v in item.items() if k != "geom"} for item in community_subdivision]
    return {"community_subdivision": community_subdivision_filtered}


@router.get("/EntitlementBook/regional_council_TA", summary="List of Regional council(s) along with each constituency if any in the TA_id is part of")
async def regional_council_TA(selected_ta: str, year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    ta_id = await parse_ta_id(selected_ta)
    regional_council = await associate_constituencies_with_regional_councils(database, ta_id, year)
    return {"regional_council": regional_council}

@router.get("/EntitlementBook/regional_constituency_TA", summary="List of Regional Constituency(s) a TA_id is part of")
async def regional_constituency_TA(selected_ta: str, year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    ta_id = await parse_ta_id(selected_ta)
    regional_constituency = await get_all_constituencies_by_ta(database, ta_id, year)
    return {"regional_constituency": regional_constituency}



@router.get("/EntitlementBook/regional_council_constituency", summary="List of Regional council(s) and their associated constituency(s)")
async def regional_council_divisions(year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    regional_council = await fetch_regional_councils_with_constituencies(database, year)
    return {"regional_council": regional_council}



@router.get("/EntitlementBook/ta_by_regional_constituency", summary="List of Territorial Authorities (TAs) a regional constituency is part of")
async def ta_by_regional_constituency(selected_regc: str, year: str, database=Depends(dbconnserv.get_database)) -> Dict:
    regc_id = selected_regc
    territorial_authorities = await get_ta_by_regc(database, regc_id, year)
    return {"territorial_authorities": territorial_authorities}


@router.get("/meshblock-lookup/", response_class=HTMLResponse)
def get_meshblock_lookup_page(request: Request, current_user: dict = Depends(get_current_user_from_cookie)):
    # This endpoint serves the HTML page for meshblock lookup
    return templates.TemplateResponse("meshblock_address.html", {"request": request, "user_name": current_user.username.capitalize()
})


File: ./app/routes/nominations.py
---------------------------------
# Standard Library Imports
import asyncio
from typing import List, Dict
import os

# Third-Party Library Imports
from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.responses import JSONResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession


# Local Application Imports
from config.config import templates
from services.by_orgID.get_organization import fetch_all_organizations
from services import database as dbconnserv
from services.database import get_database

from services.by_orgID.get_wards_by_orgID import get_wards_by_ta
from services.by_orgID.get_localBoard_by_orgID import get_local_boards
from services.by_orgID.get_communityBoard_by_orgID import get_community_boards
from services.by_orgID.get_regionalCouncil_constituencies_by_orgID import fetch_regional_council_with_constituencies
from services.by_TaID.get_constituencies_with_rc_by_ta import get_ta_by_regc
from services.by_orgID.get_mayor_by_orgID import get_mayor_by_ta
from services.by_orgID.get_districtWideCouncilor_by_orgID import get_ward_details_with_vacancies
from models.models import CommunityBoard, Ward, Mayor, RegionalCouncil, DistrictIssues, RegionalIssues, IssueNumCode, LicensingTrustIssues
from services.by_orgID.get_licensing_trust_orgID import get_licensing_trust_wards

router = APIRouter()
 

def lstrip_zeros(value):
    return value.lstrip("0")


# Register the custom filter
templates.env.filters["lstrip_zeros"] = lstrip_zeros




@router.get("/organisations", summary="List of all Organisation(TA[3 digit] & RC[2 digit])")
async def get_organizations(year: str, db: AsyncSession = Depends(get_database)) -> JSONResponse:
    organisations = await fetch_all_organizations(db, year)
    return JSONResponse(content={"organisations": organisations})



@router.get("/issue_by_organisation", summary="JSON data to display divisions in selected Organisation (TA[3 digit], RC[2 digit], LT[4 digit])")
async def entitlement_data(
    org_id: str = Query(..., description="The organisation ID to query"),
    year: str = Query(..., description="The year to query"),
    db: AsyncSession = Depends(get_database)  # Use AsyncSession
) -> JSONResponse:
    # Fetch all organizations for the given year
    organizations = await fetch_all_organizations(db, year)
    valid_org_ids = {org["num_code"] for org in organizations}

    # Check if org_id is valid
    if org_id not in valid_org_ids:
        raise HTTPException(status_code=400, detail=f"Organization ID {org_id} does not exist")

    if len(org_id) == 3:
        # District council
        if org_id == "076":
            community_board_data = await get_local_boards(db, org_id, year)
        else:
            community_board_data = await get_community_boards(db, org_id, year)

        wards_data = await get_wards_by_ta(db, org_id, year)
        mayor_data = await get_mayor_by_ta(db, org_id, year)
        district_councillors_data = await get_ward_details_with_vacancies(db, org_id, year)

        # Process CommunityBoard and Subdivision objects
        filtered_community_board = [
            CommunityBoard(
                **board.model_dump(exclude={"geom", "subdivisions", "name"}),
                name=(board.name + " Board" if "Local Board Area" not in board.name else board.name.replace(" Area", "")),
                subdivisions=[
                    sub.model_dump(exclude={"geom"})
                    for sub in board.subdivisions
                ]
            )
            for board in community_board_data
        ]

        # Convert DistrictWide instances to dictionaries
        district_wide_dicts = [dc.model_dump() for dc in district_councillors_data]

        # Prepare the 'district_issues' model for district councils
        district_issues = DistrictIssues(
            mayor=Mayor(**mayor_data.model_dump()),
            wards=[Ward(**ward.model_dump()) for ward in wards_data],
            community_board=filtered_community_board,
            district_wide=district_wide_dicts  # Pass as dictionaries
        )

        return JSONResponse(content=district_issues.model_dump())

    elif len(org_id) == 2:
        # Regional council
        regional_council_data = await fetch_regional_council_with_constituencies(db, org_id, year)
        
        # Prepare the 'regional_issues' model for regional councils
        regional_issues = RegionalIssues(
            regional_council=RegionalCouncil(**regional_council_data.model_dump())
        )

        return JSONResponse(content=regional_issues.model_dump())
    
    
    elif len(org_id) == 4:
        licensing_trust_wards = await get_licensing_trust_wards(org_id)  # Fetch wards/issues for licensing trusts
        
        if not licensing_trust_wards:
            raise HTTPException(status_code=404, detail="No wards/issues found for this licensing trust")

        # Map wards/issues to JSON-friendly format
        licensing_trust_issues = [LicensingTrustIssues(**ward) for ward in licensing_trust_wards]

        return JSONResponse(content=[issue.model_dump() for issue in licensing_trust_issues])

    else:
        raise ValueError("Invalid organisation ID format. It should be either two or three digits.")





@router.get("/issue_by_code", summary="Get organization details by issue code")
async def get_organization_by_issue_code(issue_code: str, year: str, database=Depends(dbconnserv.get_database)) -> JSONResponse:
    # Fetch all organizations
    organizations = await fetch_all_organizations(database, year)
    org_prefix = issue_code.split("-")[0]

    # Find the matched organization
    matched_organization = next((org for org in organizations if org["alpha_code"] == org_prefix), None)

    if not matched_organization:
        raise HTTPException(status_code=404, detail=f"Organization with code {org_prefix} not found")

    org_id = matched_organization["num_code"]

    # Initialize the IssueNumCode response
    issue_num_code = IssueNumCode()

    if len(org_id) == 3:
        # District council
        issue_num_code.local_authority_id.append(org_id.lstrip("0"))
        
        # Fetch multiple datasets concurrently using asyncio.gather
        local_board_task = get_local_boards(database, org_id, year) if org_id == "076" else get_community_boards(database, org_id, year)
        wards_task = get_wards_by_ta(database, org_id, year)
        mayor_task = get_mayor_by_ta(database, org_id, year)
        district_councillors_task = get_ward_details_with_vacancies(database, org_id, year)
        
        # Await all tasks
        community_board_data, wards_data, mayor_data, district_councillors_data = await asyncio.gather(
            local_board_task, wards_task, mayor_task, district_councillors_task
        )

        # Process CommunityBoard and Subdivision objects
        filtered_community_board = [
            CommunityBoard(
                **board.model_dump(exclude={"geom", "subdivisions", "name"}),
                name=(board.name + " Board" if "Local Board Area" not in board.name else board.name.replace(" Area", "")),
                subdivisions=[
                    sub.model_dump(exclude={"geom"})
                    for sub in board.subdivisions
                ]
            )
            for board in community_board_data
        ]

        # Convert DistrictWide instances to dictionaries
        district_wide_dicts = [dc.model_dump() for dc in district_councillors_data]

        # Prepare the 'district_issues' model for district councils
        district_issues = DistrictIssues(
            mayor=Mayor(**mayor_data.model_dump()),
            wards=[Ward(**ward.model_dump()) for ward in wards_data],
            community_board=filtered_community_board,
            district_wide=district_wide_dicts  # Pass as dictionaries
        )

        # Search for the issue code in the district data
        for ward in district_issues.wards or []:
            if ward.Issue_code == issue_code:
                issue_num_code.ward_id = ward.id
        for board in district_issues.community_board or []:
            if board.Issue_code == issue_code:
                issue_num_code.community_board_id = board.id
            for subdivision in board.subdivisions or []:
                if subdivision.Issue_code == issue_code:
                    issue_num_code.community_board_id = board.id
                    issue_num_code.subdivision_id = subdivision.id

    elif len(org_id) == 2:
        # Regional council
        regional_council_task = fetch_regional_council_with_constituencies(database, org_id, year)
        tas_covered_task = get_ta_by_regc(database, org_id, year)

        # Await both tasks concurrently
        regional_council_data, tas_covered = await asyncio.gather(regional_council_task, tas_covered_task)
        
        # Prepare the 'regional_issues' model for regional councils
        regional_issues = RegionalIssues(
            regional_council=RegionalCouncil(**regional_council_data.model_dump())
        )

        # Populate the local_authority_id field with TAs covered by the regional council
        issue_num_code.local_authority_id = [ta["id"].lstrip("0") for ta in tas_covered]

        # Search for the issue code in the regional data
        for constituency in regional_issues.regional_council.constituencies or []:
            if constituency.Issue_code == issue_code:
                issue_num_code.regional_constituency_id = constituency.id.lstrip("0")
                issue_num_code.regional_council_id = org_id.lstrip("0")

    return JSONResponse(content=issue_num_code.model_dump())




@router.get("/get_org_id_by_issue_code", summary="Get organization ID by issue code")
async def get_org_id_by_issue_code(issue_code: str, year: str, database=Depends(dbconnserv.get_database)) -> JSONResponse:
    # Fetch all organizations
    organizations = await fetch_all_organizations(database, year)
    org_prefix = issue_code.split("-")[0]

    # Find the matched organization
    matched_organization = None
    for org in organizations:
        if org["alpha_code"] == org_prefix:
            matched_organization = org
            break

    if not matched_organization:
        raise HTTPException(status_code=404, detail=f"Organization with code {org_prefix} not found")

    org_id = matched_organization["num_code"]

    return JSONResponse(content={"org_id": org_id})







File: ./app/routes/addressDataUpdate.py
---------------------------------
# Standard Library Imports
import json
import os
from io import BytesIO
from pathlib import Path

# Third-Party Library Imports
import ijson
import aiofiles
import httpx
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi import APIRouter, Query, Request, HTTPException, Form, Depends, BackgroundTasks
from fastapi.templating import Jinja2Templates
from sqlalchemy import text
from sqlalchemy.orm import Session
from sqlalchemy.ext.asyncio import AsyncSession


# Local Application Imports
from config.config import templates
from services.GeoSpatialDataUpdate.utils import SessionLocal
from services.auth.auth import (
    ACCESS_TOKEN_EXPIRE_MINUTES, 
    authenticate_user, 
    create_access_token, 
    get_password_hash, 
    get_current_active_user, 
    get_db, 
    get_current_user_from_cookie, 
    get_current_admin_user
)


router = APIRouter()

 
# Function to create the schema and table if they do not exist
async def create_schema_and_table(db: Session):
    # Ensure schema exists
    db.execute(text("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_namespace WHERE nspname = 'address') THEN
                EXECUTE 'CREATE SCHEMA address';
            END IF;
        END$$;
    """))

    # Ensure table exists
    db.execute(text("""
        CREATE TABLE IF NOT EXISTS address.addresses (
            address_id VARCHAR PRIMARY KEY,
            source_dataset TEXT,
            change_id TEXT,
            full_address_number TEXT,
            full_road_name TEXT,
            full_address TEXT,
            territorial_authority TEXT,
            unit_type TEXT,
            unit_value TEXT,
            level_type TEXT,
            level_value TEXT,
            address_number_prefix TEXT,
            address_number TEXT,
            address_number_suffix TEXT,
            address_number_high TEXT,
            road_name_prefix TEXT,
            road_name TEXT,
            road_type_name TEXT,
            road_suffix TEXT,
            water_name TEXT,
            water_body_name TEXT,
            suburb_locality TEXT,
            town_city TEXT,
            address_class TEXT,
            address_lifecycle TEXT,
            gd2000_xcoord FLOAT,
            gd2000_ycoord FLOAT,
            shape GEOMETRY(Point, 2193),  -- Store coordinates in EPSG:2193
            road_name_ascii TEXT,
            water_name_ascii TEXT,
            water_body_name_ascii TEXT,
            suburb_locality_ascii TEXT,
            town_city_ascii TEXT,
            full_road_name_ascii TEXT,
            full_address_ascii TEXT
        );
    """))
    await db.commit()






# Insert a batch of records into the database
async def batch_insert_data(db: Session, batch: list):
    try:
        # Insert data using PostGIS's ST_SetSRID and ST_Transform for coordinate transformation
        insert_query = """
        INSERT INTO address.addresses (
            address_id, source_dataset, change_id, full_address_number, full_road_name, full_address,
            territorial_authority, unit_type, unit_value, level_type, level_value,
            address_number_prefix, address_number, address_number_suffix, address_number_high,
            road_name_prefix, road_name, road_type_name, road_suffix, water_name, water_body_name,
            suburb_locality, town_city, address_class, address_lifecycle, gd2000_xcoord, gd2000_ycoord,
            ST_Transform(ST_SetSRID(ST_MakePoint(:gd2000_xcoord, :gd2000_ycoord), 4167), 2193),
            road_name_ascii, water_name_ascii, water_body_name_ascii, suburb_locality_ascii,
            town_city_ascii, full_road_name_ascii, full_address_ascii
        ) VALUES (
            :address_id, :source_dataset, :change_id, :full_address_number, :full_road_name, :full_address,
            :territorial_authority, :unit_type, :unit_value, :level_type, :level_value,
            :address_number_prefix, :address_number, :address_number_suffix, :address_number_high,
            :road_name_prefix, :road_name, :road_type_name, :road_suffix, :water_name, :water_body_name,
            :suburb_locality, :town_city, :address_class, :address_lifecycle, :gd2000_xcoord, :gd2000_ycoord,
            ST_Transform(ST_SetSRID(ST_MakePoint(:gd2000_xcoord, :gd2000_ycoord), 4167), 2193),
            :road_name_ascii, :water_name_ascii, :water_body_name_ascii, :suburb_locality_ascii,
            :town_city_ascii, :full_road_name_ascii, :full_address_ascii
        )
        ON CONFLICT (address_id) DO NOTHING
        """

        # Execute the batch insertion with PostGIS coordinate transformation
        await db.execute(text(insert_query), batch)  # await the execute call
        await db.commit()  # await the commit
        print("Batch inserted successfully.")

    except Exception as e:
        await db.rollback()  # await the rollback
        print(f"Error during batch insertion: {e}")
        raise






# Background task for processing the downloaded file
async def process_linz_data_file(file_path: Path, db: Session):
    try:
        # Initialize variables for batching
        batch_size = 10000
        batch = []
        record_count = 0

        # Process the saved JSON file using a streaming JSON parser
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as file:
            parser = ijson.items(file, 'features.item')

            async for feature in parser:
                properties = feature.get("properties", {})
                coordinates = feature.get("geometry", {}).get("coordinates", [])

                if not coordinates:
                    continue

                # Prepare record for batch insertion
                record = {
                    "address_id": properties.get("address_id"),
                    "source_dataset": properties.get("source_dataset"),
                    "change_id": properties.get("change_id"),
                    "full_address_number": properties.get("full_address_number"),
                    "full_road_name": properties.get("full_road_name"),
                    "full_address": properties.get("full_address"),
                    "territorial_authority": properties.get("territorial_authority"),
                    "unit_type": properties.get("unit_type"),
                    "unit_value": properties.get("unit_value"),
                    "level_type": properties.get("level_type"),
                    "level_value": properties.get("level_value"),
                    "address_number_prefix": properties.get("address_number_prefix"),
                    "address_number": properties.get("address_number"),
                    "address_number_suffix": properties.get("address_number_suffix"),
                    "address_number_high": properties.get("address_number_high"),
                    "road_name_prefix": properties.get("road_name_prefix"),
                    "road_name": properties.get("road_name"),
                    "road_type_name": properties.get("road_type_name"),
                    "road_suffix": properties.get("road_suffix"),
                    "water_name": properties.get("water_name"),
                    "water_body_name": properties.get("water_body_name"),
                    "suburb_locality": properties.get("suburb_locality"),
                    "town_city": properties.get("town_city"),
                    "address_class": properties.get("address_class"),
                    "address_lifecycle": properties.get("address_lifecycle"),
                    "gd2000_xcoord": coordinates[0],
                    "gd2000_ycoord": coordinates[1],
                    "road_name_ascii": properties.get("road_name_ascii"),
                    "water_name_ascii": properties.get("water_name_ascii"),
                    "water_body_name_ascii": properties.get("water_body_name_ascii"),
                    "suburb_locality_ascii": properties.get("suburb_locality_ascii"),
                    "town_city_ascii": properties.get("town_city_ascii"),
                    "full_road_name_ascii": properties.get("full_road_name_ascii"),
                    "full_address_ascii": properties.get("full_address_ascii")
                }

                batch.append(record)
                record_count += 1

                if len(batch) >= batch_size:
                    print(f"Inserting batch of {len(batch)} records into the database...")
                    await batch_insert_data(db, batch)  # await the batch_insert_data function
                    batch.clear()
                    print(f"Inserted {record_count} records so far...")

            if batch:
                print(f"Inserting final batch of {len(batch)} records into the database...")
                await batch_insert_data(db, batch)  # await the batch_insert_data function
                print(f"Final batch inserted. Total records: {record_count}")

        os.remove(file_path)  # Remove file after processing
        print(f"Temporary file {file_path} deleted.")
    except Exception as e:
        await db.rollback()  # await the rollback
        print(f"Error during data processing: {e}")
        raise



@router.post("/update_linz_address_data")
async def update_linz_address_data(background_tasks: BackgroundTasks, db: AsyncSession = Depends(get_db)):
    try:
        # Ensure the schema and table exist
        create_schema_and_table(db)

        # LINZ WFS URL to download data in GeoJSON format
        linz_wfs_url = "https://data.linz.govt.nz/services;key=aa6e6ed090624b15b45a3273b451b256/wfs/?service=WFS&version=2.0.0&request=GetFeature&typeNames=layer-105689&outputFormat=application/json"
        
        print(f"Sending request to LINZ WFS URL: {linz_wfs_url}")

        # Use httpx for async requests (no need for 'stream=True')
        async with httpx.AsyncClient() as client:
            response = await client.get(linz_wfs_url)
            response.raise_for_status()

            temp_file_path = Path("/tmp/linz_address_data.json")
            
            print(f"Saving data to {temp_file_path}")
            async with aiofiles.open(temp_file_path, 'wb') as temp_file:
                async for chunk in response.aiter_bytes():
                    await temp_file.write(chunk)

        print(f"Data saved to {temp_file_path}. Starting background processing...")

        # Start background task to process the file
        background_tasks.add_task(process_linz_data_file, temp_file_path, db)

        return {"message": "Data is being processed in the background. You will be notified upon completion."}

    except Exception as e:
        db.rollback()
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    
    
    
@router.get("/total_addresses")
async def get_total_addresses(db: AsyncSession = Depends(get_db)):
    try:
        # Query to count the total number of addresses
        result = await db.execute(text("SELECT COUNT(*) FROM address.addresses"))
        total_addresses = result.scalar()  # Do not await scalar(), it's a synchronous method
        
        return total_addresses
    
    except Exception as e:
        await db.rollback()  # Await rollback() as it's a coroutine
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        await db.close()  # Await close() as it's a coroutine






@router.get("/update_data_page", response_class=HTMLResponse)
async def update_data_page(request: Request, db: Session = Depends(get_db)):
    try:
        result = await db.execute(text("SELECT COUNT(*) FROM address.addresses"))
        total_addresses = result.scalar()  # Do not await scalar(), it's a synchronous method

        # Render the template with the total addresses
        return templates.TemplateResponse("update_address_view.html", {
            "request": request,
            "total_addresses": total_addresses
        })
    
    except Exception as e:
        db.rollback()
        print(f"Error occurred: {e}")
        raise HTTPException(status_code=500, detail=str(e))


File: ./app/routes/placesOfInterest.py
---------------------------------
import pandas as pd
from io import BytesIO
import math
import json

from fastapi import APIRouter, Form, Request, UploadFile, File, HTTPException, Depends, Query, Path
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.future import select
from sqlalchemy.sql.expression import func
from typing import List
import os
import logging

from models.models import POIRequest
from models.db_models import get_locations_model
from config.config import templates
from services.database import AsyncSessionLocal
from services.auth.auth import (
    ACCESS_TOKEN_EXPIRE_MINUTES, 
    authenticate_user, 
    create_access_token, 
    get_password_hash, 
    get_current_active_user, 
    get_db, 
    get_current_user_from_cookie, 
    get_current_admin_user
)



router = APIRouter()


# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@router.get("/", response_class=HTMLResponse)
async def poi_home_page(request: Request, db: AsyncSession = Depends(get_db), current_user: dict = Depends(get_current_admin_user)):
    """
    Render the POI Home Page with statistics and navigation options.
    """
    try:
        # Fetch total POIs and distinct categories
        query_stats = text("""
            SELECT 
                COUNT(*) AS total_pois,
                COUNT(DISTINCT "Category") AS distinct_categories
            FROM "2023"."Locations";
        """)  # Example: using 2023 schema for global stats
        result = await db.execute(query_stats)
        stats = result.fetchone()

        # Extract stats
        total_pois = stats[0]
        distinct_categories = stats[1]

        # Render the home page
        return templates.TemplateResponse("poi_home.html", {
            "request": request,
            "total_pois": total_pois,
            "distinct_categories": distinct_categories,
            "user_name": current_user.username.capitalize()
        })
    except Exception as e:
        print(f"Error loading POI home page: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while loading the POI home page.")








@router.get("/{year}/places_of_interest", response_class=JSONResponse)
async def get_places_of_interest(
    year: int = Path(..., description="Year schema to retrieve POIs"),
    category: str = Query(None, description="Filter places of interest by category"),
    db: AsyncSession = Depends(get_db)
):
    """
    Retrieve places of interest from the database using the specified year schema,
    optionally filtered by category.
    """
    try:
        # Get the dynamic model for the Locations table
        Locations = get_locations_model(str(year))

        # Build the base query
        stmt = select(Locations)
        if category:
            stmt = stmt.where(func.lower(Locations.Category) == category.lower())

        # Execute the query and fetch results
        result = await db.execute(stmt)
        places_of_interest_data = result.scalars().all()

        # Format the response
        locations = [
            {
                "local_board": place.Local_Board,
                "name": place.Name,
                "color": place.Color,
                "category": place.Category,
                "address": place.Address,
                "coordinates": {
                    "easting": place.Easting,
                    "northing": place.Northing
                },
                "council": place.Council  # Added the Council field
            }
            for place in places_of_interest_data
        ]
        return {"locations": locations}
    
    except SQLAlchemyError as e:
        # Handle database errors
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while retrieving places of interest.")
    except Exception as e:
        # Handle unexpected exceptions
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")



@router.get("/getAvailableYears", response_model=List[int])
async def get_available_years(db: AsyncSession = Depends(get_db)):
    """
    Retrieve available database schemas, excluding system schemas,
    and return only integer years.
    """
    try:
        # Fetch schemas from the database using text()
        query = text("""
            SELECT DISTINCT table_schema
            FROM information_schema.tables
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
            ORDER BY table_schema;
        """)
        result = await db.execute(query)

        schemas = [row[0] for row in result.fetchall()]
        years = [int(schema) for schema in schemas if schema.isdigit()]  # Filter for integer years
        return years

    except SQLAlchemyError as e:
        # Handle database errors
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while fetching available years.")
    except Exception as e:
        # Handle unexpected exceptions
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")




@router.get("/add", response_class=HTMLResponse)
async def add_poi_page(request: Request, db: AsyncSession = Depends(get_db), current_user: dict = Depends(get_current_user_from_cookie)):
    """
    Render the form to add a Point of Interest (POI) to the Locations table.
    """
    try:
        # Fetch available years (schemas) from the database
        query = text("""
            SELECT DISTINCT table_schema
            FROM information_schema.tables
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
            ORDER BY table_schema;
        """)
        result = await db.execute(query)
        schemas = [row[0] for row in result.fetchall()]
        years = [int(schema) for schema in schemas if schema.isdigit()]

        # Render the Jinja2 template
        return templates.TemplateResponse("add_poi.html", {"request": request, "years": years, "user_name": current_user.username.capitalize()
})
    except SQLAlchemyError as e:
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while loading the form.")
    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")

    
    
    
@router.post("/add_poi")
async def submit_poi(
    year: int = Form(...),
    local_board: str = Form(...),
    name: str = Form(None),
    color: str = Form(None),
    category: str = Form(None),
    address: str = Form(...),
    easting: float = Form(...),
    northing: float = Form(...),
    council: str = Form(None),  # Added Council as a form parameter
    db: AsyncSession = Depends(get_db)
):
    """
    Handle the form submission and add the POI to the Locations table in the specified year schema.
    """
    try:
        # Dynamically get the Locations model for the selected year schema
        Locations = get_locations_model(str(year))

        # Create a new POI instance
        new_poi = Locations(
            Local_Board=local_board,
            Name=name,
            Color=color,
            Category=category,
            Address=address,
            Easting=easting,
            Northing=northing,
            Council=council  # Added Council field
        )

        # Insert the new POI into the database
        async with db.begin():
            db.add(new_poi)

        # Redirect back to the form page with success message
        return RedirectResponse(url="/POI/add", status_code=303)
    except SQLAlchemyError as e:
        # Handle database errors
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="Failed to add the POI to the database.")
    except Exception as e:
        # Handle unexpected errors
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")

    
    
@router.get("/view", response_class=HTMLResponse)
async def view_pois_page(request: Request, db: AsyncSession = Depends(get_db), current_user: dict = Depends(get_current_user_from_cookie)):
    """
    Render the page to view Points of Interest (POIs) with filtering options.
    """
    try:
        # Fetch available years (schemas)
        query_years = text("""
            SELECT DISTINCT table_schema
            FROM information_schema.tables
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog')
            ORDER BY table_schema;
        """)
        result = await db.execute(query_years)
        schemas = [row[0] for row in result.fetchall()]
        years = [int(schema) for schema in schemas if schema.isdigit()]

        # Fetch available categories (assumes "Locations" table exists for all years)
        query_categories = text("""
            SELECT DISTINCT "Category"
            FROM "2023"."Locations"
            ORDER BY "Category";
        """)  # Example: defaulting to 2023 schema for global categories
        result_categories = await db.execute(query_categories)
        categories = [row[0] for row in result_categories.fetchall() if row[0]]

        # Render the template
        return templates.TemplateResponse("view_pois.html", {
            "request": request,
            "years": years,
            "categories": categories,
            "user_name": current_user.username.capitalize()

        })
    except Exception as e:
        print(f"Error loading POIs page: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while loading the POIs page.")


@router.get("/get_pois", response_class=JSONResponse)
async def get_pois(
    year: int = Query(..., description="Year schema to retrieve POIs"),
    category: str = Query(None, description="Category filter"),
    council: str = Query(None, description="Council filter"),  # Added council filter
    db: AsyncSession = Depends(get_db)
):
    """
    Fetch Points of Interest (POIs) filtered by year, category, and council.
    """
    try:
        # Dynamically get the Locations model
        Locations = get_locations_model(str(year))

        # Build the query
        stmt = select(Locations)
        if category:
            stmt = stmt.where(func.lower(Locations.Category) == category.lower())
        if council:
            stmt = stmt.where(func.lower(Locations.Council) == council.lower())  # Added council filter

        # Execute the query
        result = await db.execute(stmt)
        pois = result.scalars().all()

        # Format the response
        data = [
            {
                "local_board": poi.Local_Board,
                "name": poi.Name,
                "color": poi.Color,
                "category": poi.Category,
                "address": poi.Address,
                "coordinates": {
                    "easting": poi.Easting,
                    "northing": poi.Northing,
                },
                "council": poi.Council,  # Added the Council field
            }
            for poi in pois
        ]
        return {"pois": data}
    except Exception as e:
        print(f"Error fetching POIs: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while fetching POIs.")

    
    
    
@router.get("/get_councils", response_class=JSONResponse)
async def get_councils(
    year: int = Query(..., description="Year schema to retrieve councils"),
    db: AsyncSession = Depends(get_db)
):
    """
    Fetch available councils for the given year schema.
    """
    try:
        # Dynamically fetch councils for the specified year
        query_councils = text(f"""
            SELECT DISTINCT "Council"
            FROM "{year}"."Locations"
            ORDER BY "Council";
        """)
        result = await db.execute(query_councils)
        councils = [row[0] for row in result.fetchall() if row[0]]

        return {"councils": councils}
    except Exception as e:
        print(f"Error fetching councils: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while fetching councils.")


# Add the new endpoint here
@router.get("/getCategoriesByYear/{year}", response_class=JSONResponse)
async def get_categories_by_year(
    year: int = Path(..., description="Year schema to retrieve categories"),
    db: AsyncSession = Depends(get_db)
):
    """
    Fetch available categories for the given year schema.
    """
    try:
        # Dynamically get the Locations model for the selected year schema
        Locations = get_locations_model(str(year))

        # Build the query to fetch distinct categories
        stmt = select(func.distinct(Locations.Category)).where(Locations.Category.isnot(None)).order_by(Locations.Category)

        # Execute the query
        result = await db.execute(stmt)
        categories = [row[0] for row in result.fetchall()]

        # Return the categories as JSON
        return {"categories": categories}

    except SQLAlchemyError as e:
        print(f"Database error: {e}")
        raise HTTPException(status_code=500, detail="An error occurred while fetching categories.")
    except Exception as e:
        print(f"Unexpected error: {e}")
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")



File: ./app/routes/combinations.py
---------------------------------
import pandas as pd
from io import BytesIO
import math

from fastapi import APIRouter, Form, Request, UploadFile, File, HTTPException, Depends
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import IntegrityError
from asyncpg import UniqueViolationError
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.future import select
from sqlalchemy.orm import sessionmaker
from models.db_models import create_table_if_not_exists, create_combination_table
from services.database import get_database
from fastapi.responses import HTMLResponse
from config.config import templates


router = APIRouter()


def clean_value(value):
    """Convert NaN values to None, keep other values as they are."""
    if isinstance(value, float) and math.isnan(value):
        return None
    return value

def clean_integer_value(value):
    """Ensure the value is an integer or None."""
    if isinstance(value, float) and math.isnan(value):
        return None
    try:
        return int(value)
    except (ValueError, TypeError):
        return None


@router.post("/upload_combination_table/")
async def upload_combination_table(
    file: UploadFile = File(...), 
    schema: str = Form(...), 
    db: AsyncSession = Depends(get_database)
):
    try:
        # Read the uploaded Excel file into a pandas DataFrame
        contents = await file.read()
        df = pd.read_excel(BytesIO(contents))

        # Clean the DataFrame values
        df = df.apply(lambda col: col.apply(clean_value))

        # Create the table if it does not exist
        await create_table_if_not_exists(db, schema)

        # Fetch the dynamically created table model
        combination_table = create_combination_table(schema)

        # Track the number of successful inserts and updates
        inserted_rows = 0
        skipped_rows = 0

        # Insert data into the table row by row
        for index, row in df.iterrows():
            try:
                insert_stmt = insert(combination_table).values(
                    primary_key=row['Primary Key'],
                    name=row['Name'],
                    form_name=row['Form Name'],
                    election_name=row['Election Name'],
                    barcode=clean_integer_value(row['Barcode']),
                    local_authority_id=clean_integer_value(row['Local Authority ID']),  # Must be non-nullable
                    ward_id=clean_integer_value(row.get('Ward ID', None)),
                    community_board_id=clean_integer_value(row.get('Community Board ID', None)),
                    subdivision_id=clean_integer_value(row.get('Subdivision ID', None)),
                    regional_council_id=clean_integer_value(row.get('Regional Council ID', None)),
                    regional_constituency_id=clean_integer_value(row.get('Regional Constituency ID', None)),
                    licensing_trust_id=clean_integer_value(row.get('Licensing Trust ID', None)),
                    district_health_board_id=clean_integer_value(row.get('District Health Board ID', None))
                )

                # Add ON CONFLICT clause to handle duplicates
                insert_stmt = insert_stmt.on_conflict_do_nothing(index_elements=['primary_key'])

                # Execute the statement
                result = await db.execute(insert_stmt)
                if result.rowcount > 0:
                    inserted_rows += 1
                else:
                    skipped_rows += 1

            except IntegrityError as e:
                #logging.error(f"Integrity error: {e}")
                await db.rollback()
                raise e

        # Commit the session after all inserts
        await db.commit()

        return {
            "status": "success", 
            "message": f"Data successfully uploaded. {inserted_rows} rows inserted, {skipped_rows} rows skipped (duplicates)."
        }

    except Exception as e:
        await db.rollback()  # Rollback in case of other errors
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")
    
    
    
@router.get("/upload_combination_table_form/", response_class=HTMLResponse)
async def upload_combination_table_form(request: Request):
    return templates.TemplateResponse("upload_combination_table.html", {"request": request})





@router.get("/view_combination_data/{schema}", response_class=HTMLResponse)
async def view_combination_data(request: Request, schema: str, db: AsyncSession = Depends(get_database)):
    try:
        # Fetch the combination table model
        combination_table = create_combination_table(schema)

        # Fetch data from the table
        query = select(combination_table)
        result = await db.execute(query)
        data = result.fetchall()

        # Prepare the data for rendering
        rows = [
            {
                "primary_key": row.primary_key,
                "name": row.name,
                "form_name": row.form_name,
                "election_name": row.election_name,
                "barcode": row.barcode,
                "local_authority_id": row.local_authority_id,
                "ward_id": row.ward_id,
                "community_board_id": row.community_board_id,
                "subdivision_id": row.subdivision_id,
                "regional_council_id": row.regional_council_id,
                "regional_constituency_id": row.regional_constituency_id,
                "licensing_trust_id": row.licensing_trust_id,
                "district_health_board_id": row.district_health_board_id
            }
            for row in data
        ]

        # Render the template with data
        return templates.TemplateResponse("view_combination_table.html", {"request": request, "data": rows})

    except Exception as e:
        return HTMLResponse(f"An error occurred: {str(e)}", status_code=500)
    
    
    
@router.get("/select_schema_combination/", response_class=HTMLResponse)
async def select_schema(request: Request, db: AsyncSession = Depends(get_database)):
    try:
        # Query to get only numeric schemas, ordered numerically
        query = text("""
            SELECT schema_name
            FROM information_schema.schemata
            WHERE schema_name ~ '^\d+$'
            AND schema_name NOT IN ('pg_catalog', 'information_schema')
            ORDER BY CAST(schema_name AS INTEGER);
        """)
        result = await db.execute(query)
        schemas = [row[0] for row in result.fetchall()]

        # Render the template with available schemas
        return templates.TemplateResponse("select_schema_combination.html", {"request": request, "schemas": schemas})

    except Exception as e:
        return HTMLResponse(f"An error occurred: {str(e)}", status_code=500)



File: ./app/routes/entitlementCalculator.py
---------------------------------
# Standard Library Imports
import logging
import os

# Third-Party Library Imports
from fastapi import APIRouter, Depends, HTTPException, Form, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse

# Local Application Imports
from models.models import Property, RemovePropertyRequest
from services.property_processing import save_property_data
from config.config import templates




router = APIRouter()

    

@router.get("/EntitlementCalculator", response_class=HTMLResponse)
def read_item(request: Request):
    return templates.TemplateResponse("entitlementCalculator.html", {"request": request})
    

@router.post("/add_property")
async def save_property(request: Request, property: Property):
    result = await save_property_data(request.session, property)
    return JSONResponse(content=result)


@router.post("/remove_property")
async def remove_property(request: Request, body: RemovePropertyRequest):
    session = request.session
    if "properties" in session and isinstance(session["properties"], list):
        session["properties"] = [prop for prop in session["properties"] if prop['address'] != body.address_to_remove]
        print(session["properties"])
        return {"message": f"Property at {body.address_to_remove} removed successfully"}
    else:
        return {"message": "No property detials have been entered"}
    



File: ./app/models/db_models.py
---------------------------------
from sqlalchemy import Column, String, Float, Integer, MetaData, Table
from sqlalchemy.ext.declarative import declarative_base
from geoalchemy2.types import Geometry
from sqlalchemy.dialects.postgresql import TSVECTOR, UUID
from sqlalchemy.ext.asyncio import AsyncSession



Base = declarative_base()

# Cache dictionaries for each model type
territorial_model_cache = {}
regional_model_cache = {}
local_board_model_cache = {}
subdivision_model_cache = {}
ward_model_cache = {}
maori_ward_model_cache = {}
constituency_model_cache = {}
maori_constituency_model_cache = {}
community_board_model_cache = {}
combination_table_model_cache = {}
locations_model_cache = {}
licensing_trust_model_cache = {}  # Cache to store the model, if needed



# Define a function to dynamically create the model for Territorial Organization
def get_territorial_organization_model(year: str):
    if year in territorial_model_cache:
        return territorial_model_cache[year]

    class_name = f"TerritorialOrganization_{year}"
    TerritorialOrganization = type(class_name, (Base,), {
        "__tablename__": "territorial_authority",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "ta_v1_00": Column(String, name=f"ta{year}_v1_00", nullable=False),
        "ta_v1_00_name": Column(String, name=f"ta{year}_v1_00_name"),
        "ta_v1_00_name_ascii": Column(String, name=f"ta{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "dw_flag": Column(String),
        "dw_vacancies": Column(Integer),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    territorial_model_cache[year] = TerritorialOrganization
    return TerritorialOrganization

# Define a function to create the model for Regional Organization
def get_regional_organization_model(year: str):
    if year in regional_model_cache:
        return regional_model_cache[year]

    class_name = f"RegionalOrganization_{year}"
    RegionalOrganization = type(class_name, (Base,), {
        "__tablename__": "regional_council",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "regc_v1_00": Column(String, name=f"regc{year}_v1_00", nullable=False),
        "regc_v1_00_name": Column(String, name=f"regc{year}_v1_00_name"),
        "regc_v1_00_name_ascii": Column(String, name=f"regc{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "dw_flag": Column(String),
        "dw_vacancies": Column(Integer),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    regional_model_cache[year] = RegionalOrganization
    return RegionalOrganization

# Define a function to create the model for Local Board
def get_local_board_model(year: str):
    if year in local_board_model_cache:
        return local_board_model_cache[year]

    class_name = f"LocalBoard_{year}"
    LocalBoard = type(class_name, (Base,), {
        "__tablename__": "territorial_authority_local_board",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "talb_v1_00": Column(String, name=f"talb{year}_v1_00", nullable=False),
        "talb_v1_00_name": Column(String, name=f"talb{year}_v1_00_name"),
        "talb_v1_00_name_ascii": Column(String, name=f"talb{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    local_board_model_cache[year] = LocalBoard
    return LocalBoard

# Define a function to create the model for Subdivision
def get_subdivision_model(year: str):
    if year in subdivision_model_cache:
        return subdivision_model_cache[year]

    class_name = f"Subdivision_{year}"
    Subdivision = type(class_name, (Base,), {
        "__tablename__": "subdivision",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "tasub_v1_00": Column(String, name=f"tasub{year}_v1_00", nullable=False),
        "tasub_v1_00_name": Column(String, name=f"tasub{year}_v1_00_name"),
        "tasub_v1_00_name_ascii": Column(String, name=f"tasub{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    subdivision_model_cache[year] = Subdivision
    return Subdivision

# Define a function to create the model for Wards
def get_ward_model(year: str):
    if year in ward_model_cache:
        return ward_model_cache[year]

    class_name = f"WardModel_{year}"
    WardModel = type(class_name, (Base,), {
        "__tablename__": "wards",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "ward_v1_00": Column(String, name=f"ward{year}_v1_00", nullable=False),
        "ward_v1_00_name": Column(String, name=f"ward{year}_v1_00_name"),
        "ward_v1_00_name_ascii": Column(String, name=f"ward{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    ward_model_cache[year] = WardModel
    return WardModel

# Define a function to create the model for Maori Wards
def get_maori_ward_model(year: str):
    if year in maori_ward_model_cache:
        return maori_ward_model_cache[year]

    class_name = f"MaoriWardModel_{year}"
    MaoriWardModel = type(class_name, (Base,), {
        "__tablename__": "maori_ward",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "mward_v1_00": Column(String, name=f"mward{year}_v1_00", nullable=False),
        "mward_v1_00_name": Column(String, name=f"mward{year}_v1_00_name"),
        "mward_v1_00_name_ascii": Column(String, name=f"mward{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    maori_ward_model_cache[year] = MaoriWardModel
    return MaoriWardModel

# Define a function to create the model for Constituency
def get_constituency_model(year: str):
    if year in constituency_model_cache:
        return constituency_model_cache[year]

    class_name = f"ConstituencyModel_{year}"
    ConstituencyModel = type(class_name, (Base,), {
        "__tablename__": "constituency",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "con_v1_00": Column(String, name=f"con{year}_v1_00", nullable=False),
        "con_v1_00_name": Column(String, name=f"con{year}_v1_00_name"),
        "con_v1_00_name_ascii": Column(String, name=f"con{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "issue_type": Column(String),
        "vacancies": Column(Integer),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    constituency_model_cache[year] = ConstituencyModel
    return ConstituencyModel

# Define a function to create the model for Maori Constituency
def get_maori_constituency_model(year: str):
    if year in maori_constituency_model_cache:
        return maori_constituency_model_cache[year]

    class_name = f"MaoriConstituencyModel_{year}"
    MaoriConstituencyModel = type(class_name, (Base,), {
        "__tablename__": "maori_constituency",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "mcon_v1_00": Column(String, name=f"mcon{year}_v1_00", nullable=False),
        "mcon_v1_00_name": Column(String, name=f"mcon{year}_v1_00_name"),
        "mcon_v1_00_name_ascii": Column(String, name=f"mcon{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "issue_type": Column(String),
        "vacancies": Column(Integer),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    maori_constituency_model_cache[year] = MaoriConstituencyModel
    return MaoriConstituencyModel

# Define a function to create the model for Community Board
def get_community_board_model(year: str):
    if year in community_board_model_cache:
        return community_board_model_cache[year]

    class_name = f"CommunityBoard_{year}"
    CommunityBoard = type(class_name, (Base,), {
        "__tablename__": "community_board",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True),
        "cb_v1_00": Column(String, name=f"cb{year}_v1_00", nullable=False),
        "cb_v1_00_name": Column(String, name=f"cb{year}_v1_00_name"),
        "cb_v1_00_name_ascii": Column(String, name=f"cb{year}_v1_00_name_ascii"),
        "land_area_sq_km": Column(Float),
        "area_sq_km": Column(Float),
        "shape_length": Column(Float),
        "shape_area": Column(Float),
        "es_num_code": Column(String),
        "alpha_code": Column(String),
        "vacancies": Column(Integer),
        "issue_type": Column(String),
        "shape": Column(Geometry(geometry_type='MULTIPOLYGON', srid=2193)),
    })

    community_board_model_cache[year] = CommunityBoard
    return CommunityBoard


# Address Model (This does not need to be dynamic by year)
class AddressModel(Base):
    __tablename__ = 'addresses'
    __table_args__ = {'schema': 'address'}

    address_id = Column(Integer, primary_key=True)
    full_address_ascii = Column(String)
    full_address_number = Column(String)
    full_road_name_ascii = Column(String)
    suburb_locality_ascii = Column(String)
    town_city_ascii = Column(String)
    gd2000_xcoord = Column(Float)
    gd2000_ycoord = Column(Float)
    full_address_tsv = Column(TSVECTOR)


# Define a function to dynamically create the combination table model
def create_combination_table(schema: str):
    metadata = MetaData(schema=schema)
    
    combination_table = Table(
        "combination_table", metadata,
        Column("primary_key", String, primary_key=True),
        Column("name", String),
        Column("form_name", String),
        Column("election_name", String),
        Column("barcode", Integer),
        Column("local_authority_id", Integer, nullable=False),  # Non-nullable
        Column("ward_id", Integer, nullable=True),
        Column("community_board_id", Integer, nullable=True),
        Column("subdivision_id", Integer, nullable=True),
        Column("regional_council_id", Integer, nullable=True),
        Column("regional_constituency_id", Integer, nullable=True),
        Column("licensing_trust_id", Integer, nullable=True),
        Column("district_health_board_id", Integer, nullable=True),
        extend_existing=True
    )

    return combination_table


async def create_table_if_not_exists(db: AsyncSession, schema: str):
    table = create_combination_table(schema)

    # Create the table synchronously within the AsyncSession
    await db.run_sync(lambda sync_session: table.metadata.create_all(sync_session.bind))
    
    
    
def get_combination_table_model(schema: str):
    if schema in combination_table_model_cache:
        return combination_table_model_cache[schema]

    class_name = f"CombinationTable_{schema}"
    metadata = MetaData(schema=schema)
    
    CombinationTableModel = type(class_name, (Base,), {
        "__tablename__": "combination_table",
        "__table_args__": {"schema": schema, "extend_existing": True},
        "primary_key": Column(String, primary_key=True),
        "name": Column(String),
        "form_name": Column(String),
        "election_name": Column(String),
        "barcode": Column(Integer),
        "local_authority_id": Column(Integer, nullable=False),  # Non-nullable
        "ward_id": Column(Integer, nullable=True),
        "community_board_id": Column(Integer, nullable=True),
        "subdivision_id": Column(Integer, nullable=True),
        "regional_council_id": Column(Integer, nullable=True),
        "regional_constituency_id": Column(Integer, nullable=True),
        "licensing_trust_id": Column(Integer, nullable=True),
        "district_health_board_id": Column(Integer, nullable=True),
    })
    
    # Store in cache
    combination_table_model_cache[schema] = CombinationTableModel
    return CombinationTableModel



class LicensingTrust(Base):
    __tablename__ = 'licensing_trust'
    __table_args__ = {'schema': 'live', 'extend_existing': True}

    gid = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(80), nullable=True)
    shape = Column(Geometry('MULTIPOLYGON', srid=2193), nullable=True)
    es_num_code = Column(String(5), nullable=True)
    vacancies = Column(String(5), nullable=True)
    alpha_code = Column(String(10), nullable=True)
    issue_type = Column(String(5), nullable=True)



def get_locations_model(year: str):
    if year in locations_model_cache:
        return locations_model_cache[year]

    class_name = f"Locations_{year}"
    Locations = type(class_name, (Base,), {
        "__tablename__": "Locations",
        "__table_args__": {"schema": year, "extend_existing": True},
        "id": Column(Integer, primary_key=True, autoincrement=True),
        "Local_Board": Column(String(100)),
        "Name": Column(String(100)),  # Changed Library to Name
        "Color": Column(String(50)),
        "Category": Column(String(50)),
        "Address": Column(String),
        "Easting": Column(Float),
        "Northing": Column(Float),
        "Council": Column(String(100)),  # Added the new column
    })

    locations_model_cache[year] = Locations
    return Locations



File: ./app/models/models.py
---------------------------------
# Standard Library Imports
from typing import List, Dict, Optional, Any

# Third-Party Library Imports
from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy.ext.declarative import declarative_base
from pydantic import BaseModel, EmailStr, validator, Field

Base = declarative_base()

class LoginRequest(BaseModel):
    username: str
    password: str
    
class AddUserRequest(BaseModel):
    username: str
    full_name: str
    email: EmailStr
    password: str

class DeleteUserRequest(BaseModel):
    username: str


class Address(BaseModel):
    address_id: str
    full_add_1: str
    street_number: Optional[str] = None
    street_name: Optional[str] = None
    suburb: Optional[str] = None
    city: Optional[str] = None
    postal_code: Optional[str] = None
    country: Optional[str] = None
    easting: Optional[float] = None
    northing: Optional[float] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    
    
    # Validator to ensure easting and northing are valid floats
    @validator('easting', 'northing', pre=True, always=True)
    def parse_floats(cls, value):
        if value is None or value == 'easting' or value == 'northing':  # Handle invalid string values
            return None
        try:
            return float(value)
        except ValueError:
            raise ValueError(f"Unable to convert '{value}' to float")


class AddressMeshblock(BaseModel):
    address_id: str
    meshblock: str
    full_add_1: str
    council: str = None 
    general_ward: str = None 
    maori_ward: str = None 
    local_board: str = None 
    community_board: str = None 
    subdivision: str = None 

class AddressQuery(BaseModel):
    address: str
    roll: str

class PropertyFlags(BaseModel):
    Priority_to_vote: str = "0"
    Roll: str
    Type: str = "Resident"

class PropertyEntitlements(BaseModel):
    General_Ward: str = None
    Maori_Ward: str = None

class PropertyDetails(BaseModel):
    Flags: PropertyFlags
    entitlements: PropertyEntitlements

class PropertiesInput(BaseModel):
    properties: Dict[str, PropertyDetails]

class AddressQueryNoRoll(BaseModel):
    address: str
    address_id: str
  

class AddressQueryRatepayer(BaseModel):
    address: str
    address_id: str
    easting: Optional[float] = None
    northing: Optional[float] = None
  
    
class Property(BaseModel):
    address: str
    address_id: str
    rollType: str
    assessmentNumber: Optional[str] = None
    propertyType: str
    full_entitlements: Optional[dict] = None
    isClient: Optional[str] = None 
    
class RemovePropertyRequest(BaseModel):
    address_to_remove: str
    
class Coordinates(BaseModel):
    easting: float
    northing: float
    
class FeatureModel(BaseModel):
    feature: str

class IssueNumCode(BaseModel):
    local_authority_id: List[str] = []
    ward_id: str = "0"
    community_board_id: str = "0"
    regional_council_id: str = "0"
    regional_constituency_id: str = "0"
    licensing_trust_id: str = "0"
    district_health_board_id: str = "0"
    subdivision_id: str = "0"

class Organization(BaseModel):
    num_code: str
    name: str
    alpha_code: Optional[str]

class TerritorialOrganization(Organization):
    pass

class RegionalOrganization(Organization):
    pass

class Subdivision(BaseModel):
    id: str
    name: str
    geom: Optional[str] = None
    alpha_code: Optional[str] = None  # Updated from code
    issue_type: Optional[str] = None
    vacancies: Optional[str] = None
    Issue_code: Optional[str] = None  # Updated from AlphaCode

class CommunityBoard(BaseModel):
    id: str
    name: str
    geom: Optional[str] = None
    alpha_code: Optional[str] = None  # Updated from code
    issue_type: Optional[str] = None
    vacancies: Optional[str] = None
    Issue_code: Optional[str] = None  # Updated from AlphaCode
    subdivisions: List[Subdivision]

class DistrictWide(BaseModel):
    name: str
    alpha_code: Optional[str] = None  # Updated from code
    vacancies: Optional[str] = None
    issue_type: Optional[str] = None
    Issue_code: Optional[str] = None  # Updated from AlphaCode

    @staticmethod
    def from_record(record: Dict[str, Any]) -> 'DistrictWide':
        issue_type = 'W'
        issue_code = f"{record['alpha_code']}-{issue_type}-{record['alpha_code']}"
        return DistrictWide(
            name='District-Wide Councillor',
            alpha_code=record['alpha_code'],
            vacancies=str(record['dw_vacancies']),
            issue_type=issue_type,
            Issue_code=issue_code
        )

class Mayor(BaseModel):
    id: str
    name: str
    alpha_code: Optional[str]  # Updated from code
    issue_type: Optional[str]
    vacancies: Optional[str]
    Issue_code: Optional[str] = None  # Updated from AlphaCode

    @staticmethod
    def from_record(record: dict) -> 'Mayor':
        formatted_name = f"Mayor - {record['name']} Council"
        issue_code = f"{record['alpha_code']}-{record['issue_type']}" if record['issue_type'] else record['alpha_code']
        return Mayor(
            id=record['id'],
            name=formatted_name,
            alpha_code=record.get('alpha_code'),
            issue_type=record.get('issue_type'),
            vacancies=record.get('vacancies'),
            Issue_code=issue_code
        )

class LocalBoard(BaseModel):
    id: str
    name: str
    geom: Optional[str] = None
    alpha_code: Optional[str] = None  # Updated from code
    issue_type: Optional[str] = None
    vacancies: Optional[str] = None
    Issue_code: Optional[str] = None  # Updated from AlphaCode
    subdivisions: List[Subdivision]

class Constituency(BaseModel):
    id: str
    name: str
    alpha_code: Optional[str] = None  # Updated from code
    issue_type: Optional[str] = None
    vacancies: Optional[str] = None
    Issue_code: Optional[str] = None  # Updated from AlphaCode

class RegionalCouncil(BaseModel):
    id: str
    name: str
    alpha_code: Optional[str] = None  # Updated from code
    Issue_code: Optional[str] = None  # Updated from AlphaCode
    constituencies: List[Constituency]

class Ward(BaseModel):
    id: str
    name: str
    alpha_code: Optional[str] = None  # Updated from code
    issue_type: Optional[str] = None
    vacancies: Optional[str] = None
    Issue_code: Optional[str] = None  # Updated from AlphaCode

class DistrictIssues(BaseModel):
    mayor: Optional[Mayor] = None
    wards: Optional[List[Ward]] = None
    community_board: Optional[List[CommunityBoard]] = None
    district_wide: Optional[List[DistrictWide]] = None

class RegionalIssues(BaseModel):
    regional_council: Optional[RegionalCouncil] = None



class AddressResponse(BaseModel):
    address_id: str
    full_address: str
    number: str
    street: str
    suburb: str
    city: str



class LicensingTrustIssues(BaseModel):
    num_code: Optional[str] = None
    name: Optional[str] = None
    es_num_code: Optional[str] = None
    vacancies: Optional[str] = None
    alpha_code: Optional[str] = None
    issue_type: Optional[str] = None


class LicensingTrustOrg(BaseModel):
    num_code: Optional[str] = None
    name: Optional[str] = None
    alpha_code: Optional[str] = None


class POIRequest(BaseModel):
    Local_Board: Optional[str] = Field(None, max_length=100)
    Name: Optional[str] = Field(None, max_length=100)
    Color: Optional[str] = Field(None, max_length=50)
    Category: Optional[str] = Field(None, max_length=50)
    Address: Optional[str]
    Easting: Optional[float]
    Northing: Optional[float]
    Council: Optional[str] = Field(None, max_length=100)  # Added the new field



File: ./app/__init__.py
---------------------------------



File: ./app/non_api_functions/maps_cache_loader.py
---------------------------------
# Standard Library Imports
import asyncio
import json
import logging
import gzip

# Third-Party Library Imports
from redis import Redis
from databases import Database


# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Custom JSON Encoder to handle non-serializable types
class CustomEncoder(json.JSONEncoder):
    def default(self, obj):
        if hasattr(obj, 'isoformat'):  # For datetime objects or similar
            return obj.isoformat()
        elif isinstance(obj, bytes):  # For bytes, typically from binary data in databases
            return obj.decode('utf-8')
        return json.JSONEncoder.default(self, obj)

# Configure Redis client
redis_client = Redis(host='localhost', port=6379, db=0)

# Map feature names to table names
feature_to_table = {
    "Meshblock": "meshblock",
    "Councils": "territorial_authority",
    "Wards": "general_ward",
    "Subdivisions": "subdivision",
    "Regional Council":"regional_council",
    "General Constituency" : "general_constituency",
    "Maori Constituency": "maori_constituency",
    "Maori Wards": "maori_ward",
    "Local Board": "local_board",
    "Community Board":"community_board",
    "Plots" : "nz-primary-parcels"
    # Add more mappings as needed
}

def compress_data(data):
    return gzip.compress(json.dumps(data, cls=CustomEncoder).encode('utf-8'))

async def fetch_and_cache_geojson_data(database, feature, table_name, schema_name="live", page_size=10000):
    cache_key = f"geojson:{feature}"
    offset = 0
    features = []

    while True:
        query = f"""
        SELECT jsonb_build_object(
            'type', 'Feature',
            'id', "{table_name}".gid,
            'geometry', ST_AsGeoJSON(ST_Transform(ST_Simplify("{table_name}".geom, 0.001), 4326))::jsonb,
            'properties', to_jsonb("{table_name}") - 'gid' - 'geom'
        ) AS feature
        FROM "{schema_name}"."{table_name}"
        OFFSET {offset} LIMIT {page_size};
        """

        try:
            result = await database.fetch_all(query)
            logger.info(f"Fetching batch starting from offset {offset}")
            if not result:
                logger.info(f"No more data to fetch after offset {offset}")
                break
            features.extend([json.dumps(dict(r)['feature']) for r in result])  # Serialize each feature as JSON string
            offset += page_size
        except Exception as e:
            logger.error(f"Error fetching GeoJSON for feature {feature}: {e}")
            return False

    feature_collection = {
        "type": "FeatureCollection",
        "features": features
    }

    try:
        compressed_data = compress_data(feature_collection)
        redis_client.setex(cache_key, 3600 * 24 * 365 * 3, compressed_data)
        logger.info(f"Successfully cached GeoJSON data for feature {feature}")
        return True
    except TypeError as e:
        logger.error(f"Serialization error: {e}")
        return False

async def preload_cache(database_url):
    database = Database(database_url)
    await database.connect()

    tasks = []
    for feature, table_name in feature_to_table.items():
        tasks.append(fetch_and_cache_geojson_data(database, feature, table_name))

    results = await asyncio.gather(*tasks)
    await database.disconnect()
    return results

if __name__ == "__main__":
    DATABASE_URL = "postgresql://mapping:mapping@192.168.12.52:5432/gisdb"
    results = asyncio.run(preload_cache(DATABASE_URL))
    logger.info(f"Preloading results: {results}")



File: ./app/config/dependencies.py
---------------------------------
import aioredis
import os
from fastapi import Depends

# Redis client variable
redis_client = None

async def startup_redis():
    global redis_client
    if redis_client is None:  # Only create the client if it doesn't exist
        redis_host = os.getenv('REDIS_HOST', 'localhost')
        redis_port = int(os.getenv('REDIS_PORT', '6379'))
        redis_client = await aioredis.from_url(f"redis://{redis_host}:{redis_port}/0")
    return redis_client

async def shutdown_redis():
    global redis_client
    if redis_client:
        await redis_client.close()
        redis_client = None

# Dependency function to get the Redis client
async def get_redis_client():
    return await startup_redis()



File: ./app/config/config.py
---------------------------------
import os
from fastapi.templating import Jinja2Templates

# Get the absolute path to the "templates" directory
templates_dir = os.path.join(os.path.dirname(__file__), "..", "templates")

# Create the Jinja2Templates instance
templates = Jinja2Templates(directory=templates_dir)

